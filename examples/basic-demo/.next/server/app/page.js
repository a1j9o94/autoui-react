/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/page";
exports.ids = ["app/page"];
exports.modules = {

/***/ "../../client/components/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/client/components/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/client/components/action-async-storage.external.js");

/***/ }),

/***/ "../../client/components/request-async-storage.external":
/*!********************************************************************************!*\
  !*** external "next/dist/client/components/request-async-storage.external.js" ***!
  \********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/client/components/request-async-storage.external.js");

/***/ }),

/***/ "../../client/components/static-generation-async-storage.external":
/*!******************************************************************************************!*\
  !*** external "next/dist/client/components/static-generation-async-storage.external.js" ***!
  \******************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/client/components/static-generation-async-storage.external.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fpage&page=%2Fpage&appPaths=%2Fpage&pagePath=private-next-app-dir%2Fpage.tsx&appDir=%2FUsers%2Foblet%2FDocuments%2FGitHub%2Fautoui-react%2Fexamples%2Fbasic-demo%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Foblet%2FDocuments%2FGitHub%2Fautoui-react%2Fexamples%2Fbasic-demo&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fpage&page=%2Fpage&appPaths=%2Fpage&pagePath=private-next-app-dir%2Fpage.tsx&appDir=%2FUsers%2Foblet%2FDocuments%2FGitHub%2Fautoui-react%2Fexamples%2Fbasic-demo%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Foblet%2FDocuments%2FGitHub%2Fautoui-react%2Fexamples%2Fbasic-demo&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GlobalError: () => (/* reexport default from dynamic */ next_dist_client_components_error_boundary__WEBPACK_IMPORTED_MODULE_2___default.a),\n/* harmony export */   __next_app__: () => (/* binding */ __next_app__),\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   pages: () => (/* binding */ pages),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   tree: () => (/* binding */ tree)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_page_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-page/module.compiled */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/module.compiled.js?d969\");\n/* harmony import */ var next_dist_server_future_route_modules_app_page_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_page_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_client_components_error_boundary__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/client/components/error-boundary */ \"(rsc)/./node_modules/next/dist/client/components/error-boundary.js\");\n/* harmony import */ var next_dist_client_components_error_boundary__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_client_components_error_boundary__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_server_app_render_entry_base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/app-render/entry-base */ \"(rsc)/./node_modules/next/dist/server/app-render/entry-base.js\");\n/* harmony import */ var next_dist_server_app_render_entry_base__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_app_render_entry_base__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in next_dist_server_app_render_entry_base__WEBPACK_IMPORTED_MODULE_3__) if([\"default\",\"tree\",\"pages\",\"GlobalError\",\"originalPathname\",\"__next_app__\",\"routeModule\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => next_dist_server_app_render_entry_base__WEBPACK_IMPORTED_MODULE_3__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n\"TURBOPACK { transition: next-ssr }\";\n\n\n// We inject the tree and pages here so that we can use them in the route\n// module.\nconst tree = {\n        children: [\n        '',\n        {\n        children: ['__PAGE__', {}, {\n          page: [() => Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/app/page.tsx */ \"(rsc)/./src/app/page.tsx\")), \"/Users/oblet/Documents/GitHub/autoui-react/examples/basic-demo/src/app/page.tsx\"],\n          \n        }]\n      },\n        {\n        'layout': [() => Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/app/layout.tsx */ \"(rsc)/./src/app/layout.tsx\")), \"/Users/oblet/Documents/GitHub/autoui-react/examples/basic-demo/src/app/layout.tsx\"],\n'not-found': [() => Promise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! next/dist/client/components/not-found-error */ \"(rsc)/./node_modules/next/dist/client/components/not-found-error.js\", 23)), \"next/dist/client/components/not-found-error\"],\n        \n      }\n      ]\n      }.children;\nconst pages = [\"/Users/oblet/Documents/GitHub/autoui-react/examples/basic-demo/src/app/page.tsx\"];\n\n\nconst __next_app_require__ = __webpack_require__\nconst __next_app_load_chunk__ = () => Promise.resolve()\nconst originalPathname = \"/page\";\nconst __next_app__ = {\n    require: __next_app_require__,\n    loadChunk: __next_app_load_chunk__\n};\n\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_app_page_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppPageRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_PAGE,\n        page: \"/page\",\n        pathname: \"/\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\",\n        appPaths: []\n    },\n    userland: {\n        loaderTree: tree\n    }\n});\n\n//# sourceMappingURL=app-page.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZwYWdlJnBhZ2U9JTJGcGFnZSZhcHBQYXRocz0lMkZwYWdlJnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGcGFnZS50c3gmYXBwRGlyPSUyRlVzZXJzJTJGb2JsZXQlMkZEb2N1bWVudHMlMkZHaXRIdWIlMkZhdXRvdWktcmVhY3QlMkZleGFtcGxlcyUyRmJhc2ljLWRlbW8lMkZzcmMlMkZhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPSUyRlVzZXJzJTJGb2JsZXQlMkZEb2N1bWVudHMlMkZHaXRIdWIlMkZhdXRvdWktcmVhY3QlMkZleGFtcGxlcyUyRmJhc2ljLWRlbW8maXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxhQUFhLHNCQUFzQjtBQUNpRTtBQUNyQztBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakMsdUJBQXVCLGdKQUFvSDtBQUMzSTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQSx5QkFBeUIsb0pBQXNIO0FBQy9JLG9CQUFvQiwwTkFBZ0Y7QUFDcEc7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ3VCO0FBQzZEO0FBQ3BGLDZCQUE2QixtQkFBbUI7QUFDaEQ7QUFDTztBQUNBO0FBQ1A7QUFDQTtBQUNBO0FBQ3VEO0FBQ3ZEO0FBQ08sd0JBQXdCLDhHQUFrQjtBQUNqRDtBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdXRvdWktcmVhY3QtZXhhbXBsZS8/YTY4NiJdLCJzb3VyY2VzQ29udGVudCI6WyJcIlRVUkJPUEFDSyB7IHRyYW5zaXRpb246IG5leHQtc3NyIH1cIjtcbmltcG9ydCB7IEFwcFBhZ2VSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1wYWdlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbi8vIFdlIGluamVjdCB0aGUgdHJlZSBhbmQgcGFnZXMgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IHRyZWUgPSB7XG4gICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICcnLFxuICAgICAgICB7XG4gICAgICAgIGNoaWxkcmVuOiBbJ19fUEFHRV9fJywge30sIHtcbiAgICAgICAgICBwYWdlOiBbKCkgPT4gaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCIvVXNlcnMvb2JsZXQvRG9jdW1lbnRzL0dpdEh1Yi9hdXRvdWktcmVhY3QvZXhhbXBsZXMvYmFzaWMtZGVtby9zcmMvYXBwL3BhZ2UudHN4XCIpLCBcIi9Vc2Vycy9vYmxldC9Eb2N1bWVudHMvR2l0SHViL2F1dG91aS1yZWFjdC9leGFtcGxlcy9iYXNpYy1kZW1vL3NyYy9hcHAvcGFnZS50c3hcIl0sXG4gICAgICAgICAgXG4gICAgICAgIH1dXG4gICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICdsYXlvdXQnOiBbKCkgPT4gaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCIvVXNlcnMvb2JsZXQvRG9jdW1lbnRzL0dpdEh1Yi9hdXRvdWktcmVhY3QvZXhhbXBsZXMvYmFzaWMtZGVtby9zcmMvYXBwL2xheW91dC50c3hcIiksIFwiL1VzZXJzL29ibGV0L0RvY3VtZW50cy9HaXRIdWIvYXV0b3VpLXJlYWN0L2V4YW1wbGVzL2Jhc2ljLWRlbW8vc3JjL2FwcC9sYXlvdXQudHN4XCJdLFxuJ25vdC1mb3VuZCc6IFsoKSA9PiBpbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIm5leHQvZGlzdC9jbGllbnQvY29tcG9uZW50cy9ub3QtZm91bmQtZXJyb3JcIiksIFwibmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL25vdC1mb3VuZC1lcnJvclwiXSxcbiAgICAgICAgXG4gICAgICB9XG4gICAgICBdXG4gICAgICB9LmNoaWxkcmVuO1xuY29uc3QgcGFnZXMgPSBbXCIvVXNlcnMvb2JsZXQvRG9jdW1lbnRzL0dpdEh1Yi9hdXRvdWktcmVhY3QvZXhhbXBsZXMvYmFzaWMtZGVtby9zcmMvYXBwL3BhZ2UudHN4XCJdO1xuZXhwb3J0IHsgdHJlZSwgcGFnZXMgfTtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgR2xvYmFsRXJyb3IgfSBmcm9tIFwibmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL2Vycm9yLWJvdW5kYXJ5XCI7XG5jb25zdCBfX25leHRfYXBwX3JlcXVpcmVfXyA9IF9fd2VicGFja19yZXF1aXJlX19cbmNvbnN0IF9fbmV4dF9hcHBfbG9hZF9jaHVua19fID0gKCkgPT4gUHJvbWlzZS5yZXNvbHZlKClcbmV4cG9ydCBjb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvcGFnZVwiO1xuZXhwb3J0IGNvbnN0IF9fbmV4dF9hcHBfXyA9IHtcbiAgICByZXF1aXJlOiBfX25leHRfYXBwX3JlcXVpcmVfXyxcbiAgICBsb2FkQ2h1bms6IF9fbmV4dF9hcHBfbG9hZF9jaHVua19fXG59O1xuZXhwb3J0ICogZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvYXBwLXJlbmRlci9lbnRyeS1iYXNlXCI7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBQYWdlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9QQUdFLFxuICAgICAgICBwYWdlOiBcIi9wYWdlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9cIixcbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBhcmVuJ3QgdXNlZCBpbiBwcm9kdWN0aW9uLlxuICAgICAgICBidW5kbGVQYXRoOiBcIlwiLFxuICAgICAgICBmaWxlbmFtZTogXCJcIixcbiAgICAgICAgYXBwUGF0aHM6IFtdXG4gICAgfSxcbiAgICB1c2VybGFuZDoge1xuICAgICAgICBsb2FkZXJUcmVlOiB0cmVlXG4gICAgfVxufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1wYWdlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fpage&page=%2Fpage&appPaths=%2Fpage&pagePath=private-next-app-dir%2Fpage.tsx&appDir=%2FUsers%2Foblet%2FDocuments%2FGitHub%2Fautoui-react%2Fexamples%2Fbasic-demo%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Foblet%2FDocuments%2FGitHub%2Fautoui-react%2Fexamples%2Fbasic-demo&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Foblet%2FDocuments%2FGitHub%2Fautoui-react%2Fexamples%2Fbasic-demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fapp-router.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Foblet%2FDocuments%2FGitHub%2Fautoui-react%2Fexamples%2Fbasic-demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fclient-page.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Foblet%2FDocuments%2FGitHub%2Fautoui-react%2Fexamples%2Fbasic-demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Ferror-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Foblet%2FDocuments%2FGitHub%2Fautoui-react%2Fexamples%2Fbasic-demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Flayout-router.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Foblet%2FDocuments%2FGitHub%2Fautoui-react%2Fexamples%2Fbasic-demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fnot-found-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Foblet%2FDocuments%2FGitHub%2Fautoui-react%2Fexamples%2Fbasic-demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Frender-from-template-context.js%22%2C%22ids%22%3A%5B%5D%7D&server=true!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Foblet%2FDocuments%2FGitHub%2Fautoui-react%2Fexamples%2Fbasic-demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fapp-router.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Foblet%2FDocuments%2FGitHub%2Fautoui-react%2Fexamples%2Fbasic-demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fclient-page.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Foblet%2FDocuments%2FGitHub%2Fautoui-react%2Fexamples%2Fbasic-demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Ferror-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Foblet%2FDocuments%2FGitHub%2Fautoui-react%2Fexamples%2Fbasic-demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Flayout-router.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Foblet%2FDocuments%2FGitHub%2Fautoui-react%2Fexamples%2Fbasic-demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fnot-found-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Foblet%2FDocuments%2FGitHub%2Fautoui-react%2Fexamples%2Fbasic-demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Frender-from-template-context.js%22%2C%22ids%22%3A%5B%5D%7D&server=true! ***!
  \**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("Promise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/dist/client/components/app-router.js */ \"(ssr)/./node_modules/next/dist/client/components/app-router.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/dist/client/components/client-page.js */ \"(ssr)/./node_modules/next/dist/client/components/client-page.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/dist/client/components/error-boundary.js */ \"(ssr)/./node_modules/next/dist/client/components/error-boundary.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/dist/client/components/layout-router.js */ \"(ssr)/./node_modules/next/dist/client/components/layout-router.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/dist/client/components/not-found-boundary.js */ \"(ssr)/./node_modules/next/dist/client/components/not-found-boundary.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/dist/client/components/render-from-template-context.js */ \"(ssr)/./node_modules/next/dist/client/components/render-from-template-context.js\", 23));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWZsaWdodC1jbGllbnQtZW50cnktbG9hZGVyLmpzP21vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMiUyRlVzZXJzJTJGb2JsZXQlMkZEb2N1bWVudHMlMkZHaXRIdWIlMkZhdXRvdWktcmVhY3QlMkZleGFtcGxlcyUyRmJhc2ljLWRlbW8lMkZub2RlX21vZHVsZXMlMkZuZXh0JTJGZGlzdCUyRmNsaWVudCUyRmNvbXBvbmVudHMlMkZhcHAtcm91dGVyLmpzJTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJm1vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMiUyRlVzZXJzJTJGb2JsZXQlMkZEb2N1bWVudHMlMkZHaXRIdWIlMkZhdXRvdWktcmVhY3QlMkZleGFtcGxlcyUyRmJhc2ljLWRlbW8lMkZub2RlX21vZHVsZXMlMkZuZXh0JTJGZGlzdCUyRmNsaWVudCUyRmNvbXBvbmVudHMlMkZjbGllbnQtcGFnZS5qcyUyMiUyQyUyMmlkcyUyMiUzQSU1QiU1RCU3RCZtb2R1bGVzPSU3QiUyMnJlcXVlc3QlMjIlM0ElMjIlMkZVc2VycyUyRm9ibGV0JTJGRG9jdW1lbnRzJTJGR2l0SHViJTJGYXV0b3VpLXJlYWN0JTJGZXhhbXBsZXMlMkZiYXNpYy1kZW1vJTJGbm9kZV9tb2R1bGVzJTJGbmV4dCUyRmRpc3QlMkZjbGllbnQlMkZjb21wb25lbnRzJTJGZXJyb3ItYm91bmRhcnkuanMlMjIlMkMlMjJpZHMlMjIlM0ElNUIlNUQlN0QmbW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyJTJGVXNlcnMlMkZvYmxldCUyRkRvY3VtZW50cyUyRkdpdEh1YiUyRmF1dG91aS1yZWFjdCUyRmV4YW1wbGVzJTJGYmFzaWMtZGVtbyUyRm5vZGVfbW9kdWxlcyUyRm5leHQlMkZkaXN0JTJGY2xpZW50JTJGY29tcG9uZW50cyUyRmxheW91dC1yb3V0ZXIuanMlMjIlMkMlMjJpZHMlMjIlM0ElNUIlNUQlN0QmbW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyJTJGVXNlcnMlMkZvYmxldCUyRkRvY3VtZW50cyUyRkdpdEh1YiUyRmF1dG91aS1yZWFjdCUyRmV4YW1wbGVzJTJGYmFzaWMtZGVtbyUyRm5vZGVfbW9kdWxlcyUyRm5leHQlMkZkaXN0JTJGY2xpZW50JTJGY29tcG9uZW50cyUyRm5vdC1mb3VuZC1ib3VuZGFyeS5qcyUyMiUyQyUyMmlkcyUyMiUzQSU1QiU1RCU3RCZtb2R1bGVzPSU3QiUyMnJlcXVlc3QlMjIlM0ElMjIlMkZVc2VycyUyRm9ibGV0JTJGRG9jdW1lbnRzJTJGR2l0SHViJTJGYXV0b3VpLXJlYWN0JTJGZXhhbXBsZXMlMkZiYXNpYy1kZW1vJTJGbm9kZV9tb2R1bGVzJTJGbmV4dCUyRmRpc3QlMkZjbGllbnQlMkZjb21wb25lbnRzJTJGcmVuZGVyLWZyb20tdGVtcGxhdGUtY29udGV4dC5qcyUyMiUyQyUyMmlkcyUyMiUzQSU1QiU1RCU3RCZzZXJ2ZXI9dHJ1ZSEiLCJtYXBwaW5ncyI6IkFBQUEsa09BQTBKO0FBQzFKO0FBQ0Esb09BQTJKO0FBQzNKO0FBQ0EsME9BQThKO0FBQzlKO0FBQ0Esd09BQTZKO0FBQzdKO0FBQ0Esa1BBQWtLO0FBQ2xLO0FBQ0Esc1FBQTRLIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXV0b3VpLXJlYWN0LWV4YW1wbGUvPzE4YTMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCIvVXNlcnMvb2JsZXQvRG9jdW1lbnRzL0dpdEh1Yi9hdXRvdWktcmVhY3QvZXhhbXBsZXMvYmFzaWMtZGVtby9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL2FwcC1yb3V0ZXIuanNcIik7XG47XG5pbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIi9Vc2Vycy9vYmxldC9Eb2N1bWVudHMvR2l0SHViL2F1dG91aS1yZWFjdC9leGFtcGxlcy9iYXNpYy1kZW1vL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L2NvbXBvbmVudHMvY2xpZW50LXBhZ2UuanNcIik7XG47XG5pbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIi9Vc2Vycy9vYmxldC9Eb2N1bWVudHMvR2l0SHViL2F1dG91aS1yZWFjdC9leGFtcGxlcy9iYXNpYy1kZW1vL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L2NvbXBvbmVudHMvZXJyb3ItYm91bmRhcnkuanNcIik7XG47XG5pbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIi9Vc2Vycy9vYmxldC9Eb2N1bWVudHMvR2l0SHViL2F1dG91aS1yZWFjdC9leGFtcGxlcy9iYXNpYy1kZW1vL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L2NvbXBvbmVudHMvbGF5b3V0LXJvdXRlci5qc1wiKTtcbjtcbmltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiL1VzZXJzL29ibGV0L0RvY3VtZW50cy9HaXRIdWIvYXV0b3VpLXJlYWN0L2V4YW1wbGVzL2Jhc2ljLWRlbW8vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvY29tcG9uZW50cy9ub3QtZm91bmQtYm91bmRhcnkuanNcIik7XG47XG5pbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIi9Vc2Vycy9vYmxldC9Eb2N1bWVudHMvR2l0SHViL2F1dG91aS1yZWFjdC9leGFtcGxlcy9iYXNpYy1kZW1vL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L2NvbXBvbmVudHMvcmVuZGVyLWZyb20tdGVtcGxhdGUtY29udGV4dC5qc1wiKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Foblet%2FDocuments%2FGitHub%2Fautoui-react%2Fexamples%2Fbasic-demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fapp-router.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Foblet%2FDocuments%2FGitHub%2Fautoui-react%2Fexamples%2Fbasic-demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fclient-page.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Foblet%2FDocuments%2FGitHub%2Fautoui-react%2Fexamples%2Fbasic-demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Ferror-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Foblet%2FDocuments%2FGitHub%2Fautoui-react%2Fexamples%2Fbasic-demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Flayout-router.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Foblet%2FDocuments%2FGitHub%2Fautoui-react%2Fexamples%2Fbasic-demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fnot-found-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Foblet%2FDocuments%2FGitHub%2Fautoui-react%2Fexamples%2Fbasic-demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Frender-from-template-context.js%22%2C%22ids%22%3A%5B%5D%7D&server=true!\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Foblet%2FDocuments%2FGitHub%2Fautoui-react%2Fexamples%2Fbasic-demo%2Fnode_modules%2Fnext%2Ffont%2Fgoogle%2Ftarget.css%3F%7B%5C%22path%5C%22%3A%5C%22src%2Fapp%2Flayout.tsx%5C%22%2C%5C%22import%5C%22%3A%5C%22Inter%5C%22%2C%5C%22arguments%5C%22%3A%5B%7B%5C%22subsets%5C%22%3A%5B%5C%22latin%5C%22%5D%7D%5D%2C%5C%22variableName%5C%22%3A%5C%22inter%5C%22%7D%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Foblet%2FDocuments%2FGitHub%2Fautoui-react%2Fexamples%2Fbasic-demo%2Fsrc%2Fapp%2Fglobals.css%22%2C%22ids%22%3A%5B%5D%7D&server=true!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Foblet%2FDocuments%2FGitHub%2Fautoui-react%2Fexamples%2Fbasic-demo%2Fnode_modules%2Fnext%2Ffont%2Fgoogle%2Ftarget.css%3F%7B%5C%22path%5C%22%3A%5C%22src%2Fapp%2Flayout.tsx%5C%22%2C%5C%22import%5C%22%3A%5C%22Inter%5C%22%2C%5C%22arguments%5C%22%3A%5B%7B%5C%22subsets%5C%22%3A%5B%5C%22latin%5C%22%5D%7D%5D%2C%5C%22variableName%5C%22%3A%5C%22inter%5C%22%7D%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Foblet%2FDocuments%2FGitHub%2Fautoui-react%2Fexamples%2Fbasic-demo%2Fsrc%2Fapp%2Fglobals.css%22%2C%22ids%22%3A%5B%5D%7D&server=true! ***!

/***/ (() => {



/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Foblet%2FDocuments%2FGitHub%2Fautoui-react%2Fexamples%2Fbasic-demo%2Fsrc%2Fapp%2Fpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=true!":
/*!*******************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Foblet%2FDocuments%2FGitHub%2Fautoui-react%2Fexamples%2Fbasic-demo%2Fsrc%2Fapp%2Fpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=true! ***!
  \*******************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/app/page.tsx */ \"(ssr)/./src/app/page.tsx\"));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWZsaWdodC1jbGllbnQtZW50cnktbG9hZGVyLmpzP21vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMiUyRlVzZXJzJTJGb2JsZXQlMkZEb2N1bWVudHMlMkZHaXRIdWIlMkZhdXRvdWktcmVhY3QlMkZleGFtcGxlcyUyRmJhc2ljLWRlbW8lMkZzcmMlMkZhcHAlMkZwYWdlLnRzeCUyMiUyQyUyMmlkcyUyMiUzQSU1QiU1RCU3RCZzZXJ2ZXI9dHJ1ZSEiLCJtYXBwaW5ncyI6IkFBQUEsZ0pBQW9IIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXV0b3VpLXJlYWN0LWV4YW1wbGUvPzI4MjAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCIvVXNlcnMvb2JsZXQvRG9jdW1lbnRzL0dpdEh1Yi9hdXRvdWktcmVhY3QvZXhhbXBsZXMvYmFzaWMtZGVtby9zcmMvYXBwL3BhZ2UudHN4XCIpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Foblet%2FDocuments%2FGitHub%2Fautoui-react%2Fexamples%2Fbasic-demo%2Fsrc%2Fapp%2Fpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=true!\n");

/***/ }),

/***/ "(ssr)/./src/app/page.tsx":
/*!**************************!*\
  !*** ./src/app/page.tsx ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Home)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var autoui_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! autoui-react */ \"(ssr)/../../dist/index.mjs\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \n\n// Example schema definition\nconst exampleSchema = {\n    tasks: {\n        tableName: \"tasks\",\n        columns: {\n            id: {\n                type: \"uuid\",\n                primaryKey: true\n            },\n            title: {\n                type: \"text\",\n                notNull: true\n            },\n            description: {\n                type: \"text\"\n            },\n            status: {\n                type: \"text\",\n                notNull: true,\n                default: \"pending\"\n            },\n            priority: {\n                type: \"text\",\n                notNull: true,\n                default: \"medium\"\n            },\n            dueDate: {\n                type: \"date\"\n            },\n            createdAt: {\n                type: \"timestamp\",\n                notNull: true,\n                default: \"now()\"\n            },\n            updatedAt: {\n                type: \"timestamp\"\n            }\n        },\n        // Sample data for development\n        sampleData: [\n            {\n                id: \"1\",\n                title: \"Setup development environment\",\n                description: \"Install Node.js, TypeScript, and VS Code\",\n                status: \"completed\",\n                priority: \"high\",\n                dueDate: \"2023-12-31\",\n                createdAt: \"2023-12-01T10:00:00Z\",\n                updatedAt: \"2023-12-01T15:30:00Z\"\n            },\n            {\n                id: \"2\",\n                title: \"Create project structure\",\n                description: \"Set up initial files and directories\",\n                status: \"completed\",\n                priority: \"high\",\n                dueDate: \"2023-12-31\",\n                createdAt: \"2023-12-02T09:15:00Z\",\n                updatedAt: \"2023-12-02T11:45:00Z\"\n            },\n            {\n                id: \"3\",\n                title: \"Implement core features\",\n                description: \"Work on the main functionality\",\n                status: \"in_progress\",\n                priority: \"medium\",\n                dueDate: \"2024-01-15\",\n                createdAt: \"2023-12-05T08:30:00Z\",\n                updatedAt: \"2023-12-10T14:20:00Z\"\n            },\n            {\n                id: \"4\",\n                title: \"Write documentation\",\n                description: \"Create README and API docs\",\n                status: \"pending\",\n                priority: \"low\",\n                dueDate: \"2024-01-31\",\n                createdAt: \"2023-12-15T16:45:00Z\",\n                updatedAt: null\n            }\n        ]\n    },\n    users: {\n        tableName: \"users\",\n        columns: {\n            id: {\n                type: \"uuid\",\n                primaryKey: true\n            },\n            name: {\n                type: \"text\",\n                notNull: true\n            },\n            email: {\n                type: \"text\",\n                notNull: true,\n                unique: true\n            },\n            role: {\n                type: \"text\",\n                notNull: true,\n                default: \"user\"\n            },\n            createdAt: {\n                type: \"timestamp\",\n                notNull: true,\n                default: \"now()\"\n            }\n        },\n        // Sample data\n        sampleData: [\n            {\n                id: \"1\",\n                name: \"John Doe\",\n                email: \"john@example.com\",\n                role: \"admin\",\n                createdAt: \"2023-10-01T00:00:00Z\"\n            },\n            {\n                id: \"2\",\n                name: \"Jane Smith\",\n                email: \"jane@example.com\",\n                role: \"user\",\n                createdAt: \"2023-10-15T08:30:00Z\"\n            },\n            {\n                id: \"3\",\n                name: \"Bob Johnson\",\n                email: \"bob@example.com\",\n                role: \"user\",\n                createdAt: \"2023-11-05T14:45:00Z\"\n            }\n        ]\n    }\n};\nfunction Home() {\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"main\", {\n        className: \"container mx-auto p-4\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h1\", {\n                className: \"text-2xl font-bold mb-6\",\n                children: \"AutoUI React Example\"\n            }, void 0, false, {\n                fileName: \"/Users/oblet/Documents/GitHub/autoui-react/examples/basic-demo/src/app/page.tsx\",\n                lineNumber: 103,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"border rounded-lg p-4 bg-white dark:bg-gray-800 dark:border-gray-700 min-h-[500px]\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(autoui_react__WEBPACK_IMPORTED_MODULE_1__.AutoUI, {\n                    schema: exampleSchema,\n                    goal: \"Create a task management dashboard with list view and ability to view task details\",\n                    mockMode: true,\n                    debugMode: false,\n                    componentAdapter: \"shadcn\",\n                    userContext: {\n                        id: \"1\",\n                        name: \"John Doe\",\n                        role: \"admin\"\n                    },\n                    onEvent: ()=>{},\n                    eventHooks: {},\n                    systemEventHooks: {},\n                    databaseConfig: {},\n                    planningConfig: {}\n                }, void 0, false, {\n                    fileName: \"/Users/oblet/Documents/GitHub/autoui-react/examples/basic-demo/src/app/page.tsx\",\n                    lineNumber: 108,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"/Users/oblet/Documents/GitHub/autoui-react/examples/basic-demo/src/app/page.tsx\",\n                lineNumber: 107,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/oblet/Documents/GitHub/autoui-react/examples/basic-demo/src/app/page.tsx\",\n        lineNumber: 102,\n        columnNumber: 5\n    }, this);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./src/app/page.tsx\n");

/***/ }),

/***/ "(rsc)/./src/app/globals.css":
/*!*****************************!*\
  !*** ./src/app/globals.css ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"dfd9e87f9b1b\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL2dsb2JhbHMuY3NzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZSxjQUFjO0FBQzdCLElBQUksS0FBVSxFQUFFLEVBQXVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXV0b3VpLXJlYWN0LWV4YW1wbGUvLi9zcmMvYXBwL2dsb2JhbHMuY3NzP2UwZTIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCJkZmQ5ZTg3ZjliMWJcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/app/globals.css\n");

/***/ }),

/***/ "(rsc)/./src/app/layout.tsx":
/*!****************************!*\
  !*** ./src/app/layout.tsx ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ RootLayout),\n/* harmony export */   metadata: () => (/* binding */ metadata)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/rsc/react-jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_font_google_target_css_path_src_app_layout_tsx_import_Inter_arguments_subsets_latin_variableName_inter___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/font/google/target.css?{\"path\":\"src/app/layout.tsx\",\"import\":\"Inter\",\"arguments\":[{\"subsets\":[\"latin\"]}],\"variableName\":\"inter\"} */ \"(rsc)/./node_modules/next/font/google/target.css?{\\\"path\\\":\\\"src/app/layout.tsx\\\",\\\"import\\\":\\\"Inter\\\",\\\"arguments\\\":[{\\\"subsets\\\":[\\\"latin\\\"]}],\\\"variableName\\\":\\\"inter\\\"}\");\n/* harmony import */ var next_font_google_target_css_path_src_app_layout_tsx_import_Inter_arguments_subsets_latin_variableName_inter___WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_font_google_target_css_path_src_app_layout_tsx_import_Inter_arguments_subsets_latin_variableName_inter___WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _globals_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./globals.css */ \"(rsc)/./src/app/globals.css\");\n\n\n\nconst metadata = {\n    title: \"AutoUI React Example\",\n    description: \"Example of using AutoUI React to generate UIs with LLMs\"\n};\nfunction RootLayout({ children }) {\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"html\", {\n        lang: \"en\",\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"body\", {\n            className: (next_font_google_target_css_path_src_app_layout_tsx_import_Inter_arguments_subsets_latin_variableName_inter___WEBPACK_IMPORTED_MODULE_2___default().className),\n            children: children\n        }, void 0, false, {\n            fileName: \"/Users/oblet/Documents/GitHub/autoui-react/examples/basic-demo/src/app/layout.tsx\",\n            lineNumber: 19,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"/Users/oblet/Documents/GitHub/autoui-react/examples/basic-demo/src/app/layout.tsx\",\n        lineNumber: 18,\n        columnNumber: 5\n    }, this);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL2xheW91dC50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFJTUE7QUFGaUI7QUFJaEIsTUFBTUMsV0FBcUI7SUFDaENDLE9BQU87SUFDUEMsYUFBYTtBQUNmLEVBQUU7QUFFYSxTQUFTQyxXQUFXLEVBQ2pDQyxRQUFRLEVBR1Q7SUFDQyxxQkFDRSw4REFBQ0M7UUFBS0MsTUFBSztrQkFDVCw0RUFBQ0M7WUFBS0MsV0FBV1QsK0pBQWU7c0JBQUdLOzs7Ozs7Ozs7OztBQUd6QyIsInNvdXJjZXMiOlsid2VicGFjazovL2F1dG91aS1yZWFjdC1leGFtcGxlLy4vc3JjL2FwcC9sYXlvdXQudHN4PzU3YTkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBNZXRhZGF0YSB9IGZyb20gJ25leHQnO1xuaW1wb3J0IHsgSW50ZXIgfSBmcm9tICduZXh0L2ZvbnQvZ29vZ2xlJztcbmltcG9ydCAnLi9nbG9iYWxzLmNzcyc7XG5cbmNvbnN0IGludGVyID0gSW50ZXIoeyBzdWJzZXRzOiBbJ2xhdGluJ10gfSk7XG5cbmV4cG9ydCBjb25zdCBtZXRhZGF0YTogTWV0YWRhdGEgPSB7XG4gIHRpdGxlOiAnQXV0b1VJIFJlYWN0IEV4YW1wbGUnLFxuICBkZXNjcmlwdGlvbjogJ0V4YW1wbGUgb2YgdXNpbmcgQXV0b1VJIFJlYWN0IHRvIGdlbmVyYXRlIFVJcyB3aXRoIExMTXMnLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUm9vdExheW91dCh7XG4gIGNoaWxkcmVuLFxufToge1xuICBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlO1xufSkge1xuICByZXR1cm4gKFxuICAgIDxodG1sIGxhbmc9XCJlblwiPlxuICAgICAgPGJvZHkgY2xhc3NOYW1lPXtpbnRlci5jbGFzc05hbWV9PntjaGlsZHJlbn08L2JvZHk+XG4gICAgPC9odG1sPlxuICApO1xufSAiXSwibmFtZXMiOlsiaW50ZXIiLCJtZXRhZGF0YSIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJSb290TGF5b3V0IiwiY2hpbGRyZW4iLCJodG1sIiwibGFuZyIsImJvZHkiLCJjbGFzc05hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/app/layout.tsx\n");

/***/ }),

/***/ "(rsc)/./src/app/page.tsx":
/*!**************************!*\
  !*** ./src/app/page.tsx ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/build/webpack/loaders/next-flight-loader/module-proxy */ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-loader/module-proxy.js");

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/oblet/Documents/GitHub/autoui-react/examples/basic-demo/src/app/page.tsx#default`));


/***/ }),

/***/ "(ssr)/../../dist/index.mjs":
/*!****************************!*\
  !*** ../../dist/index.mjs ***!
  \****************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ActionRouter: () => (/* binding */ ActionRouter),\n/* harmony export */   ActionType: () => (/* binding */ ActionType),\n/* harmony export */   AutoUI: () => (/* binding */ AutoUI),\n/* harmony export */   DrizzleAdapter: () => (/* binding */ DrizzleAdapter),\n/* harmony export */   SystemEventType: () => (/* binding */ SystemEventType),\n/* harmony export */   createDefaultRouter: () => (/* binding */ createDefaultRouter),\n/* harmony export */   createEventHook: () => (/* binding */ createEventHook),\n/* harmony export */   createSchemaAdapter: () => (/* binding */ createSchemaAdapter),\n/* harmony export */   createSystemEvent: () => (/* binding */ createSystemEvent),\n/* harmony export */   generateComponent: () => (/* binding */ generateComponent),\n/* harmony export */   generateUIComponent: () => (/* binding */ generateUIComponent),\n/* harmony export */   generateUIDescription: () => (/* binding */ generateUIDescription),\n/* harmony export */   systemEvents: () => (/* binding */ systemEvents),\n/* harmony export */   uiEvent: () => (/* binding */ uiEvent),\n/* harmony export */   uiEventType: () => (/* binding */ uiEventType),\n/* harmony export */   uiSpecNode: () => (/* binding */ uiSpecNode),\n/* harmony export */   usePlanner: () => (/* binding */ usePlanner)\n/* harmony export */ });\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! clsx */ \"(ssr)/../../node_modules/clsx/dist/clsx.mjs\");\n/* harmony import */ var tailwind_merge__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tailwind-merge */ \"(ssr)/../../node_modules/tailwind-merge/dist/bundle-mjs.mjs\");\n/* harmony import */ var _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @radix-ui/react-slot */ \"(ssr)/../../node_modules/@radix-ui/react-slot/dist/index.mjs\");\n/* harmony import */ var class_variance_authority__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! class-variance-authority */ \"(ssr)/../../node_modules/class-variance-authority/dist/index.mjs\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! zod */ \"(ssr)/../../node_modules/zod/lib/index.mjs\");\n/* harmony import */ var _ai_sdk_openai__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ai-sdk/openai */ \"(ssr)/../../node_modules/@ai-sdk/openai/dist/index.mjs\");\n/* harmony import */ var ai__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ai */ \"(ssr)/../../node_modules/ai/dist/index.mjs\");\n\n\n\n\n\n\n\n\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __esm = (fn, res)=>function __init() {\n        return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;\n    };\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nfunction cn(...inputs) {\n    return (0,tailwind_merge__WEBPACK_IMPORTED_MODULE_4__.twMerge)((0,clsx__WEBPACK_IMPORTED_MODULE_0__.clsx)(inputs));\n}\nvar init_utils = __esm({\n    \"src/lib/utils.ts\" () {}\n});\n// components/ui/button.tsx\nvar button_exports = {};\n__export(button_exports, {\n    Button: ()=>Button2,\n    buttonVariants: ()=>buttonVariants\n});\nfunction Button2({ className, variant, size, asChild = false, ...props }) {\n    const Comp = asChild ? _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_5__.Slot : \"button\";\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Comp, {\n        \"data-slot\": \"button\",\n        className: cn(buttonVariants({\n            variant,\n            size,\n            className\n        })),\n        ...props\n    });\n}\nvar buttonVariants;\nvar init_button = __esm({\n    \"components/ui/button.tsx\" () {\n        init_utils();\n        buttonVariants = (0,class_variance_authority__WEBPACK_IMPORTED_MODULE_1__.cva)(\"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\", {\n            variants: {\n                variant: {\n                    default: \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n                    destructive: \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n                    outline: \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n                    secondary: \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n                    ghost: \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n                    link: \"text-primary underline-offset-4 hover:underline\"\n                },\n                size: {\n                    default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n                    sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n                    lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n                    icon: \"size-9\"\n                }\n            },\n            defaultVariants: {\n                variant: \"default\",\n                size: \"default\"\n            }\n        });\n    }\n});\n// src/core/reducer.ts\nfunction cloneNode(node) {\n    return {\n        ...node,\n        props: node.props ? {\n            ...node.props\n        } : void 0,\n        bindings: node.bindings ? {\n            ...node.bindings\n        } : void 0,\n        events: node.events ? {\n            ...node.events\n        } : void 0,\n        children: node.children?.map((child)=>cloneNode(child))\n    };\n}\nfunction findNodeById(tree, nodeId) {\n    if (!tree) return void 0;\n    if (tree.id === nodeId) return tree;\n    if (tree.children) {\n        for (const child of tree.children){\n            const found = findNodeById(child, nodeId);\n            if (found) return found;\n        }\n    }\n    return void 0;\n}\nfunction updateNodeById(tree, nodeId, updater) {\n    const result = cloneNode(tree);\n    function findPath(node, id, currentPath = []) {\n        const newPath = [\n            ...currentPath,\n            node\n        ];\n        if (node.id === id) {\n            return newPath;\n        }\n        if (node.children) {\n            for (const child of node.children){\n                const path2 = findPath(child, id, newPath);\n                if (path2) return path2;\n            }\n        }\n        return null;\n    }\n    const path = findPath(result, nodeId);\n    if (!path) return result;\n    const nodeToUpdate = path[path.length - 1];\n    const updatedNode = updater(nodeToUpdate);\n    if (path.length === 1) {\n        return updatedNode;\n    }\n    const parent = path[path.length - 2];\n    const updatedParent = {\n        ...parent,\n        children: parent.children?.map((child)=>child.id === nodeId ? updatedNode : child)\n    };\n    if (path.length === 2) {\n        return updatedParent;\n    }\n    return updateNodeById(result, parent.id, ()=>updatedParent);\n}\nfunction replaceNodeById(tree, nodeId, newNode) {\n    return updateNodeById(tree, nodeId, ()=>newNode);\n}\nfunction addChildNode(tree, parentId, newChild, index) {\n    return updateNodeById(tree, parentId, (node)=>{\n        const children = node.children ? [\n            ...node.children\n        ] : [];\n        if (index !== void 0 && index >= 0 && index <= children.length) {\n            children.splice(index, 0, newChild);\n        } else {\n            children.push(newChild);\n        }\n        return {\n            ...node,\n            children\n        };\n    });\n}\nfunction removeNodeById(tree, nodeId) {\n    function findParent(node, id) {\n        if (node.children) {\n            if (node.children.some((child)=>child.id === id)) {\n                return node;\n            }\n            for (const child of node.children){\n                const parent2 = findParent(child, id);\n                if (parent2) return parent2;\n            }\n        }\n        return null;\n    }\n    const result = cloneNode(tree);\n    if (result.id === nodeId) {\n        throw new Error(\"Cannot remove root node\");\n    }\n    const parent = findParent(result, nodeId);\n    if (!parent) return result;\n    return updateNodeById(result, parent.id, (node)=>({\n            ...node,\n            children: node.children?.filter((child)=>child.id !== nodeId)\n        }));\n}\nfunction uiReducer(state, action) {\n    switch(action.type){\n        case \"UI_EVENT\":\n            {\n                return {\n                    ...state,\n                    loading: true,\n                    history: [\n                        ...state.history,\n                        action.event\n                    ]\n                };\n            }\n        case \"AI_RESPONSE\":\n            {\n                return {\n                    ...state,\n                    layout: action.node,\n                    loading: false,\n                    error: void 0\n                };\n            }\n        case \"PARTIAL_UPDATE\":\n            {\n                if (!state.layout) {\n                    return {\n                        ...state,\n                        layout: action.node,\n                        loading: false,\n                        error: void 0\n                    };\n                }\n                if (action.nodeId === \"root\" || action.nodeId === state.layout.id) {\n                    return {\n                        ...state,\n                        layout: action.node,\n                        loading: false,\n                        error: void 0\n                    };\n                }\n                return {\n                    ...state,\n                    layout: replaceNodeById(state.layout, action.nodeId, action.node),\n                    loading: false,\n                    error: void 0\n                };\n            }\n        case \"ADD_NODE\":\n            {\n                if (!state.layout) {\n                    return state;\n                }\n                return {\n                    ...state,\n                    layout: addChildNode(state.layout, action.parentId, action.node, action.index),\n                    loading: false,\n                    error: void 0\n                };\n            }\n        case \"REMOVE_NODE\":\n            {\n                if (!state.layout) {\n                    return state;\n                }\n                return {\n                    ...state,\n                    layout: removeNodeById(state.layout, action.nodeId),\n                    loading: false,\n                    error: void 0\n                };\n            }\n        case \"LOADING\":\n            {\n                return {\n                    ...state,\n                    loading: action.isLoading\n                };\n            }\n        case \"ERROR\":\n            {\n                return {\n                    ...state,\n                    error: action.message,\n                    loading: false\n                };\n            }\n        default:\n            return state;\n    }\n}\nvar initialState = {\n    loading: true,\n    history: []\n};\n// src/core/action-router.ts\nvar ActionType = /* @__PURE__ */ ((ActionType2)=>{\n    ActionType2[\"FULL_REFRESH\"] = \"FULL_REFRESH\";\n    ActionType2[\"UPDATE_NODE\"] = \"UPDATE_NODE\";\n    ActionType2[\"ADD_DROPDOWN\"] = \"ADD_DROPDOWN\";\n    ActionType2[\"SHOW_DETAIL\"] = \"SHOW_DETAIL\";\n    ActionType2[\"HIDE_DETAIL\"] = \"HIDE_DETAIL\";\n    ActionType2[\"TOGGLE_STATE\"] = \"TOGGLE_STATE\";\n    ActionType2[\"UPDATE_FORM\"] = \"UPDATE_FORM\";\n    ActionType2[\"NAVIGATE\"] = \"NAVIGATE\";\n    return ActionType2;\n})(ActionType || {});\nvar ActionRouter = class {\n    constructor(){\n        this.routes = {};\n    }\n    /**\n   * Register a new action route\n   * @param eventType - UI event type to route\n   * @param config - Route configuration\n   */ registerRoute(eventType, config) {\n        if (!this.routes[eventType]) {\n            this.routes[eventType] = [];\n        }\n        this.routes[eventType].push(config);\n    }\n    /**\n   * Find the appropriate route for an event\n   * @param event - UI event\n   * @param layout - Current UI layout\n   * @param dataContext - Current data context\n   * @returns Route resolution or null if no match\n   */ resolveRoute(event, schema, layout, dataContext, goal, userContext) {\n        const routes = this.routes[event.type] || [];\n        if (routes.length === 0) {\n            return {\n                actionType: \"FULL_REFRESH\" /* FULL_REFRESH */ ,\n                targetNodeId: layout?.id || \"root\",\n                plannerInput: {\n                    schema,\n                    goal,\n                    history: [\n                        event\n                    ],\n                    userContext\n                },\n                prompt: `Generate a new UI for the goal: \"${goal}\". The user just triggered: ${event.type} on node ${event.nodeId}`\n            };\n        }\n        const sourceNode = layout ? findNodeById(layout, event.nodeId) : void 0;\n        const nodeConfig = sourceNode?.events?.[event.type];\n        let matchingRoute;\n        if (nodeConfig) {\n            matchingRoute = routes.find((route)=>route.actionType.toString() === nodeConfig.action);\n        }\n        if (!matchingRoute) {\n            matchingRoute = routes[0];\n        }\n        const targetNodeId = nodeConfig?.target || matchingRoute.targetNodeId || event.nodeId;\n        const additionalContext = {};\n        if (matchingRoute.contextKeys) {\n            matchingRoute.contextKeys.forEach((key)=>{\n                additionalContext[key] = dataContext[key];\n            });\n        }\n        if (sourceNode) {\n            additionalContext.sourceNode = sourceNode;\n        }\n        if (layout) {\n            const targetNode = findNodeById(layout, targetNodeId);\n            if (targetNode) {\n                additionalContext.targetNode = targetNode;\n            }\n        }\n        if (event.payload) {\n            additionalContext.eventPayload = event.payload;\n        }\n        if (nodeConfig?.payload) {\n            Object.entries(nodeConfig.payload).forEach(([key, value])=>{\n                additionalContext[key] = value;\n            });\n        }\n        const plannerInput2 = {\n            schema,\n            goal,\n            history: [\n                event\n            ],\n            userContext: {\n                ...userContext,\n                ...additionalContext\n            }\n        };\n        const prompt = this.processTemplate(matchingRoute.promptTemplate, {\n            goal,\n            eventType: event.type,\n            nodeId: event.nodeId,\n            targetNodeId,\n            actionType: matchingRoute.actionType,\n            ...additionalContext\n        });\n        return {\n            actionType: matchingRoute.actionType,\n            targetNodeId,\n            plannerInput: plannerInput2,\n            prompt\n        };\n    }\n    /**\n   * Process a prompt template with variables\n   * @param template - Template string with ${var} placeholders\n   * @param values - Values to substitute\n   * @returns Processed string\n   */ processTemplate(template, values) {\n        return template.replace(/\\${(\\w+)}/g, (_, key)=>{\n            return values[key] !== void 0 ? String(values[key]) : `\\${${key}}`;\n        });\n    }\n};\nfunction createDefaultRouter() {\n    const router = new ActionRouter();\n    router.registerRoute(\"CLICK\", {\n        actionType: \"FULL_REFRESH\" /* FULL_REFRESH */ ,\n        targetNodeId: \"root\",\n        promptTemplate: 'Generate a new UI for the goal: \"${goal}\". The user just clicked on node ${nodeId}'\n    });\n    router.registerRoute(\"CLICK\", {\n        actionType: \"SHOW_DETAIL\" /* SHOW_DETAIL */ ,\n        targetNodeId: \"${targetNodeId}\",\n        promptTemplate: \"Update the UI to show details for the selected item. Current node: ${nodeId}, Target node: ${targetNodeId}\",\n        contextKeys: [\n            \"selected\"\n        ]\n    });\n    router.registerRoute(\"CLICK\", {\n        actionType: \"NAVIGATE\" /* NAVIGATE */ ,\n        targetNodeId: \"root\",\n        promptTemplate: \"Navigate to a new view based on the user clicking ${nodeId}. Current goal: ${goal}\"\n    });\n    router.registerRoute(\"CLICK\", {\n        actionType: \"ADD_DROPDOWN\" /* ADD_DROPDOWN */ ,\n        targetNodeId: \"${targetNodeId}\",\n        promptTemplate: \"Add a dropdown menu to node ${targetNodeId} with options relevant to the clicked element ${nodeId}\"\n    });\n    router.registerRoute(\"CLICK\", {\n        actionType: \"TOGGLE_STATE\" /* TOGGLE_STATE */ ,\n        targetNodeId: \"${nodeId}\",\n        promptTemplate: \"Toggle the state of node ${nodeId} (e.g., expanded/collapsed, selected/unselected)\"\n    });\n    router.registerRoute(\"CHANGE\", {\n        actionType: \"UPDATE_FORM\" /* UPDATE_FORM */ ,\n        targetNodeId: \"${targetNodeId}\",\n        promptTemplate: \"Update the form based on the user changing the value of ${nodeId}\"\n    });\n    return router;\n}\nvar uiEventType = zod__WEBPACK_IMPORTED_MODULE_6__.z.enum([\n    \"CLICK\",\n    \"CHANGE\",\n    \"SUBMIT\",\n    \"MOUSEOVER\",\n    \"MOUSEOUT\",\n    \"FOCUS\",\n    \"BLUR\"\n]);\nvar uiEvent = zod__WEBPACK_IMPORTED_MODULE_6__.z.object({\n    type: uiEventType,\n    nodeId: zod__WEBPACK_IMPORTED_MODULE_6__.z.string(),\n    timestamp: zod__WEBPACK_IMPORTED_MODULE_6__.z.number().nullable(),\n    payload: zod__WEBPACK_IMPORTED_MODULE_6__.z.record(zod__WEBPACK_IMPORTED_MODULE_6__.z.unknown()).nullable()\n});\nzod__WEBPACK_IMPORTED_MODULE_6__.z.enum([\n    \"AI_RESPONSE\",\n    \"ERROR\"\n]);\nvar zUnknownObject = zod__WEBPACK_IMPORTED_MODULE_6__.z.object({}).catchall(zod__WEBPACK_IMPORTED_MODULE_6__.z.string());\nvar baseUiSpecNode = zod__WEBPACK_IMPORTED_MODULE_6__.z.object({\n    id: zod__WEBPACK_IMPORTED_MODULE_6__.z.string(),\n    node_type: zod__WEBPACK_IMPORTED_MODULE_6__.z.string(),\n    // e.g., \"ListView\", \"Button\", \"TextField\"\n    props: zUnknownObject.nullable(),\n    bindings: zUnknownObject.nullable(),\n    // Data bindings\n    events: zod__WEBPACK_IMPORTED_MODULE_6__.z.record(zod__WEBPACK_IMPORTED_MODULE_6__.z.string(), zod__WEBPACK_IMPORTED_MODULE_6__.z.object({\n        action: zod__WEBPACK_IMPORTED_MODULE_6__.z.string(),\n        target: zod__WEBPACK_IMPORTED_MODULE_6__.z.string(),\n        payload: zUnknownObject.nullable()\n    })).nullable(),\n    children: zod__WEBPACK_IMPORTED_MODULE_6__.z.array(zod__WEBPACK_IMPORTED_MODULE_6__.z.any()).nullable()\n});\nvar nodeLevel0 = baseUiSpecNode.omit({\n    children: true\n});\nvar nodeLevel1 = baseUiSpecNode.extend({\n    children: zod__WEBPACK_IMPORTED_MODULE_6__.z.array(nodeLevel0).nullable()\n});\nvar nodeLevel2 = baseUiSpecNode.extend({\n    children: zod__WEBPACK_IMPORTED_MODULE_6__.z.array(nodeLevel1).nullable()\n});\nvar nodeLevel3 = baseUiSpecNode.extend({\n    children: zod__WEBPACK_IMPORTED_MODULE_6__.z.array(nodeLevel2).nullable()\n});\nvar uiSpecNode = nodeLevel3;\nzod__WEBPACK_IMPORTED_MODULE_6__.z.discriminatedUnion(\"type\", [\n    zod__WEBPACK_IMPORTED_MODULE_6__.z.object({\n        type: zod__WEBPACK_IMPORTED_MODULE_6__.z.literal(\"UI_EVENT\"),\n        event: uiEvent\n    }),\n    zod__WEBPACK_IMPORTED_MODULE_6__.z.object({\n        type: zod__WEBPACK_IMPORTED_MODULE_6__.z.literal(\"AI_RESPONSE\"),\n        node: uiSpecNode\n    }),\n    zod__WEBPACK_IMPORTED_MODULE_6__.z.object({\n        type: zod__WEBPACK_IMPORTED_MODULE_6__.z.literal(\"PARTIAL_UPDATE\"),\n        nodeId: zod__WEBPACK_IMPORTED_MODULE_6__.z.string(),\n        node: uiSpecNode\n    }),\n    zod__WEBPACK_IMPORTED_MODULE_6__.z.object({\n        type: zod__WEBPACK_IMPORTED_MODULE_6__.z.literal(\"ADD_NODE\"),\n        parentId: zod__WEBPACK_IMPORTED_MODULE_6__.z.string(),\n        node: uiSpecNode,\n        index: zod__WEBPACK_IMPORTED_MODULE_6__.z.number().nullable()\n    }),\n    zod__WEBPACK_IMPORTED_MODULE_6__.z.object({\n        type: zod__WEBPACK_IMPORTED_MODULE_6__.z.literal(\"REMOVE_NODE\"),\n        nodeId: zod__WEBPACK_IMPORTED_MODULE_6__.z.string()\n    }),\n    zod__WEBPACK_IMPORTED_MODULE_6__.z.object({\n        type: zod__WEBPACK_IMPORTED_MODULE_6__.z.literal(\"ERROR\"),\n        message: zod__WEBPACK_IMPORTED_MODULE_6__.z.string()\n    }),\n    zod__WEBPACK_IMPORTED_MODULE_6__.z.object({\n        type: zod__WEBPACK_IMPORTED_MODULE_6__.z.literal(\"LOADING\"),\n        isLoading: zod__WEBPACK_IMPORTED_MODULE_6__.z.boolean()\n    })\n]);\nzod__WEBPACK_IMPORTED_MODULE_6__.z.object({\n    layout: uiSpecNode.nullable(),\n    loading: zod__WEBPACK_IMPORTED_MODULE_6__.z.boolean(),\n    history: zod__WEBPACK_IMPORTED_MODULE_6__.z.array(uiEvent),\n    error: zod__WEBPACK_IMPORTED_MODULE_6__.z.string().nullable()\n});\nzod__WEBPACK_IMPORTED_MODULE_6__.z.object({\n    schema: zod__WEBPACK_IMPORTED_MODULE_6__.z.record(zod__WEBPACK_IMPORTED_MODULE_6__.z.unknown()),\n    goal: zod__WEBPACK_IMPORTED_MODULE_6__.z.string(),\n    history: zod__WEBPACK_IMPORTED_MODULE_6__.z.array(uiEvent).nullable(),\n    userContext: zod__WEBPACK_IMPORTED_MODULE_6__.z.record(zod__WEBPACK_IMPORTED_MODULE_6__.z.unknown()).nullable()\n});\n// src/core/system-events.ts\nvar SystemEventType = /* @__PURE__ */ ((SystemEventType2)=>{\n    SystemEventType2[\"PLAN_START\"] = \"PLAN_START\";\n    SystemEventType2[\"PLAN_PROMPT_CREATED\"] = \"PLAN_PROMPT_CREATED\";\n    SystemEventType2[\"PLAN_RESPONSE_CHUNK\"] = \"PLAN_RESPONSE_CHUNK\";\n    SystemEventType2[\"PLAN_COMPLETE\"] = \"PLAN_COMPLETE\";\n    SystemEventType2[\"PLAN_ERROR\"] = \"PLAN_ERROR\";\n    SystemEventType2[\"BINDING_RESOLUTION_START\"] = \"BINDING_RESOLUTION_START\";\n    SystemEventType2[\"BINDING_RESOLUTION_COMPLETE\"] = \"BINDING_RESOLUTION_COMPLETE\";\n    SystemEventType2[\"DATA_FETCH_START\"] = \"DATA_FETCH_START\";\n    SystemEventType2[\"DATA_FETCH_COMPLETE\"] = \"DATA_FETCH_COMPLETE\";\n    SystemEventType2[\"RENDER_START\"] = \"RENDER_START\";\n    SystemEventType2[\"RENDER_COMPLETE\"] = \"RENDER_COMPLETE\";\n    SystemEventType2[\"PREFETCH_START\"] = \"PREFETCH_START\";\n    SystemEventType2[\"PREFETCH_COMPLETE\"] = \"PREFETCH_COMPLETE\";\n    return SystemEventType2;\n})(SystemEventType || {});\nvar SystemEventManager = class {\n    constructor(){\n        this.listeners = {};\n    }\n    /**\n   * Register a listener for a specific system event type\n   * \n   * @param eventType - The system event type to listen for\n   * @param listener - The listener function\n   * @returns Function to unregister the listener\n   */ on(eventType, listener) {\n        if (!this.listeners[eventType]) {\n            this.listeners[eventType] = [];\n        }\n        this.listeners[eventType]?.push(listener);\n        return ()=>{\n            if (this.listeners[eventType]) {\n                this.listeners[eventType] = this.listeners[eventType]?.filter((l)=>l !== listener);\n            }\n        };\n    }\n    /**\n   * Emit a system event to all registered listeners\n   * \n   * @param event - The system event to emit\n   */ async emit(event) {\n        const listeners = this.listeners[event.type] || [];\n        for (const listener of listeners){\n            await listener(event);\n        }\n    }\n};\nvar systemEvents = new SystemEventManager();\nfunction createSystemEvent(type, data) {\n    return {\n        type,\n        timestamp: Date.now(),\n        ...data\n    };\n}\n// src/env.ts\nfunction getEnvVar(name, defaultValue) {\n    if (false) {}\n    if (false) {}\n    if (typeof process !== \"undefined\" && process.env) {\n        const value = process.env[name];\n        if (value) return value;\n        const nextPublicName = `NEXT_PUBLIC_${name}`;\n        if (process.env[nextPublicName]) {\n            return process.env[nextPublicName];\n        }\n    }\n    return defaultValue;\n}\nvar env = {\n    MOCK_PLANNER: getEnvVar(\"VITE_MOCK_PLANNER\", \"1\"),\n    NODE_ENV: getEnvVar(\"MODE\", \"development\"),\n    OPENAI_API_KEY: getEnvVar(\"VITE_OPENAI_API_KEY\", null)\n};\n// src/core/planner.ts\nvar strictOpenAI = (0,_ai_sdk_openai__WEBPACK_IMPORTED_MODULE_7__.createOpenAI)({\n    compatibility: \"strict\"\n});\nfunction buildPrompt(input, targetNodeId, customPrompt) {\n    const { schema, goal, history, userContext } = input;\n    const schemaInfo = Object.entries(schema).map(([tableName, tableSchema])=>{\n        return `Table: ${tableName}\nSchema: ${JSON.stringify(tableSchema)}`;\n    }).join(\"\\n\\n\");\n    const recentEvents = history?.slice(-5).map((event)=>`Event: ${event.type} on node ${event.nodeId}${event.payload ? ` with payload ${JSON.stringify(event.payload)}` : \"\"}`).join(\"\\n\") || \"No recent events\";\n    const userContextSection = userContext ? `\n\nUser Context:\n${JSON.stringify(userContext)}` : \"\";\n    if (customPrompt) {\n        return customPrompt;\n    }\n    return `\nYou are an expert UI generator. \nCreate a user interface that achieves the following goal: \"${goal}\"\n\nAvailable data schema:\n${schemaInfo}\n\nRecent user interactions:\n${recentEvents}${userContextSection}\n\nGenerate a complete UI specification in JSON format that matches the following TypeScript type:\ntype UISpecNode = {\n  id: string;\n  node_type: string;\n  props?: Record<string, unknown>;\n  bindings?: Record<string, unknown>;\n  events?: Record<string, { action: string; target: string; payload?: Record<string, unknown>; }};\n  children?: UISpecNode[];\n};\n\nUI Guidance:\n1. Create a focused interface that directly addresses the goal\n2. Use appropriate UI patterns (lists, forms, details, etc.)\n3. Include navigation between related views when needed\n4. Keep the interface simple and intuitive\n5. Bind to schema data where appropriate\n6. Provide event handlers for user interactions - make sure to always include both action and target properties\n\nRespond ONLY with the JSON UI specification and no other text.\n  `;\n}\nfunction mockPlanner(input, targetNodeId, customPrompt) {\n    const taskData = input.schema.tasks ? input.schema.tasks.sampleData || [] : [\n        {\n            id: \"1\",\n            title: \"Example Task 1\",\n            description: \"This is a sample task\",\n            status: \"pending\",\n            priority: \"medium\"\n        },\n        {\n            id: \"2\",\n            title: \"Example Task 2\",\n            description: \"Another sample task\",\n            status: \"completed\",\n            priority: \"high\"\n        }\n    ];\n    const mockNode = {\n        id: targetNodeId || \"root\",\n        node_type: \"Container\",\n        props: {\n            className: \"p-4 space-y-6\"\n        },\n        children: [\n            {\n                id: \"header-1\",\n                node_type: \"Header\",\n                props: {\n                    title: \"Task Management Dashboard\",\n                    className: \"mb-4\"\n                }\n            },\n            {\n                id: \"main-content\",\n                node_type: \"Container\",\n                props: {\n                    className: \"grid grid-cols-1 gap-6 md:grid-cols-3\"\n                },\n                children: [\n                    {\n                        id: \"tasks-container\",\n                        node_type: \"Container\",\n                        props: {\n                            className: \"md:col-span-2\"\n                        },\n                        children: [\n                            {\n                                id: \"list-heading\",\n                                node_type: \"Container\",\n                                props: {\n                                    className: \"flex justify-between items-center mb-4\"\n                                },\n                                children: [\n                                    {\n                                        id: \"list-title\",\n                                        node_type: \"Header\",\n                                        props: {\n                                            title: \"Tasks\",\n                                            className: \"border-none p-0 m-0\"\n                                        }\n                                    },\n                                    {\n                                        id: \"add-task-button\",\n                                        node_type: \"Button\",\n                                        props: {\n                                            label: \"Add Task\",\n                                            variant: \"default\"\n                                        },\n                                        events: {\n                                            onClick: {\n                                                action: \"ADD_TASK\",\n                                                target: \"tasks-container\",\n                                                payload: {}\n                                            }\n                                        }\n                                    }\n                                ]\n                            },\n                            {\n                                id: \"task-list\",\n                                node_type: \"ListView\",\n                                props: {\n                                    selectable: true\n                                },\n                                bindings: {\n                                    items: taskData,\n                                    fields: [\n                                        {\n                                            key: \"id\",\n                                            label: \"ID\"\n                                        },\n                                        {\n                                            key: \"title\",\n                                            label: \"Title\"\n                                        },\n                                        {\n                                            key: \"status\",\n                                            label: \"Status\"\n                                        },\n                                        {\n                                            key: \"priority\",\n                                            label: \"Priority\"\n                                        }\n                                    ]\n                                },\n                                events: {\n                                    onSelect: {\n                                        action: \"SELECT_TASK\",\n                                        target: \"task-detail\",\n                                        payload: {\n                                            source: \"task-list\"\n                                        }\n                                    }\n                                }\n                            }\n                        ]\n                    },\n                    {\n                        id: \"task-detail\",\n                        node_type: \"Detail\",\n                        props: {\n                            title: \"Task Details\",\n                            visible: true\n                        },\n                        bindings: {\n                            data: taskData[0],\n                            fields: [\n                                {\n                                    key: \"title\",\n                                    label: \"Title\",\n                                    type: \"heading\"\n                                },\n                                {\n                                    key: \"description\",\n                                    label: \"Description\",\n                                    type: \"content\"\n                                },\n                                {\n                                    key: \"status\",\n                                    label: \"Status\"\n                                },\n                                {\n                                    key: \"priority\",\n                                    label: \"Priority\"\n                                },\n                                {\n                                    key: \"dueDate\",\n                                    label: \"Due Date\"\n                                }\n                            ]\n                        },\n                        events: {\n                            onBack: {\n                                action: \"CLOSE_DETAIL\",\n                                target: \"task-detail\",\n                                payload: {}\n                            }\n                        }\n                    }\n                ]\n            }\n        ]\n    };\n    return mockNode;\n}\nasync function callPlannerLLM(input, routeResolution) {\n    console.log(\"\\uD83D\\uDE80 callPlannerLLM called with input:\", input);\n    console.log(\"\\uD83D\\uDE80 Environment variables:\", {\n        MOCK_PLANNER: env.MOCK_PLANNER,\n        OPENAI_API_KEY: env.OPENAI_API_KEY ? \"Available\" : \"Not available\"\n    });\n    await systemEvents.emit(createSystemEvent(\"PLAN_START\" /* PLAN_START */ , {\n        plannerInput: input\n    }));\n    if (env.MOCK_PLANNER === \"1\" || !env.OPENAI_API_KEY) {\n        console.warn(\"Using mock planner because MOCK_PLANNER is enabled or OPENAI_API_KEY is not available\");\n        return mockPlanner(input);\n    }\n    const startTime = Date.now();\n    const prompt = routeResolution?.prompt || buildPrompt(input);\n    await systemEvents.emit(createSystemEvent(\"PLAN_PROMPT_CREATED\" /* PLAN_PROMPT_CREATED */ , {\n        prompt\n    }));\n    try {\n        const { object: uiSpec } = await (0,ai__WEBPACK_IMPORTED_MODULE_8__.generateObject)({\n            model: strictOpenAI(\"gpt-4o\", {\n                structuredOutputs: true\n            }),\n            schema: uiSpecNode,\n            messages: [\n                {\n                    role: \"user\",\n                    content: prompt\n                }\n            ],\n            temperature: 0.2,\n            maxTokens: 4e3\n        });\n        await systemEvents.emit(createSystemEvent(\"PLAN_COMPLETE\" /* PLAN_COMPLETE */ , {\n            layout: uiSpec,\n            executionTimeMs: Date.now() - startTime\n        }));\n        return uiSpec;\n    } catch (error) {\n        console.error(\"Error calling LLM planner:\", error);\n        await systemEvents.emit(createSystemEvent(\"PLAN_ERROR\" /* PLAN_ERROR */ , {\n            error: error instanceof Error ? error : new Error(String(error))\n        }));\n        throw error;\n    }\n}\nasync function processEvent(event, router, schema, layout, dataContext, goal, userContext) {\n    const routeResolution = router.resolveRoute(event, schema, layout, dataContext, goal, userContext);\n    if (!routeResolution) {\n        throw new Error(\"No route found for event\");\n    }\n    return callPlannerLLM(routeResolution.plannerInput, routeResolution);\n}\n// src/core/state.ts\nvar useChat = (config)=>{\n    const [content, setContent] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(\"{}\");\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const [chatError, setError] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    const append = async (message)=>{\n        try {\n            setIsLoading(true);\n            setContent(\"{}\");\n        } catch (err) {\n            setError(err instanceof Error ? err : new Error(String(err)));\n        } finally{\n            setIsLoading(false);\n        }\n    };\n    return {\n        append,\n        data: {\n            content\n        },\n        isLoading,\n        error: chatError,\n        stop: ()=>{}\n    };\n};\nfunction useUIStateEngine({ schema, goal, userContext, mockMode = false, planningConfig = {}, router = createDefaultRouter(), dataContext = {}, enablePartialUpdates = false }) {\n    const [state, dispatch] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useReducer)(uiReducer, initialState);\n    const { append, data, isLoading, error, stop } = useChat();\n    const handleEvent = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event)=>{\n        dispatch({\n            type: \"UI_EVENT\",\n            event\n        });\n        stop();\n        if (enablePartialUpdates) {\n            const route = router.resolveRoute(event, schema, state.layout, dataContext, goal, userContext);\n            if (route) {\n                console.log(\"Resolved route:\", route);\n                systemEvents.emit(createSystemEvent(\"PLAN_START\" /* PLAN_START */ , {\n                    plannerInput: route.plannerInput\n                }));\n                if (mockMode) {\n                    const node = mockPlanner(route.plannerInput, route.targetNodeId, route.prompt);\n                    switch(route.actionType){\n                        case \"FULL_REFRESH\" /* FULL_REFRESH */ :\n                            dispatch({\n                                type: \"AI_RESPONSE\",\n                                node\n                            });\n                            break;\n                        case \"UPDATE_NODE\" /* UPDATE_NODE */ :\n                        case \"SHOW_DETAIL\" /* SHOW_DETAIL */ :\n                        case \"HIDE_DETAIL\" /* HIDE_DETAIL */ :\n                        case \"TOGGLE_STATE\" /* TOGGLE_STATE */ :\n                        case \"ADD_DROPDOWN\" /* ADD_DROPDOWN */ :\n                        case \"UPDATE_FORM\" /* UPDATE_FORM */ :\n                        case \"NAVIGATE\" /* NAVIGATE */ :\n                            dispatch({\n                                type: \"PARTIAL_UPDATE\",\n                                nodeId: route.targetNodeId,\n                                node\n                            });\n                            break;\n                    }\n                } else {\n                    const prompt = route.prompt;\n                    systemEvents.emit(createSystemEvent(\"PLAN_PROMPT_CREATED\" /* PLAN_PROMPT_CREATED */ , {\n                        prompt\n                    }));\n                    append({\n                        content: prompt,\n                        role: \"user\"\n                    });\n                    sessionStorage.setItem(\"currentRoute\", JSON.stringify({\n                        actionType: route.actionType,\n                        targetNodeId: route.targetNodeId\n                    }));\n                }\n                return;\n            }\n        }\n        const input = {\n            schema,\n            goal,\n            history: [\n                ...state.history,\n                event\n            ],\n            userContext\n        };\n        if (mockMode) {\n            const node = mockPlanner(input);\n            dispatch({\n                type: \"AI_RESPONSE\",\n                node\n            });\n        } else {\n            const prompt = buildPrompt(input);\n            append({\n                content: prompt,\n                role: \"user\"\n            });\n        }\n    }, [\n        append,\n        goal,\n        schema,\n        state.history,\n        state.layout,\n        stop,\n        userContext,\n        router,\n        mockMode,\n        dataContext,\n        enablePartialUpdates\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n        if (isLoading) {\n            dispatch({\n                type: \"LOADING\",\n                isLoading: true\n            });\n        } else if (error) {\n            const errorMessage = error instanceof Error ? error.message : String(error);\n            dispatch({\n                type: \"ERROR\",\n                message: errorMessage\n            });\n            systemEvents.emit(createSystemEvent(\"PLAN_ERROR\" /* PLAN_ERROR */ , {\n                error: error instanceof Error ? error : new Error(String(error))\n            }));\n        } else if (data.content && data.content !== \"{}\") {\n            try {\n                systemEvents.emit(createSystemEvent(\"PLAN_RESPONSE_CHUNK\" /* PLAN_RESPONSE_CHUNK */ , {\n                    chunk: data.content,\n                    isComplete: true\n                }));\n                const jsonMatch = data.content.match(/```(?:json)?\\s*([\\s\\S]*?)\\s*```/) || [\n                    null,\n                    data.content\n                ];\n                const jsonStr = jsonMatch[1].trim();\n                const parsedJson = JSON.parse(jsonStr);\n                const validatedNode = uiSpecNode.parse(parsedJson);\n                const routeInfoStr = sessionStorage.getItem(\"currentRoute\");\n                if (routeInfoStr && enablePartialUpdates) {\n                    try {\n                        const routeInfo = JSON.parse(routeInfoStr);\n                        switch(routeInfo.actionType){\n                            case \"FULL_REFRESH\" /* FULL_REFRESH */ :\n                                dispatch({\n                                    type: \"AI_RESPONSE\",\n                                    node: validatedNode\n                                });\n                                break;\n                            case \"UPDATE_NODE\" /* UPDATE_NODE */ :\n                            case \"SHOW_DETAIL\" /* SHOW_DETAIL */ :\n                            case \"HIDE_DETAIL\" /* HIDE_DETAIL */ :\n                            case \"TOGGLE_STATE\" /* TOGGLE_STATE */ :\n                            case \"ADD_DROPDOWN\" /* ADD_DROPDOWN */ :\n                            case \"UPDATE_FORM\" /* UPDATE_FORM */ :\n                            case \"NAVIGATE\" /* NAVIGATE */ :\n                                dispatch({\n                                    type: \"PARTIAL_UPDATE\",\n                                    nodeId: routeInfo.targetNodeId,\n                                    node: validatedNode\n                                });\n                                break;\n                            default:\n                                dispatch({\n                                    type: \"AI_RESPONSE\",\n                                    node: validatedNode\n                                });\n                        }\n                        sessionStorage.removeItem(\"currentRoute\");\n                    } catch (e) {\n                        console.error(\"Error parsing route info:\", e);\n                        dispatch({\n                            type: \"AI_RESPONSE\",\n                            node: validatedNode\n                        });\n                    }\n                } else {\n                    dispatch({\n                        type: \"AI_RESPONSE\",\n                        node: validatedNode\n                    });\n                }\n                systemEvents.emit(createSystemEvent(\"PLAN_COMPLETE\" /* PLAN_COMPLETE */ , {\n                    layout: validatedNode,\n                    executionTimeMs: 0\n                }));\n            } catch (parseError) {\n                console.error(\"Failed to parse LLM response:\", parseError);\n                dispatch({\n                    type: \"ERROR\",\n                    message: \"Failed to parse LLM response\"\n                });\n                systemEvents.emit(createSystemEvent(\"PLAN_ERROR\" /* PLAN_ERROR */ , {\n                    error: parseError instanceof Error ? parseError : new Error(\"Parse error\")\n                }));\n            }\n        }\n    }, [\n        data.content,\n        error,\n        isLoading,\n        enablePartialUpdates\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n        const input = {\n            schema,\n            goal,\n            history: [],\n            userContext\n        };\n        if (mockMode) {\n            const node = mockPlanner(input);\n            dispatch({\n                type: \"AI_RESPONSE\",\n                node\n            });\n        } else {\n            const prompt = buildPrompt(input);\n            append({\n                content: prompt,\n                role: \"user\"\n            });\n        }\n    }, [\n        append,\n        goal,\n        schema,\n        userContext,\n        mockMode\n    ]);\n    return {\n        state,\n        dispatch,\n        handleEvent\n    };\n}\nzod__WEBPACK_IMPORTED_MODULE_6__.z.enum([\n    // Layout components\n    \"Container\",\n    \"Card\",\n    \"Header\",\n    // Input components\n    \"Button\",\n    \"Input\",\n    \"Select\",\n    \"Textarea\",\n    \"Checkbox\",\n    \"RadioGroup\",\n    // Data display components \n    \"ListView\",\n    \"Detail\",\n    \"Tabs\",\n    \"Dialog\",\n    // Typography\n    \"Heading\",\n    \"Text\"\n]);\nvar ShimmerBlock = ()=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", {\n        className: \"w-full h-8 bg-gray-200 animate-pulse rounded\"\n    });\nvar ShimmerTable = ({ rows = 3 })=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", {\n        className: \"w-full space-y-2\",\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", {\n                className: \"w-full h-10 bg-gray-200 animate-pulse rounded\"\n            }),\n            Array.from({\n                length: rows\n            }).map((_, i)=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", {\n                    className: \"w-full h-12 bg-gray-200 animate-pulse rounded\"\n                }, i))\n        ]\n    });\nvar ShimmerCard = ()=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", {\n        className: \"w-full p-4 space-y-4 border rounded-lg\",\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", {\n                className: \"w-3/4 h-6 bg-gray-200 animate-pulse rounded\"\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", {\n                className: \"space-y-2\",\n                children: [\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", {\n                        className: \"w-full h-4 bg-gray-200 animate-pulse rounded\"\n                    }),\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", {\n                        className: \"w-full h-4 bg-gray-200 animate-pulse rounded\"\n                    }),\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", {\n                        className: \"w-5/6 h-4 bg-gray-200 animate-pulse rounded\"\n                    })\n                ]\n            })\n        ]\n    });\nvar Container = (props)=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", {\n        className: `w-full text-gray-800 dark:text-gray-100 ${props.className || \"\"}`,\n        style: {\n            ...props.style,\n            color: \"inherit\"\n        },\n        children: props.children\n    });\nvar Header = ({ title, className })=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"header\", {\n        className: `py-4 px-6 border-b border-gray-300 mb-4 bg-gray-50 dark:bg-gray-800 ${className || \"\"}`,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"h1\", {\n            className: \"text-xl font-semibold text-gray-800 dark:text-white\",\n            children: title\n        })\n    });\nvar Button = ({ onClick, children, variant = \"default\" })=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"button\", {\n        className: `px-4 py-2 rounded-md font-medium transition-colors ${variant === \"default\" ? \"bg-blue-600 text-white hover:bg-blue-700\" : variant === \"outline\" ? \"border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-800\" : \"bg-red-600 text-white hover:bg-red-700\"}`,\n        onClick,\n        children\n    });\nvar Table = ({ items = [], fields = [], onSelect, selectable })=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", {\n        className: \"w-full border border-gray-300 dark:border-gray-700 rounded-lg overflow-hidden shadow-sm\",\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"table\", {\n            className: \"w-full\",\n            children: [\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"thead\", {\n                    className: \"bg-gray-100 dark:bg-gray-800 border-b border-gray-300 dark:border-gray-700\",\n                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"tr\", {\n                        children: fields.map((field)=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"th\", {\n                                className: \"px-6 py-3 text-left text-xs font-medium text-gray-700 dark:text-gray-300 uppercase tracking-wider\",\n                                children: field.label\n                            }, field.key))\n                    })\n                }),\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"tbody\", {\n                    className: \"bg-white dark:bg-gray-900 divide-y divide-gray-200 dark:divide-gray-700\",\n                    children: items.map((item, index)=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"tr\", {\n                            onClick: ()=>selectable && onSelect && onSelect(item),\n                            className: selectable ? \"cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-800\" : \"\",\n                            children: fields.map((field)=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"td\", {\n                                    className: \"px-6 py-4 whitespace-nowrap text-sm text-gray-800 dark:text-gray-300\",\n                                    children: item[field.key]\n                                }, field.key))\n                        }, index))\n                })\n            ]\n        })\n    });\nvar Detail = ({ data, fields = [], title, visible = true, onBack })=>{\n    if (!visible) return null;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", {\n        className: \"w-full border border-gray-300 dark:border-gray-700 rounded-lg p-6 space-y-4 bg-white dark:bg-gray-900 shadow-sm\",\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", {\n                className: \"flex justify-between items-center border-b border-gray-200 dark:border-gray-700 pb-3\",\n                children: [\n                    title && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"h2\", {\n                        className: \"text-lg font-medium text-gray-800 dark:text-white\",\n                        children: title\n                    }),\n                    onBack && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Button, {\n                        variant: \"outline\",\n                        onClick: onBack,\n                        children: \"Back\"\n                    })\n                ]\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", {\n                className: \"space-y-4\",\n                children: fields.map((field)=>{\n                    if (field.type === \"heading\") {\n                        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"h3\", {\n                            className: \"text-xl font-semibold text-gray-800 dark:text-white\",\n                            children: data?.[field.key]\n                        }, field.key);\n                    }\n                    if (field.type === \"content\") {\n                        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", {\n                            className: \"text-sm text-gray-700 dark:text-gray-300\",\n                            children: data?.[field.key]\n                        }, field.key);\n                    }\n                    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", {\n                        className: \"flex flex-col border-b border-gray-100 dark:border-gray-800 py-2\",\n                        children: [\n                            field.label && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", {\n                                className: \"text-xs text-gray-600 dark:text-gray-400 font-medium\",\n                                children: field.label\n                            }),\n                            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", {\n                                className: \"text-sm text-gray-800 dark:text-gray-200\",\n                                children: data?.[field.key]\n                            })\n                        ]\n                    }, field.key);\n                })\n            })\n        ]\n    });\n};\nvar createEventHandler = (node, eventName)=>{\n    const eventConfig = node.events?.[eventName];\n    if (!eventConfig) return void 0;\n    return ()=>{\n        console.log(`Event triggered: ${eventName} on node ${node.id}`, {\n            action: eventConfig.action,\n            target: eventConfig.target,\n            payload: eventConfig.payload\n        });\n    };\n};\nvar adapterMap = {\n    Container: (node)=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Container, {\n            style: node.props?.style,\n            className: node.props?.className,\n            children: node.children?.map((child)=>renderNode(child))\n        }),\n    Header: (node)=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Header, {\n            title: node.props?.title || \"Untitled\",\n            className: node.props?.className\n        }),\n    Button: (node)=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Button, {\n            variant: node.props?.variant,\n            onClick: createEventHandler(node, \"onClick\"),\n            children: node.props?.label || \"Button\"\n        }),\n    ListView: (node)=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Table, {\n            items: node.bindings?.items || [],\n            fields: node.bindings?.fields || [],\n            selectable: node.props?.selectable,\n            onSelect: createEventHandler(node, \"onSelect\")\n        }),\n    Detail: (node)=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Detail, {\n            data: node.bindings?.data,\n            fields: node.bindings?.fields || [],\n            title: node.props?.title,\n            visible: node.props?.visible !== false,\n            onBack: createEventHandler(node, \"onBack\")\n        })\n};\nfunction renderNode(node) {\n    const Component = adapterMap[node.node_type];\n    if (Component) {\n        return Component(node);\n    }\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", {\n        className: \"p-2 border border-red-300 rounded\",\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"p\", {\n                className: \"text-sm text-red-500\",\n                children: [\n                    \"Unsupported component: \",\n                    node.node_type\n                ]\n            }),\n            node.children?.map((child)=>renderNode(child))\n        ]\n    });\n}\nvar renderedNodesCache = /* @__PURE__ */ new Map();\nvar MAX_CACHE_SIZE = 10;\nvar CACHE_TTL = 5e3;\nasync function renderNode2(node, adapter = \"shadcn\") {\n    const startTime = Date.now();\n    const nodeId = node.id;\n    const cachedItem = renderedNodesCache.get(nodeId);\n    if (cachedItem && startTime - cachedItem.timestamp < CACHE_TTL) {\n        return cachedItem.element;\n    }\n    await systemEvents.emit(createSystemEvent(\"RENDER_START\" /* RENDER_START */ , {\n        layout: node\n    }));\n    let result;\n    switch(adapter){\n        case \"shadcn\":\n            result = renderNode(node);\n            break;\n        default:\n            console.warn(`Unsupported adapter: ${adapter}, falling back to shadcn`);\n            result = renderNode(node);\n    }\n    await systemEvents.emit(createSystemEvent(\"RENDER_COMPLETE\" /* RENDER_COMPLETE */ , {\n        layout: node,\n        renderTimeMs: Date.now() - startTime\n    }));\n    renderedNodesCache.set(nodeId, {\n        element: result,\n        timestamp: startTime\n    });\n    if (renderedNodesCache.size > MAX_CACHE_SIZE) {\n        const oldestKey = [\n            ...renderedNodesCache.entries()\n        ].sort(([, a], [, b])=>a.timestamp - b.timestamp)[0][0];\n        renderedNodesCache.delete(oldestKey);\n    }\n    return result;\n}\nfunction renderShimmer(node, adapter = \"shadcn\") {\n    if (!node) {\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ShimmerBlock, {});\n    }\n    switch(node.type){\n        case \"ListView\":\n            return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ShimmerTable, {\n                rows: 3\n            });\n        case \"Detail\":\n            return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ShimmerCard, {});\n        case \"Container\":\n            return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", {\n                className: \"space-y-4\",\n                children: node.children?.map((child, index)=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", {\n                        children: renderShimmer(child, adapter)\n                    }, index))\n            });\n        default:\n            return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ShimmerBlock, {});\n    }\n}\n// src/core/bindings.ts\nvar bindingsCache = /* @__PURE__ */ new Map();\nvar MAX_CACHE_SIZE2 = 50;\nvar CACHE_TTL2 = 2e3;\nvar nodeCacheTimestamps = /* @__PURE__ */ new Map();\nfunction hashDataContext(context) {\n    return JSON.stringify(context);\n}\nfunction createCacheKey(nodeId, context) {\n    return `${nodeId}:${hashDataContext(context)}`;\n}\nfunction getValueByPath(context, path) {\n    const parts = path.split(\".\");\n    let current = context;\n    for (const part of parts){\n        if (current === null || current === void 0) {\n            return void 0;\n        }\n        if (typeof current !== \"object\") {\n            return void 0;\n        }\n        current = current[part];\n    }\n    return current;\n}\nfunction setValueByPath(context, path, value) {\n    const result = {\n        ...context\n    };\n    const parts = path.split(\".\");\n    let current = result;\n    for(let i = 0; i < parts.length - 1; i++){\n        const part = parts[i];\n        if (!(part in current) || current[part] === null || current[part] === void 0) {\n            current[part] = {};\n        }\n        current = current[part];\n        if (typeof current !== \"object\") {\n            current = {};\n        }\n    }\n    const lastPart = parts[parts.length - 1];\n    current[lastPart] = value;\n    return result;\n}\nfunction processBinding(binding, context) {\n    if (typeof binding === \"string\") {\n        return getValueByPath(context, binding);\n    }\n    if (Array.isArray(binding)) {\n        return binding.map((item)=>processBinding(item, context));\n    }\n    if (binding !== null && typeof binding === \"object\") {\n        const result = {};\n        for (const [key, value] of Object.entries(binding)){\n            result[key] = processBinding(value, context);\n        }\n        return result;\n    }\n    return binding;\n}\nasync function resolveBindings(node, context) {\n    const currentTime = Date.now();\n    const cacheKey = createCacheKey(node.id, context);\n    const cachedNode = bindingsCache.get(cacheKey);\n    const cachedTimestamp = nodeCacheTimestamps.get(cacheKey);\n    if (cachedNode && cachedTimestamp && currentTime - cachedTimestamp < CACHE_TTL2) {\n        return cachedNode;\n    }\n    await systemEvents.emit(createSystemEvent(\"BINDING_RESOLUTION_START\" /* BINDING_RESOLUTION_START */ , {\n        layout: node\n    }));\n    const result = {\n        ...node,\n        props: node.props ? {\n            ...node.props\n        } : void 0,\n        events: node.events ? {\n            ...node.events\n        } : void 0\n    };\n    if (node.bindings) {\n        for (const [key, binding] of Object.entries(node.bindings)){\n            const value = processBinding(binding, context);\n            if (value !== void 0) {\n                if (!result.props) {\n                    result.props = {};\n                }\n                result.props[key] = value;\n            }\n        }\n    }\n    if (node.children) {\n        result.children = await Promise.all(node.children.map((child)=>resolveBindings(child, context)));\n    }\n    await systemEvents.emit(createSystemEvent(\"BINDING_RESOLUTION_COMPLETE\" /* BINDING_RESOLUTION_COMPLETE */ , {\n        originalLayout: node,\n        resolvedLayout: result\n    }));\n    bindingsCache.set(cacheKey, result);\n    nodeCacheTimestamps.set(cacheKey, currentTime);\n    if (bindingsCache.size > MAX_CACHE_SIZE2) {\n        const entries = [\n            ...nodeCacheTimestamps.entries()\n        ];\n        if (entries.length > 0) {\n            entries.sort((a, b)=>a[1] - b[1]);\n            const oldestKey = entries[0][0];\n            bindingsCache.delete(oldestKey);\n            nodeCacheTimestamps.delete(oldestKey);\n        }\n    }\n    return result;\n}\nfunction executeAction(action, targetId, payload, context = {}, layoutTree) {\n    let newContext = {\n        ...context\n    };\n    switch(action){\n        case \"VIEW_DETAIL\":\n            {\n                if (payload?.item) {\n                    newContext = setValueByPath(newContext, \"selected\", payload.item);\n                }\n                break;\n            }\n        case \"HIDE_DETAIL\":\n            {\n                newContext = setValueByPath(newContext, \"selected\", null);\n                break;\n            }\n        case \"SET_VALUE\":\n            {\n                if (payload?.path && \"value\" in payload) {\n                    const path = String(payload.path);\n                    newContext = setValueByPath(newContext, path, payload.value);\n                }\n                break;\n            }\n        default:\n            console.warn(`Unknown action: ${action}`);\n    }\n    return newContext;\n}\n// src/core/events.ts\nvar EventManager = class {\n    constructor(){\n        this.hooks = {};\n    }\n    /**\n   * Register a hook for specific event types\n   * \n   * @param eventTypes - Event types to register for, or 'all' for all events\n   * @param hook - Hook function to execute\n   * @returns Unregister function\n   */ register(eventTypes, hook) {\n        if (eventTypes === \"all\") {\n            if (!this.hooks.all) {\n                this.hooks.all = [];\n            }\n            this.hooks.all.push(hook);\n            return ()=>{\n                if (this.hooks.all) {\n                    this.hooks.all = this.hooks.all.filter((h)=>h !== hook);\n                }\n            };\n        }\n        eventTypes.forEach((type)=>{\n            if (!this.hooks[type]) {\n                this.hooks[type] = [];\n            }\n            this.hooks[type]?.push(hook);\n        });\n        return ()=>{\n            eventTypes.forEach((type)=>{\n                if (this.hooks[type]) {\n                    this.hooks[type] = this.hooks[type]?.filter((h)=>h !== hook);\n                }\n            });\n        };\n    }\n    /**\n   * Process an event through all registered hooks\n   * \n   * @param event - The UI event to process\n   * @returns Whether the default action should proceed\n   */ async processEvent(event) {\n        let defaultPrevented = false;\n        let propagationStopped = false;\n        const context = {\n            originalEvent: event,\n            preventDefault: ()=>{\n                defaultPrevented = true;\n            },\n            stopPropagation: ()=>{\n                propagationStopped = true;\n            },\n            isDefaultPrevented: ()=>defaultPrevented,\n            isPropagationStopped: ()=>propagationStopped\n        };\n        if (this.hooks.all) {\n            for (const hook of this.hooks.all){\n                await hook(context);\n                if (propagationStopped) break;\n            }\n        }\n        if (!propagationStopped && this.hooks[event.type]) {\n            for (const hook of this.hooks[event.type] || []){\n                await hook(context);\n                if (propagationStopped) break;\n            }\n        }\n        return !defaultPrevented;\n    }\n};\nfunction createEventHook(eventTypes, hook, options) {\n    return async (context)=>{\n        await hook(context);\n        if (options?.preventDefault) {\n            context.preventDefault();\n        }\n        if (options?.stopPropagation) {\n            context.stopPropagation();\n        }\n    };\n}\n// src/core/component-detection.ts\nfunction areShadcnComponentsAvailable() {\n    try {\n        init_button();\n        return true;\n    } catch (error) {\n        return false;\n    }\n}\nfunction getMissingComponentsMessage() {\n    return `Missing required shadcn components. Please run:\n> npm run setup-shadcn`;\n}\nvar AutoUI = ({ schema, goal, componentAdapter = \"shadcn\", userContext, onEvent, eventHooks, systemEventHooks, debugMode = false, mockMode = true, databaseConfig, planningConfig, integration = {}, scope = {}, enablePartialUpdates = false })=>{\n    const [schemaAdapterInstance, setSchemaAdapterInstance] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    const [dataContext, setDataContext] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)({});\n    const [componentsAvailable, setComponentsAvailable] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(true);\n    const effectiveSchema = schema;\n    const scopedGoal = goal;\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n        if (componentAdapter === \"shadcn\") {\n            setComponentsAvailable(areShadcnComponentsAvailable());\n        }\n    }, [\n        componentAdapter\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n        const unregisters = [];\n        if (systemEventHooks) {\n            Object.entries(systemEventHooks).forEach(([eventType, hooks])=>{\n                if (!hooks) return;\n                hooks.forEach((hook)=>{\n                    const unregister = systemEvents.on(eventType, hook);\n                    unregisters.push(unregister);\n                });\n            });\n        }\n        if (debugMode) {\n            const debugHook = (event)=>{\n                console.debug(`[AutoUI Debug] System Event:`, event);\n            };\n            Object.values(SystemEventType).filter((eventType)=>eventType !== \"RENDER_START\" /* RENDER_START */  && eventType !== \"BINDING_RESOLUTION_START\" /* BINDING_RESOLUTION_START */ ).forEach((eventType)=>{\n                const unregister = systemEvents.on(eventType, debugHook);\n                unregisters.push(unregister);\n            });\n        }\n        return ()=>{\n            unregisters.forEach((unregister)=>unregister());\n        };\n    }, [\n        systemEventHooks,\n        debugMode\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n        const initializeDataContext = async ()=>{\n            let initialData = {};\n            if (schemaAdapterInstance) {\n                initialData = await schemaAdapterInstance.initializeDataContext();\n            } else if (effectiveSchema) {\n                Object.entries(effectiveSchema).forEach(([key, tableSchema])=>{\n                    initialData[key] = {\n                        schema: tableSchema,\n                        // For development, add sample data if available\n                        data: tableSchema?.sampleData || [],\n                        selected: null\n                    };\n                });\n            }\n            if (userContext) {\n                initialData.user = userContext;\n            }\n            setDataContext(initialData);\n        };\n        initializeDataContext();\n    }, [\n        effectiveSchema,\n        schemaAdapterInstance,\n        userContext\n    ]);\n    const { state, handleEvent } = useUIStateEngine({\n        schema: effectiveSchema,\n        goal: scopedGoal,\n        userContext,\n        mockMode,\n        planningConfig,\n        router: void 0,\n        dataContext,\n        enablePartialUpdates\n    });\n    const eventManagerRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(new EventManager());\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n        if (!eventHooks) return;\n        const unregisters = [];\n        if (eventHooks.all) {\n            const unregister = eventManagerRef.current.register(\"all\", async (ctx)=>{\n                for (const hook of eventHooks.all || []){\n                    await hook(ctx);\n                    if (ctx.isPropagationStopped()) break;\n                }\n            });\n            unregisters.push(unregister);\n        }\n        Object.entries(eventHooks).forEach(([type, hooks])=>{\n            if (type === \"all\" || !hooks) return;\n            const unregister = eventManagerRef.current.register([\n                type\n            ], async (ctx)=>{\n                for (const hook of hooks){\n                    await hook(ctx);\n                    if (ctx.isPropagationStopped()) break;\n                }\n            });\n            unregisters.push(unregister);\n        });\n        return ()=>{\n            unregisters.forEach((unregister)=>unregister());\n        };\n    }, [\n        eventHooks\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(async (event)=>{\n        const shouldProceed = await eventManagerRef.current.processEvent(event);\n        if (onEvent) {\n            onEvent(event);\n        }\n        if (!shouldProceed) {\n            console.info(\"Event processing was prevented by hooks\", event);\n            return;\n        }\n        const findNodeById2 = (node, id)=>{\n            if (!node) return void 0;\n            if (node.id === id) return node;\n            if (node.children) {\n                for (const child of node.children){\n                    const found = findNodeById2(child, id);\n                    if (found) return found;\n                }\n            }\n            return void 0;\n        };\n        const sourceNode = findNodeById2(state.layout, event.nodeId);\n        if (!sourceNode) {\n            console.warn(`Node not found for event: ${event.nodeId}`);\n            handleEvent(event);\n            return;\n        }\n        const eventConfig = sourceNode.events?.[event.type];\n        if (!eventConfig) {\n            console.warn(`No event config found for ${event.type} on node ${event.nodeId}`);\n            handleEvent(event);\n            return;\n        }\n        const newContext = executeAction(eventConfig.action, eventConfig.target || \"\", // Provide empty string as fallback if target is null\n        {\n            ...eventConfig.payload,\n            ...event.payload\n        }, dataContext, state.layout || void 0);\n        setDataContext(newContext);\n        handleEvent(event);\n    }, [\n        dataContext,\n        handleEvent,\n        onEvent,\n        state.layout\n    ]);\n    const [resolvedLayout, setResolvedLayout] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(void 0);\n    const [renderedNode, setRenderedNode] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    const resolveLayoutBindings = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(async ()=>{\n        if (state.layout) {\n            try {\n                const resolved = await resolveBindings(state.layout, dataContext);\n                setResolvedLayout(resolved);\n            } catch (err) {\n                console.error(\"Error resolving bindings:\", err);\n            }\n        } else {\n            setResolvedLayout(void 0);\n        }\n    }, [\n        state.layout,\n        dataContext\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n        resolveLayoutBindings();\n    }, [\n        resolveLayoutBindings\n    ]);\n    const renderResolvedLayout = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(async ()=>{\n        if (resolvedLayout) {\n            try {\n                const rendered = await renderNode2(resolvedLayout, componentAdapter);\n                setRenderedNode(rendered);\n            } catch (err) {\n                console.error(\"Error rendering node:\", err);\n            }\n        } else {\n            setRenderedNode(null);\n        }\n    }, [\n        resolvedLayout,\n        componentAdapter\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n        renderResolvedLayout();\n    }, [\n        renderResolvedLayout\n    ]);\n    if (!componentsAvailable) {\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", {\n            className: \"autoui-error p-4 border border-red-300 bg-red-50 text-red-700 rounded\",\n            children: [\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"p\", {\n                    className: \"font-medium\",\n                    children: \"Component Library Not Found\"\n                }),\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"p\", {\n                    className: \"text-sm whitespace-pre-line\",\n                    children: getMissingComponentsMessage()\n                })\n            ]\n        });\n    }\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", {\n        className: `autoui-root ${integration.className || \"\"}`,\n        id: integration.id,\n        \"data-mode\": integration.mode,\n        \"data-scope\": scope?.type || \"full\",\n        children: [\n            state.loading || !resolvedLayout ? // Render shimmer loading state\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", {\n                className: \"autoui-loading\",\n                children: state.layout ? renderShimmer(state.layout, componentAdapter) : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", {\n                    className: \"autoui-shimmer-container\",\n                    children: [\n                        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", {\n                            className: \"autoui-shimmer-header\"\n                        }),\n                        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", {\n                            className: \"autoui-shimmer-content\"\n                        })\n                    ]\n                })\n            }) : // Render the resolved layout\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", {\n                className: \"autoui-content\",\n                children: renderedNode\n            }),\n            state.error && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", {\n                className: \"autoui-error p-4 border border-red-300 bg-red-50 dark:bg-red-900 dark:border-red-700 rounded-md\",\n                children: [\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"p\", {\n                        className: \"autoui-error-title text-lg font-semibold text-red-700 dark:text-red-300 mb-2\",\n                        children: \"Error generating UI\"\n                    }),\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"p\", {\n                        className: \"autoui-error-message text-sm text-red-600 dark:text-red-300\",\n                        children: state.error\n                    }),\n                    !mockMode && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", {\n                        className: \"mt-4 text-sm text-red-600 dark:text-red-300\",\n                        children: [\n                            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"p\", {\n                                children: \"This could be because:\"\n                            }),\n                            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"ul\", {\n                                className: \"list-disc pl-5 mt-2\",\n                                children: [\n                                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"li\", {\n                                        children: \"Your OpenAI API key is missing or invalid\"\n                                    }),\n                                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"li\", {\n                                        children: \"The OpenAI service is experiencing issues\"\n                                    }),\n                                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"li\", {\n                                        children: \"Your API rate limit has been exceeded\"\n                                    })\n                                ]\n                            }),\n                            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"p\", {\n                                className: \"mt-2\",\n                                children: [\n                                    \"Try setting \",\n                                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"code\", {\n                                        children: \"mockMode=true\"\n                                    }),\n                                    \" to use sample data instead.\"\n                                ]\n                            })\n                        ]\n                    })\n                ]\n            })\n        ]\n    });\n};\n// src/adapters/schema/drizzle.ts\nvar DrizzleAdapter = class {\n    constructor(options){\n        this.schema = options.schema;\n        this.client = options.client;\n        this.useMockData = options.useMockData ?? !options.client;\n        this.mockData = options.mockData ?? {};\n    }\n    /**\n   * Convert Drizzle schema to AutoUI schema format\n   */ getSchema() {\n        const result = {};\n        Object.entries(this.schema).forEach(([tableName, table])=>{\n            result[tableName] = {\n                tableName: table.name,\n                schema: table.schema,\n                columns: this.convertColumns(table.columns),\n                // Include mock data if available and mock mode is enabled\n                ...this.useMockData && this.mockData[tableName] ? {\n                    sampleData: this.mockData[tableName]\n                } : {}\n            };\n        });\n        return result;\n    }\n    /**\n   * Convert Drizzle columns to AutoUI column format\n   */ convertColumns(columns) {\n        const result = {};\n        Object.entries(columns).forEach(([columnName, column])=>{\n            result[columnName] = {\n                type: this.mapDataType(column.dataType),\n                notNull: column.notNull,\n                defaultValue: column.defaultValue,\n                primaryKey: column.primaryKey,\n                unique: column.unique,\n                references: column.references\n            };\n        });\n        return result;\n    }\n    /**\n   * Map Drizzle data types to standard types\n   */ mapDataType(drizzleType) {\n        const typeMap = {\n            \"serial\": \"integer\",\n            \"integer\": \"integer\",\n            \"int\": \"integer\",\n            \"bigint\": \"integer\",\n            \"text\": \"string\",\n            \"varchar\": \"string\",\n            \"char\": \"string\",\n            \"boolean\": \"boolean\",\n            \"bool\": \"boolean\",\n            \"timestamp\": \"datetime\",\n            \"timestamptz\": \"datetime\",\n            \"date\": \"date\",\n            \"time\": \"time\",\n            \"json\": \"object\",\n            \"jsonb\": \"object\",\n            \"real\": \"number\",\n            \"float\": \"number\",\n            \"double\": \"number\",\n            \"numeric\": \"number\",\n            \"decimal\": \"number\"\n        };\n        return typeMap[drizzleType.toLowerCase()] || \"string\";\n    }\n    /**\n   * Execute a query against the database\n   */ async query(tableName, query) {\n        if (this.useMockData) {\n            return this.mockData[tableName] || [];\n        }\n        if (!this.client) {\n            throw new Error(\"No database client provided and mock mode is disabled\");\n        }\n        if (this.client.queryFn) {\n            return this.client.queryFn(tableName, query);\n        }\n        throw new Error(\"No query function provided in client config\");\n    }\n    /**\n   * Initialize the data context with schema information and optional mock data\n   */ async initializeDataContext() {\n        const context = {};\n        for (const [tableName, table] of Object.entries(this.schema)){\n            context[tableName] = {\n                schema: table,\n                data: this.useMockData ? this.mockData[tableName] || [] : [],\n                selected: null\n            };\n        }\n        return context;\n    }\n};\n// src/adapters/schema/index.ts\nfunction createSchemaAdapter(options) {\n    switch(options.type){\n        case \"drizzle\":\n            return new DrizzleAdapter(options.options);\n        case \"custom\":\n            return options.adapter;\n        default:\n            throw new Error(`Unsupported schema adapter type: ${options.type}`);\n    }\n}\n// src/ai-utils.ts\nvar generateComponent = async (prompt)=>{\n    console.warn(\"generateComponent is a placeholder and will be implemented in a future version\");\n    return `<div>Generated Component for: ${prompt}</div>`;\n};\nvar generateUIDescription = async (prompt)=>{\n    console.warn(\"generateUIDescription is a placeholder and will be implemented in a future version\");\n    return `Description for ${prompt}`;\n};\nvar generateUIComponent = async (prompt)=>{\n    console.warn(\"generateUIComponent is a placeholder and will be implemented in a future version\");\n    return `<div>Generated UI Component for: ${prompt}</div>`;\n};\nfunction usePlanner(options) {\n    const { goal, schema, userContext, router: customRouter } = options;\n    const [layout, setLayout] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(void 0);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    const router = customRouter || createDefaultRouter();\n    const dataContext = {};\n    const generateInitialLayout = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(async ()=>{\n        setLoading(true);\n        setError(null);\n        try {\n            const plannerInput2 = {\n                schema,\n                goal,\n                userContext: userContext || null,\n                history: null\n            };\n            const generatedLayout = await callPlannerLLM(plannerInput2);\n            setLayout(generatedLayout);\n        } catch (err) {\n            setError(err instanceof Error ? err : new Error(String(err)));\n        } finally{\n            setLoading(false);\n        }\n    }, [\n        schema,\n        goal,\n        userContext\n    ]);\n    const handleEvent = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(async (event)=>{\n        if (!layout) {\n            setError(new Error(\"Cannot handle event - no layout exists\"));\n            return;\n        }\n        setLoading(true);\n        setError(null);\n        try {\n            const updatedLayout = await processEvent(event, router, schema, layout, dataContext, goal, userContext);\n            setLayout(updatedLayout);\n        } catch (err) {\n            setError(err instanceof Error ? err : new Error(String(err)));\n        } finally{\n            setLoading(false);\n        }\n    }, [\n        layout,\n        router,\n        schema,\n        dataContext,\n        goal,\n        userContext\n    ]);\n    return {\n        layout,\n        loading,\n        error,\n        handleEvent,\n        generateInitialLayout\n    };\n}\n //# sourceMappingURL=out.js.map\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../dist/index.mjs\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@opentelemetry","vendor-chunks/zod-to-json-schema","vendor-chunks/@swc","vendor-chunks/@ai-sdk","vendor-chunks/@radix-ui","vendor-chunks/zod","vendor-chunks/tailwind-merge","vendor-chunks/nanoid","vendor-chunks/clsx","vendor-chunks/class-variance-authority","vendor-chunks/ai","vendor-chunks/secure-json-parse"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fpage&page=%2Fpage&appPaths=%2Fpage&pagePath=private-next-app-dir%2Fpage.tsx&appDir=%2FUsers%2Foblet%2FDocuments%2FGitHub%2Fautoui-react%2Fexamples%2Fbasic-demo%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Foblet%2FDocuments%2FGitHub%2Fautoui-react%2Fexamples%2Fbasic-demo&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();