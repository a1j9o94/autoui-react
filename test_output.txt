app-index.tsx:25  Warning: Extra attributes from the server: data-new-gr-c-s-check-loaded,data-gr-ext-installed Error Component Stack
    at body (<anonymous>)
    at html (<anonymous>)
    at RootLayout [Server] (<anonymous>)
    at RedirectErrorBoundary (redirect-boundary.tsx:48:5)
    at RedirectBoundary (redirect-boundary.tsx:79:9)
    at NotFoundErrorBoundary (not-found-boundary.tsx:32:5)
    at NotFoundBoundary (not-found-boundary.tsx:117:9)
    at DevRootNotFoundBoundary (dev-root-not-found-boundary.tsx:20:3)
    at ReactDevOverlay (ReactDevOverlay.tsx:98:3)
    at HotReload (hot-reloader-client.tsx:452:3)
    at Router (app-router.tsx:300:9)
    at ErrorBoundaryHandler (error-boundary.tsx:68:11)
    at ErrorBoundary (error-boundary.tsx:171:9)
    at AppRouter (app-router.tsx:716:3)
    at ServerRoot (app-index.tsx:126:13)
    at Root (app-index.tsx:133:17)
overrideMethod @ hook.js:608
window.console.error @ app-index.tsx:25
console.error @ hydration-error-info.ts:72
printWarning @ react-dom.development.js:94
error @ react-dom.development.js:68
warnForExtraAttributes @ react-dom.development.js:32731
diffHydratedProperties @ react-dom.development.js:35117
hydrateInstance @ react-dom.development.js:36127
prepareToHydrateHostInstance @ react-dom.development.js:7246
completeWork @ react-dom.development.js:19725
completeUnitOfWork @ react-dom.development.js:25963
performUnitOfWork @ react-dom.development.js:25759
workLoopConcurrent @ react-dom.development.js:25734
renderRootConcurrent @ react-dom.development.js:25690
performConcurrentWorkOnRoot @ react-dom.development.js:24504
workLoop @ scheduler.development.js:256
flushWork @ scheduler.development.js:225
performWorkUntilDeadline @ scheduler.development.js:534
action-router.ts:179 [ActionRouter Debug] resolveRoute called for event type: INIT, nodeId: system
action-router.ts:203 [ActionRouter Debug] Searching for nodeId: system in taskListView children (snapshot): null
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'PLAN_START', timestamp: 1747163512250, plannerInput: {…}}
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'PLAN_START', timestamp: 1747163512251, plannerInput: {…}}
action-router.ts:179 [ActionRouter Debug] resolveRoute called for event type: INIT, nodeId: system
action-router.ts:203 [ActionRouter Debug] Searching for nodeId: system in taskListView children (snapshot): null
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'PLAN_START', timestamp: 1747163512252, plannerInput: {…}}
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'PLAN_START', timestamp: 1747163512252, plannerInput: {…}}
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'PLAN_PROMPT_CREATED', timestamp: 1747163512253, prompt: 'Action: FULL_REFRESH. Initialize the application v… task details, and modify task details and status'}
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'PLAN_PROMPT_CREATED', timestamp: 1747163512253, prompt: 'Action: FULL_REFRESH. Initialize the application v… task details, and modify task details and status'}
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'PLAN_COMPLETE', timestamp: 1747163522476, layout: {…}, executionTimeMs: 10223}
AutoUI.tsx:387 [AutoUI Debug] DataContext before resolving bindings: {
  "tasks": {
    "schema": {
      "tableName": "tasks",
      "columns": {
        "id": {
          "type": "uuid",
          "primaryKey": true
        },
        "title": {
          "type": "text",
          "notNull": true
        },
        "description": {
          "type": "text"
        },
        "status": {
          "type": "text",
          "notNull": true,
          "default": "pending"
        },
        "priority": {
          "type": "text",
          "notNull": true,
          "default": "medium"
        },
        "dueDate": {
          "type": "date"
        },
        "createdAt": {
          "type": "timestamp",
          "notNull": true,
          "default": "now()"
        },
        "updatedAt": {
          "type": "timestamp"
        }
      },
      "sampleData": [
        {
          "id": "1",
          "title": "Setup development environment",
          "description": "Install Node.js, TypeScript, and VS Code",
          "status": "completed",
          "priority": "high",
          "dueDate": "2023-12-31",
          "createdAt": "2023-12-01T10:00:00Z",
          "updatedAt": "2023-12-01T15:30:00Z"
        },
        {
          "id": "2",
          "title": "Create project structure",
          "description": "Set up initial files and directories",
          "status": "completed",
          "priority": "high",
          "dueDate": "2023-12-31",
          "createdAt": "2023-12-02T09:15:00Z",
          "updatedAt": "2023-12-02T11:45:00Z"
        },
        {
          "id": "3",
          "title": "Implement core features",
          "description": "Work on the main functionality",
          "status": "in_progress",
          "priority": "medium",
          "dueDate": "2024-01-15",
          "createdAt": "2023-12-05T08:30:00Z",
          "updatedAt": "2023-12-10T14:20:00Z"
        },
        {
          "id": "4",
          "title": "Write documentation",
          "description": "Create README and API docs",
          "status": "pending",
          "priority": "low",
          "dueDate": "2024-01-31",
          "createdAt": "2023-12-15T16:45:00Z",
          "updatedAt": null
        }
      ]
    },
    "data": [
      {
        "id": "1",
        "title": "Setup development environment",
        "description": "Install Node.js, TypeScript, and VS Code",
        "status": "completed",
        "priority": "high",
        "dueDate": "2023-12-31",
        "createdAt": "2023-12-01T10:00:00Z",
        "updatedAt": "2023-12-01T15:30:00Z"
      },
      {
        "id": "2",
        "title": "Create project structure",
        "description": "Set up initial files and directories",
        "status": "completed",
        "priority": "high",
        "dueDate": "2023-12-31",
        "createdAt": "2023-12-02T09:15:00Z",
        "updatedAt": "2023-12-02T11:45:00Z"
      },
      {
        "id": "3",
        "title": "Implement core features",
        "description": "Work on the main functionality",
        "status": "in_progress",
        "priority": "medium",
        "dueDate": "2024-01-15",
        "createdAt": "2023-12-05T08:30:00Z",
        "updatedAt": "2023-12-10T14:20:00Z"
      },
      {
        "id": "4",
        "title": "Write documentation",
        "description": "Create README and API docs",
        "status": "pending",
        "priority": "low",
        "dueDate": "2024-01-31",
        "createdAt": "2023-12-15T16:45:00Z",
        "updatedAt": null
      }
    ],
    "selected": null
  },
  "users": {
    "schema": {
      "tableName": "users",
      "columns": {
        "id": {
          "type": "uuid",
          "primaryKey": true
        },
        "name": {
          "type": "text",
          "notNull": true
        },
        "email": {
          "type": "text",
          "notNull": true,
          "unique": true
        },
        "role": {
          "type": "text",
          "notNull": true,
          "default": "user"
        },
        "createdAt": {
          "type": "timestamp",
          "notNull": true,
          "default": "now()"
        }
      },
      "sampleData": [
        {
          "id": "1",
          "name": "John Doe",
          "email": "john@example.com",
          "role": "admin",
          "createdAt": "2023-10-01T00:00:00Z"
        },
        {
          "id": "2",
          "name": "Jane Smith",
          "email": "jane@example.com",
          "role": "user",
          "createdAt": "2023-10-15T08:30:00Z"
        },
        {
          "id": "3",
          "name": "Bob Johnson",
          "email": "bob@example.com",
          "role": "user",
          "createdAt": "2023-11-05T14:45:00Z"
        }
      ]
    },
    "data": [
      {
        "id": "1",
        "name": "John Doe",
        "email": "john@example.com",
        "role": "admin",
        "createdAt": "2023-10-01T00:00:00Z"
      },
      {
        "id": "2",
        "name": "Jane Smith",
        "email": "jane@example.com",
        "role": "user",
        "createdAt": "2023-10-15T08:30:00Z"
      },
      {
        "id": "3",
        "name": "Bob Johnson",
        "email": "bob@example.com",
        "role": "user",
        "createdAt": "2023-11-05T14:45:00Z"
      }
    ],
    "selected": null
  },
  "user": {
    "id": "1",
    "name": "John Doe",
    "role": "admin"
  }
}
AutoUI.tsx:395 [AutoUI Debug] Raw layout before resolving (from planner): {
  "id": "root",
  "node_type": "Container",
  "props": null,
  "bindings": null,
  "events": null,
  "children": [
    {
      "id": "header",
      "node_type": "Header",
      "props": {
        "title": "Task Management Dashboard"
      },
      "bindings": null,
      "events": null,
      "children": null
    },
    {
      "id": "taskListView",
      "node_type": "ListView",
      "props": null,
      "bindings": {
        "data": "tasks"
      },
      "events": null,
      "children": [
        {
          "id": "taskItem",
          "node_type": "Card",
          "props": null,
          "bindings": null,
          "events": null,
          "children": [
            {
              "id": "taskTitle",
              "node_type": "Text",
              "props": null,
              "bindings": {
                "text": "{{item.title}}"
              },
              "events": null,
              "children": null
            },
            {
              "id": "taskStatus",
              "node_type": "Text",
              "props": null,
              "bindings": {
                "text": "{{item.status}}"
              },
              "events": null,
              "children": null
            },
            {
              "id": "viewDetailsButton",
              "node_type": "Button",
              "props": {
                "label": "View Details"
              },
              "bindings": null,
              "events": {
                "CLICK": {
                  "action": "SHOW_DIALOG",
                  "target": "taskDetailDialog",
                  "payload": {
                    "taskId": "{{item.id}}"
                  }
                }
              },
              "children": null
            }
          ]
        }
      ]
    },
    {
      "id": "taskDetailDialog",
      "node_type": "Dialog",
      "props": {
        "title": "Task Details"
      },
      "bindings": {
        "visible": "isTaskDetailDialogVisible"
      },
      "events": null,
      "children": [
        {
          "id": "taskDetailHeader",
          "node_type": "Heading",
          "props": null,
          "bindings": {
            "text": "{{selectedTask.title}}"
          },
          "events": null,
          "children": null
        },
        {
          "id": "taskDetailDescription",
          "node_type": "Text",
          "props": null,
          "bindings": {
            "text": "{{selectedTask.description}}"
          },
          "events": null,
          "children": null
        },
        {
          "id": "taskDetailStatus",
          "node_type": "Select",
          "props": {
            "options": "['Pending', 'In Progress', 'Completed']"
          },
          "bindings": {
            "value": "{{selectedTask.status}}"
          },
          "events": {
            "CHANGE": {
              "action": "UPDATE_TASK_STATUS",
              "target": "selectedTask.id",
              "payload": {
                "status": "{{value}}"
              }
            }
          },
          "children": null
        },
        {
          "id": "taskDetailSaveButton",
          "node_type": "Button",
          "props": {
            "label": "Save Changes"
          },
          "bindings": null,
          "events": {
            "CLICK": {
              "action": "SAVE_TASK_CHANGES",
              "target": "selectedTask.id",
              "payload": {
                "title": "{{selectedTask.title}}",
                "description": "{{selectedTask.description}}",
                "status": "{{selectedTask.status}}"
              }
            }
          },
          "children": null
        }
      ]
    }
  ]
}
events.ts:104 [AutoUI Debug] Corrected list binding for node 'taskListView': from 'tasks' to 'tasks.data'
AutoUI.tsx:400 [AutoUI Debug] Layout after binding correction (before resolving): {
  "id": "root",
  "node_type": "Container",
  "props": null,
  "bindings": null,
  "events": null,
  "children": [
    {
      "id": "header",
      "node_type": "Header",
      "props": {
        "title": "Task Management Dashboard"
      },
      "bindings": null,
      "events": null,
      "children": null
    },
    {
      "id": "taskListView",
      "node_type": "ListView",
      "props": null,
      "bindings": {
        "data": "tasks.data"
      },
      "events": null,
      "children": [
        {
          "id": "taskItem",
          "node_type": "Card",
          "props": null,
          "bindings": null,
          "events": null,
          "children": [
            {
              "id": "taskTitle",
              "node_type": "Text",
              "props": null,
              "bindings": {
                "text": "{{item.title}}"
              },
              "events": null,
              "children": null
            },
            {
              "id": "taskStatus",
              "node_type": "Text",
              "props": null,
              "bindings": {
                "text": "{{item.status}}"
              },
              "events": null,
              "children": null
            },
            {
              "id": "viewDetailsButton",
              "node_type": "Button",
              "props": {
                "label": "View Details"
              },
              "bindings": null,
              "events": {
                "CLICK": {
                  "action": "SHOW_DIALOG",
                  "target": "taskDetailDialog",
                  "payload": {
                    "taskId": "{{item.id}}"
                  }
                }
              },
              "children": null
            }
          ]
        }
      ]
    },
    {
      "id": "taskDetailDialog",
      "node_type": "Dialog",
      "props": {
        "title": "Task Details"
      },
      "bindings": {
        "visible": "isTaskDetailDialogVisible"
      },
      "events": null,
      "children": [
        {
          "id": "taskDetailHeader",
          "node_type": "Heading",
          "props": null,
          "bindings": {
            "text": "{{selectedTask.title}}"
          },
          "events": null,
          "children": null
        },
        {
          "id": "taskDetailDescription",
          "node_type": "Text",
          "props": null,
          "bindings": {
            "text": "{{selectedTask.description}}"
          },
          "events": null,
          "children": null
        },
        {
          "id": "taskDetailStatus",
          "node_type": "Select",
          "props": {
            "options": "['Pending', 'In Progress', 'Completed']"
          },
          "bindings": {
            "value": "{{selectedTask.status}}"
          },
          "events": {
            "CHANGE": {
              "action": "UPDATE_TASK_STATUS",
              "target": "selectedTask.id",
              "payload": {
                "status": "{{value}}"
              }
            }
          },
          "children": null
        },
        {
          "id": "taskDetailSaveButton",
          "node_type": "Button",
          "props": {
            "label": "Save Changes"
          },
          "bindings": null,
          "events": {
            "CLICK": {
              "action": "SAVE_TASK_CHANGES",
              "target": "selectedTask.id",
              "payload": {
                "title": "{{selectedTask.title}}",
                "description": "{{selectedTask.description}}",
                "status": "{{selectedTask.status}}"
              }
            }
          },
          "children": null
        }
      ]
    }
  ]
}
bindings.ts:194 [processBinding Debug] Processing PATH string: "Task Management Dashboard", Has itemData: false
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'BINDING_RESOLUTION_COMPLETE', timestamp: 1747163522482, originalLayout: {…}, resolvedLayout: {…}}
bindings.ts:194 [processBinding Debug] Processing PATH string: "tasks.data", Has itemData: false
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.title}}", Path: "item.title", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '1', title: 'Setup development environment', description: 'Install Node.js, TypeScript, and VS Code', status: 'completed', priority: 'high', …}
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.status}}", Path: "item.status", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '1', title: 'Setup development environment', description: 'Install Node.js, TypeScript, and VS Code', status: 'completed', priority: 'high', …}
bindings.ts:194 [processBinding Debug] Processing PATH string: "View Details", Has itemData: true
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.id}}", Path: "item.id", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '1', title: 'Setup development environment', description: 'Install Node.js, TypeScript, and VS Code', status: 'completed', priority: 'high', …}
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.title}}", Path: "item.title", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '2', title: 'Create project structure', description: 'Set up initial files and directories', status: 'completed', priority: 'high', …}
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.status}}", Path: "item.status", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '2', title: 'Create project structure', description: 'Set up initial files and directories', status: 'completed', priority: 'high', …}
bindings.ts:194 [processBinding Debug] Processing PATH string: "View Details", Has itemData: true
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.id}}", Path: "item.id", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '2', title: 'Create project structure', description: 'Set up initial files and directories', status: 'completed', priority: 'high', …}
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.title}}", Path: "item.title", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '3', title: 'Implement core features', description: 'Work on the main functionality', status: 'in_progress', priority: 'medium', …}
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.status}}", Path: "item.status", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '3', title: 'Implement core features', description: 'Work on the main functionality', status: 'in_progress', priority: 'medium', …}
bindings.ts:194 [processBinding Debug] Processing PATH string: "View Details", Has itemData: true
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.id}}", Path: "item.id", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '3', title: 'Implement core features', description: 'Work on the main functionality', status: 'in_progress', priority: 'medium', …}
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.title}}", Path: "item.title", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '4', title: 'Write documentation', description: 'Create README and API docs', status: 'pending', priority: 'low', …}
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.status}}", Path: "item.status", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '4', title: 'Write documentation', description: 'Create README and API docs', status: 'pending', priority: 'low', …}
bindings.ts:194 [processBinding Debug] Processing PATH string: "View Details", Has itemData: true
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.id}}", Path: "item.id", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '4', title: 'Write documentation', description: 'Create README and API docs', status: 'pending', priority: 'low', …}
bindings.ts:194 [processBinding Debug] Processing PATH string: "Task Details", Has itemData: false
bindings.ts:194 [processBinding Debug] Processing PATH string: "isTaskDetailDialogVisible", Has itemData: false
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{selectedTask.title}}", Path: "selectedTask.title", Has itemData: false
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'BINDING_RESOLUTION_COMPLETE', timestamp: 1747163522485, originalLayout: {…}, resolvedLayout: {…}}
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{selectedTask.description}}", Path: "selectedTask.description", Has itemData: false
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'BINDING_RESOLUTION_COMPLETE', timestamp: 1747163522485, originalLayout: {…}, resolvedLayout: {…}}
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{selectedTask.status}}", Path: "selectedTask.status", Has itemData: false
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{value}}", Path: "value", Has itemData: false
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'BINDING_RESOLUTION_COMPLETE', timestamp: 1747163522485, originalLayout: {…}, resolvedLayout: {…}}
bindings.ts:194 [processBinding Debug] Processing PATH string: "Save Changes", Has itemData: false
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{selectedTask.title}}", Path: "selectedTask.title", Has itemData: false
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{selectedTask.description}}", Path: "selectedTask.description", Has itemData: false
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{selectedTask.status}}", Path: "selectedTask.status", Has itemData: false
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'BINDING_RESOLUTION_COMPLETE', timestamp: 1747163522485, originalLayout: {…}, resolvedLayout: {…}}
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'BINDING_RESOLUTION_COMPLETE', timestamp: 1747163522485, originalLayout: {…}, resolvedLayout: {…}}
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'BINDING_RESOLUTION_COMPLETE', timestamp: 1747163522486, originalLayout: {…}, resolvedLayout: {…}}
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'BINDING_RESOLUTION_COMPLETE', timestamp: 1747163522486, originalLayout: {…}, resolvedLayout: {…}}
AutoUI.tsx:408 [AutoUI Debug] Resolved layout after bindings: {
  "id": "root",
  "node_type": "Container",
  "props": null,
  "bindings": null,
  "events": null,
  "children": [
    {
      "id": "header",
      "node_type": "Header",
      "props": {
        "title": "Task Management Dashboard"
      },
      "bindings": null,
      "events": null,
      "children": []
    },
    {
      "id": "taskListView",
      "node_type": "ListView",
      "props": {
        "data": [
          {
            "id": "1",
            "title": "Setup development environment",
            "description": "Install Node.js, TypeScript, and VS Code",
            "status": "completed",
            "priority": "high",
            "dueDate": "2023-12-31",
            "createdAt": "2023-12-01T10:00:00Z",
            "updatedAt": "2023-12-01T15:30:00Z"
          },
          {
            "id": "2",
            "title": "Create project structure",
            "description": "Set up initial files and directories",
            "status": "completed",
            "priority": "high",
            "dueDate": "2023-12-31",
            "createdAt": "2023-12-02T09:15:00Z",
            "updatedAt": "2023-12-02T11:45:00Z"
          },
          {
            "id": "3",
            "title": "Implement core features",
            "description": "Work on the main functionality",
            "status": "in_progress",
            "priority": "medium",
            "dueDate": "2024-01-15",
            "createdAt": "2023-12-05T08:30:00Z",
            "updatedAt": "2023-12-10T14:20:00Z"
          },
          {
            "id": "4",
            "title": "Write documentation",
            "description": "Create README and API docs",
            "status": "pending",
            "priority": "low",
            "dueDate": "2024-01-31",
            "createdAt": "2023-12-15T16:45:00Z",
            "updatedAt": null
          }
        ]
      },
      "bindings": {
        "data": "tasks.data"
      },
      "events": null,
      "children": [
        {
          "id": "taskItem-1",
          "node_type": "Card",
          "props": {
            "key": "1"
          },
          "bindings": null,
          "events": null,
          "children": [
            {
              "id": "taskItem-1-taskTitle",
              "node_type": "Text",
              "props": {
                "text": "Setup development environment"
              },
              "bindings": {
                "text": "{{item.title}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskItem-1-taskStatus",
              "node_type": "Text",
              "props": {
                "text": "completed"
              },
              "bindings": {
                "text": "{{item.status}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskItem-1-viewDetailsButton",
              "node_type": "Button",
              "props": {
                "label": "View Details"
              },
              "bindings": null,
              "events": {
                "CLICK": {
                  "action": "SHOW_DIALOG",
                  "target": "taskDetailDialog",
                  "payload": {
                    "taskId": "1"
                  }
                }
              },
              "children": []
            }
          ]
        },
        {
          "id": "taskItem-2",
          "node_type": "Card",
          "props": {
            "key": "2"
          },
          "bindings": null,
          "events": null,
          "children": [
            {
              "id": "taskItem-2-taskTitle",
              "node_type": "Text",
              "props": {
                "text": "Create project structure"
              },
              "bindings": {
                "text": "{{item.title}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskItem-2-taskStatus",
              "node_type": "Text",
              "props": {
                "text": "completed"
              },
              "bindings": {
                "text": "{{item.status}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskItem-2-viewDetailsButton",
              "node_type": "Button",
              "props": {
                "label": "View Details"
              },
              "bindings": null,
              "events": {
                "CLICK": {
                  "action": "SHOW_DIALOG",
                  "target": "taskDetailDialog",
                  "payload": {
                    "taskId": "2"
                  }
                }
              },
              "children": []
            }
          ]
        },
        {
          "id": "taskItem-3",
          "node_type": "Card",
          "props": {
            "key": "3"
          },
          "bindings": null,
          "events": null,
          "children": [
            {
              "id": "taskItem-3-taskTitle",
              "node_type": "Text",
              "props": {
                "text": "Implement core features"
              },
              "bindings": {
                "text": "{{item.title}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskItem-3-taskStatus",
              "node_type": "Text",
              "props": {
                "text": "in_progress"
              },
              "bindings": {
                "text": "{{item.status}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskItem-3-viewDetailsButton",
              "node_type": "Button",
              "props": {
                "label": "View Details"
              },
              "bindings": null,
              "events": {
                "CLICK": {
                  "action": "SHOW_DIALOG",
                  "target": "taskDetailDialog",
                  "payload": {
                    "taskId": "3"
                  }
                }
              },
              "children": []
            }
          ]
        },
        {
          "id": "taskItem-4",
          "node_type": "Card",
          "props": {
            "key": "4"
          },
          "bindings": null,
          "events": null,
          "children": [
            {
              "id": "taskItem-4-taskTitle",
              "node_type": "Text",
              "props": {
                "text": "Write documentation"
              },
              "bindings": {
                "text": "{{item.title}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskItem-4-taskStatus",
              "node_type": "Text",
              "props": {
                "text": "pending"
              },
              "bindings": {
                "text": "{{item.status}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskItem-4-viewDetailsButton",
              "node_type": "Button",
              "props": {
                "label": "View Details"
              },
              "bindings": null,
              "events": {
                "CLICK": {
                  "action": "SHOW_DIALOG",
                  "target": "taskDetailDialog",
                  "payload": {
                    "taskId": "4"
                  }
                }
              },
              "children": []
            }
          ]
        }
      ]
    },
    {
      "id": "taskDetailDialog",
      "node_type": "Dialog",
      "props": {
        "title": "Task Details"
      },
      "bindings": {
        "visible": "isTaskDetailDialogVisible"
      },
      "events": null,
      "children": [
        {
          "id": "taskDetailHeader",
          "node_type": "Heading",
          "props": null,
          "bindings": {
            "text": "{{selectedTask.title}}"
          },
          "events": null,
          "children": []
        },
        {
          "id": "taskDetailDescription",
          "node_type": "Text",
          "props": null,
          "bindings": {
            "text": "{{selectedTask.description}}"
          },
          "events": null,
          "children": []
        },
        {
          "id": "taskDetailStatus",
          "node_type": "Select",
          "props": {
            "options": "['Pending', 'In Progress', 'Completed']"
          },
          "bindings": {
            "value": "{{selectedTask.status}}"
          },
          "events": {
            "CHANGE": {
              "action": "UPDATE_TASK_STATUS",
              "target": "selectedTask.id",
              "payload": {}
            }
          },
          "children": []
        },
        {
          "id": "taskDetailSaveButton",
          "node_type": "Button",
          "props": {
            "label": "Save Changes"
          },
          "bindings": null,
          "events": {
            "CLICK": {
              "action": "SAVE_TASK_CHANGES",
              "target": "selectedTask.id",
              "payload": {}
            }
          },
          "children": []
        }
      ]
    }
  ]
}
shadcn.tsx:326 [Adapter Debug] Rendering ListView: id=taskListView, props= {data: Array(4)}
shadcn.tsx:800 [Adapter Debug] Rendering Dialog: id=taskDetailDialog, props= {title: 'Task Details'} isOpen=false
shadcn.tsx:263 [Adapter Debug] Rendering Container: id=root, props= null
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'RENDER_COMPLETE', timestamp: 1747163522493, layout: {…}, renderTimeMs: 5}
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'PLAN_COMPLETE', timestamp: 1747163522849, layout: {…}, executionTimeMs: 10596}
AutoUI.tsx:387 [AutoUI Debug] DataContext before resolving bindings: {
  "tasks": {
    "schema": {
      "tableName": "tasks",
      "columns": {
        "id": {
          "type": "uuid",
          "primaryKey": true
        },
        "title": {
          "type": "text",
          "notNull": true
        },
        "description": {
          "type": "text"
        },
        "status": {
          "type": "text",
          "notNull": true,
          "default": "pending"
        },
        "priority": {
          "type": "text",
          "notNull": true,
          "default": "medium"
        },
        "dueDate": {
          "type": "date"
        },
        "createdAt": {
          "type": "timestamp",
          "notNull": true,
          "default": "now()"
        },
        "updatedAt": {
          "type": "timestamp"
        }
      },
      "sampleData": [
        {
          "id": "1",
          "title": "Setup development environment",
          "description": "Install Node.js, TypeScript, and VS Code",
          "status": "completed",
          "priority": "high",
          "dueDate": "2023-12-31",
          "createdAt": "2023-12-01T10:00:00Z",
          "updatedAt": "2023-12-01T15:30:00Z"
        },
        {
          "id": "2",
          "title": "Create project structure",
          "description": "Set up initial files and directories",
          "status": "completed",
          "priority": "high",
          "dueDate": "2023-12-31",
          "createdAt": "2023-12-02T09:15:00Z",
          "updatedAt": "2023-12-02T11:45:00Z"
        },
        {
          "id": "3",
          "title": "Implement core features",
          "description": "Work on the main functionality",
          "status": "in_progress",
          "priority": "medium",
          "dueDate": "2024-01-15",
          "createdAt": "2023-12-05T08:30:00Z",
          "updatedAt": "2023-12-10T14:20:00Z"
        },
        {
          "id": "4",
          "title": "Write documentation",
          "description": "Create README and API docs",
          "status": "pending",
          "priority": "low",
          "dueDate": "2024-01-31",
          "createdAt": "2023-12-15T16:45:00Z",
          "updatedAt": null
        }
      ]
    },
    "data": [
      {
        "id": "1",
        "title": "Setup development environment",
        "description": "Install Node.js, TypeScript, and VS Code",
        "status": "completed",
        "priority": "high",
        "dueDate": "2023-12-31",
        "createdAt": "2023-12-01T10:00:00Z",
        "updatedAt": "2023-12-01T15:30:00Z"
      },
      {
        "id": "2",
        "title": "Create project structure",
        "description": "Set up initial files and directories",
        "status": "completed",
        "priority": "high",
        "dueDate": "2023-12-31",
        "createdAt": "2023-12-02T09:15:00Z",
        "updatedAt": "2023-12-02T11:45:00Z"
      },
      {
        "id": "3",
        "title": "Implement core features",
        "description": "Work on the main functionality",
        "status": "in_progress",
        "priority": "medium",
        "dueDate": "2024-01-15",
        "createdAt": "2023-12-05T08:30:00Z",
        "updatedAt": "2023-12-10T14:20:00Z"
      },
      {
        "id": "4",
        "title": "Write documentation",
        "description": "Create README and API docs",
        "status": "pending",
        "priority": "low",
        "dueDate": "2024-01-31",
        "createdAt": "2023-12-15T16:45:00Z",
        "updatedAt": null
      }
    ],
    "selected": null
  },
  "users": {
    "schema": {
      "tableName": "users",
      "columns": {
        "id": {
          "type": "uuid",
          "primaryKey": true
        },
        "name": {
          "type": "text",
          "notNull": true
        },
        "email": {
          "type": "text",
          "notNull": true,
          "unique": true
        },
        "role": {
          "type": "text",
          "notNull": true,
          "default": "user"
        },
        "createdAt": {
          "type": "timestamp",
          "notNull": true,
          "default": "now()"
        }
      },
      "sampleData": [
        {
          "id": "1",
          "name": "John Doe",
          "email": "john@example.com",
          "role": "admin",
          "createdAt": "2023-10-01T00:00:00Z"
        },
        {
          "id": "2",
          "name": "Jane Smith",
          "email": "jane@example.com",
          "role": "user",
          "createdAt": "2023-10-15T08:30:00Z"
        },
        {
          "id": "3",
          "name": "Bob Johnson",
          "email": "bob@example.com",
          "role": "user",
          "createdAt": "2023-11-05T14:45:00Z"
        }
      ]
    },
    "data": [
      {
        "id": "1",
        "name": "John Doe",
        "email": "john@example.com",
        "role": "admin",
        "createdAt": "2023-10-01T00:00:00Z"
      },
      {
        "id": "2",
        "name": "Jane Smith",
        "email": "jane@example.com",
        "role": "user",
        "createdAt": "2023-10-15T08:30:00Z"
      },
      {
        "id": "3",
        "name": "Bob Johnson",
        "email": "bob@example.com",
        "role": "user",
        "createdAt": "2023-11-05T14:45:00Z"
      }
    ],
    "selected": null
  },
  "user": {
    "id": "1",
    "name": "John Doe",
    "role": "admin"
  }
}
AutoUI.tsx:395 [AutoUI Debug] Raw layout before resolving (from planner): {
  "id": "root",
  "node_type": "Container",
  "props": null,
  "bindings": null,
  "events": null,
  "children": [
    {
      "id": "header",
      "node_type": "Header",
      "props": {
        "title": "Task Management Dashboard"
      },
      "bindings": null,
      "events": null,
      "children": null
    },
    {
      "id": "taskListView",
      "node_type": "ListView",
      "props": null,
      "bindings": {
        "data": "tasks"
      },
      "events": null,
      "children": [
        {
          "id": "taskItem",
          "node_type": "Card",
          "props": null,
          "bindings": null,
          "events": null,
          "children": [
            {
              "id": "taskTitle",
              "node_type": "Text",
              "props": null,
              "bindings": {
                "text": "{{item.title}}"
              },
              "events": null,
              "children": null
            },
            {
              "id": "taskStatus",
              "node_type": "Text",
              "props": null,
              "bindings": {
                "text": "{{item.status}}"
              },
              "events": null,
              "children": null
            },
            {
              "id": "viewDetailsButton",
              "node_type": "Button",
              "props": {
                "label": "View Details"
              },
              "bindings": null,
              "events": {
                "CLICK": {
                  "action": "SHOW_DIALOG",
                  "target": "taskDetailDialog",
                  "payload": {
                    "taskId": "{{item.id}}"
                  }
                }
              },
              "children": null
            }
          ]
        }
      ]
    },
    {
      "id": "taskDetailDialog",
      "node_type": "Dialog",
      "props": {
        "title": "Task Details"
      },
      "bindings": {
        "visible": "isTaskDetailDialogVisible"
      },
      "events": null,
      "children": [
        {
          "id": "taskDetailContainer",
          "node_type": "Container",
          "props": null,
          "bindings": null,
          "events": null,
          "children": [
            {
              "id": "taskDetailTitle",
              "node_type": "Heading",
              "props": null,
              "bindings": {
                "text": "{{selectedTask.title}}"
              },
              "events": null,
              "children": null
            },
            {
              "id": "taskDetailDescription",
              "node_type": "Text",
              "props": null,
              "bindings": {
                "text": "{{selectedTask.description}}"
              },
              "events": null,
              "children": null
            },
            {
              "id": "taskDetailStatus",
              "node_type": "Select",
              "props": {
                "options": "['Pending', 'In Progress', 'Completed']"
              },
              "bindings": {
                "value": "{{selectedTask.status}}"
              },
              "events": {
                "CHANGE": {
                  "action": "UPDATE_TASK_STATUS",
                  "target": "selectedTask.id",
                  "payload": {
                    "status": "{{value}}"
                  }
                }
              },
              "children": null
            },
            {
              "id": "closeDialogButton",
              "node_type": "Button",
              "props": {
                "label": "Close"
              },
              "bindings": null,
              "events": {
                "CLICK": {
                  "action": "HIDE_DIALOG",
                  "target": "taskDetailDialog",
                  "payload": null
                }
              },
              "children": null
            }
          ]
        }
      ]
    }
  ]
}
events.ts:104 [AutoUI Debug] Corrected list binding for node 'taskListView': from 'tasks' to 'tasks.data'
AutoUI.tsx:400 [AutoUI Debug] Layout after binding correction (before resolving): {
  "id": "root",
  "node_type": "Container",
  "props": null,
  "bindings": null,
  "events": null,
  "children": [
    {
      "id": "header",
      "node_type": "Header",
      "props": {
        "title": "Task Management Dashboard"
      },
      "bindings": null,
      "events": null,
      "children": null
    },
    {
      "id": "taskListView",
      "node_type": "ListView",
      "props": null,
      "bindings": {
        "data": "tasks.data"
      },
      "events": null,
      "children": [
        {
          "id": "taskItem",
          "node_type": "Card",
          "props": null,
          "bindings": null,
          "events": null,
          "children": [
            {
              "id": "taskTitle",
              "node_type": "Text",
              "props": null,
              "bindings": {
                "text": "{{item.title}}"
              },
              "events": null,
              "children": null
            },
            {
              "id": "taskStatus",
              "node_type": "Text",
              "props": null,
              "bindings": {
                "text": "{{item.status}}"
              },
              "events": null,
              "children": null
            },
            {
              "id": "viewDetailsButton",
              "node_type": "Button",
              "props": {
                "label": "View Details"
              },
              "bindings": null,
              "events": {
                "CLICK": {
                  "action": "SHOW_DIALOG",
                  "target": "taskDetailDialog",
                  "payload": {
                    "taskId": "{{item.id}}"
                  }
                }
              },
              "children": null
            }
          ]
        }
      ]
    },
    {
      "id": "taskDetailDialog",
      "node_type": "Dialog",
      "props": {
        "title": "Task Details"
      },
      "bindings": {
        "visible": "isTaskDetailDialogVisible"
      },
      "events": null,
      "children": [
        {
          "id": "taskDetailContainer",
          "node_type": "Container",
          "props": null,
          "bindings": null,
          "events": null,
          "children": [
            {
              "id": "taskDetailTitle",
              "node_type": "Heading",
              "props": null,
              "bindings": {
                "text": "{{selectedTask.title}}"
              },
              "events": null,
              "children": null
            },
            {
              "id": "taskDetailDescription",
              "node_type": "Text",
              "props": null,
              "bindings": {
                "text": "{{selectedTask.description}}"
              },
              "events": null,
              "children": null
            },
            {
              "id": "taskDetailStatus",
              "node_type": "Select",
              "props": {
                "options": "['Pending', 'In Progress', 'Completed']"
              },
              "bindings": {
                "value": "{{selectedTask.status}}"
              },
              "events": {
                "CHANGE": {
                  "action": "UPDATE_TASK_STATUS",
                  "target": "selectedTask.id",
                  "payload": {
                    "status": "{{value}}"
                  }
                }
              },
              "children": null
            },
            {
              "id": "closeDialogButton",
              "node_type": "Button",
              "props": {
                "label": "Close"
              },
              "bindings": null,
              "events": {
                "CLICK": {
                  "action": "HIDE_DIALOG",
                  "target": "taskDetailDialog",
                  "payload": null
                }
              },
              "children": null
            }
          ]
        }
      ]
    }
  ]
}
AutoUI.tsx:408 [AutoUI Debug] Resolved layout after bindings: {
  "id": "root",
  "node_type": "Container",
  "props": null,
  "bindings": null,
  "events": null,
  "children": [
    {
      "id": "header",
      "node_type": "Header",
      "props": {
        "title": "Task Management Dashboard"
      },
      "bindings": null,
      "events": null,
      "children": []
    },
    {
      "id": "taskListView",
      "node_type": "ListView",
      "props": {
        "data": [
          {
            "id": "1",
            "title": "Setup development environment",
            "description": "Install Node.js, TypeScript, and VS Code",
            "status": "completed",
            "priority": "high",
            "dueDate": "2023-12-31",
            "createdAt": "2023-12-01T10:00:00Z",
            "updatedAt": "2023-12-01T15:30:00Z"
          },
          {
            "id": "2",
            "title": "Create project structure",
            "description": "Set up initial files and directories",
            "status": "completed",
            "priority": "high",
            "dueDate": "2023-12-31",
            "createdAt": "2023-12-02T09:15:00Z",
            "updatedAt": "2023-12-02T11:45:00Z"
          },
          {
            "id": "3",
            "title": "Implement core features",
            "description": "Work on the main functionality",
            "status": "in_progress",
            "priority": "medium",
            "dueDate": "2024-01-15",
            "createdAt": "2023-12-05T08:30:00Z",
            "updatedAt": "2023-12-10T14:20:00Z"
          },
          {
            "id": "4",
            "title": "Write documentation",
            "description": "Create README and API docs",
            "status": "pending",
            "priority": "low",
            "dueDate": "2024-01-31",
            "createdAt": "2023-12-15T16:45:00Z",
            "updatedAt": null
          }
        ]
      },
      "bindings": {
        "data": "tasks.data"
      },
      "events": null,
      "children": [
        {
          "id": "taskItem-1",
          "node_type": "Card",
          "props": {
            "key": "1"
          },
          "bindings": null,
          "events": null,
          "children": [
            {
              "id": "taskItem-1-taskTitle",
              "node_type": "Text",
              "props": {
                "text": "Setup development environment"
              },
              "bindings": {
                "text": "{{item.title}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskItem-1-taskStatus",
              "node_type": "Text",
              "props": {
                "text": "completed"
              },
              "bindings": {
                "text": "{{item.status}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskItem-1-viewDetailsButton",
              "node_type": "Button",
              "props": {
                "label": "View Details"
              },
              "bindings": null,
              "events": {
                "CLICK": {
                  "action": "SHOW_DIALOG",
                  "target": "taskDetailDialog",
                  "payload": {
                    "taskId": "1"
                  }
                }
              },
              "children": []
            }
          ]
        },
        {
          "id": "taskItem-2",
          "node_type": "Card",
          "props": {
            "key": "2"
          },
          "bindings": null,
          "events": null,
          "children": [
            {
              "id": "taskItem-2-taskTitle",
              "node_type": "Text",
              "props": {
                "text": "Create project structure"
              },
              "bindings": {
                "text": "{{item.title}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskItem-2-taskStatus",
              "node_type": "Text",
              "props": {
                "text": "completed"
              },
              "bindings": {
                "text": "{{item.status}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskItem-2-viewDetailsButton",
              "node_type": "Button",
              "props": {
                "label": "View Details"
              },
              "bindings": null,
              "events": {
                "CLICK": {
                  "action": "SHOW_DIALOG",
                  "target": "taskDetailDialog",
                  "payload": {
                    "taskId": "2"
                  }
                }
              },
              "children": []
            }
          ]
        },
        {
          "id": "taskItem-3",
          "node_type": "Card",
          "props": {
            "key": "3"
          },
          "bindings": null,
          "events": null,
          "children": [
            {
              "id": "taskItem-3-taskTitle",
              "node_type": "Text",
              "props": {
                "text": "Implement core features"
              },
              "bindings": {
                "text": "{{item.title}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskItem-3-taskStatus",
              "node_type": "Text",
              "props": {
                "text": "in_progress"
              },
              "bindings": {
                "text": "{{item.status}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskItem-3-viewDetailsButton",
              "node_type": "Button",
              "props": {
                "label": "View Details"
              },
              "bindings": null,
              "events": {
                "CLICK": {
                  "action": "SHOW_DIALOG",
                  "target": "taskDetailDialog",
                  "payload": {
                    "taskId": "3"
                  }
                }
              },
              "children": []
            }
          ]
        },
        {
          "id": "taskItem-4",
          "node_type": "Card",
          "props": {
            "key": "4"
          },
          "bindings": null,
          "events": null,
          "children": [
            {
              "id": "taskItem-4-taskTitle",
              "node_type": "Text",
              "props": {
                "text": "Write documentation"
              },
              "bindings": {
                "text": "{{item.title}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskItem-4-taskStatus",
              "node_type": "Text",
              "props": {
                "text": "pending"
              },
              "bindings": {
                "text": "{{item.status}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskItem-4-viewDetailsButton",
              "node_type": "Button",
              "props": {
                "label": "View Details"
              },
              "bindings": null,
              "events": {
                "CLICK": {
                  "action": "SHOW_DIALOG",
                  "target": "taskDetailDialog",
                  "payload": {
                    "taskId": "4"
                  }
                }
              },
              "children": []
            }
          ]
        }
      ]
    },
    {
      "id": "taskDetailDialog",
      "node_type": "Dialog",
      "props": {
        "title": "Task Details"
      },
      "bindings": {
        "visible": "isTaskDetailDialogVisible"
      },
      "events": null,
      "children": [
        {
          "id": "taskDetailHeader",
          "node_type": "Heading",
          "props": null,
          "bindings": {
            "text": "{{selectedTask.title}}"
          },
          "events": null,
          "children": []
        },
        {
          "id": "taskDetailDescription",
          "node_type": "Text",
          "props": null,
          "bindings": {
            "text": "{{selectedTask.description}}"
          },
          "events": null,
          "children": []
        },
        {
          "id": "taskDetailStatus",
          "node_type": "Select",
          "props": {
            "options": "['Pending', 'In Progress', 'Completed']"
          },
          "bindings": {
            "value": "{{selectedTask.status}}"
          },
          "events": {
            "CHANGE": {
              "action": "UPDATE_TASK_STATUS",
              "target": "selectedTask.id",
              "payload": {}
            }
          },
          "children": []
        },
        {
          "id": "taskDetailSaveButton",
          "node_type": "Button",
          "props": {
            "label": "Save Changes"
          },
          "bindings": null,
          "events": {
            "CLICK": {
              "action": "SAVE_TASK_CHANGES",
              "target": "selectedTask.id",
              "payload": {}
            }
          },
          "children": []
        }
      ]
    }
  ]
}
AutoUI.tsx:314 [AutoUI.processEvent] Event for nodeId: taskItem-4-viewDetailsButton
AutoUI.tsx:330 [AutoUI.processEvent] Using currentLayoutViaRef snapshot (taskListView children): [
  {
    "id": "taskItem-1",
    "children": [
      {
        "id": "taskItem-1-taskTitle",
        "props": {
          "text": "Setup development environment"
        },
        "events": null
      },
      {
        "id": "taskItem-1-taskStatus",
        "props": {
          "text": "completed"
        },
        "events": null
      },
      {
        "id": "taskItem-1-viewDetailsButton",
        "props": {
          "label": "View Details"
        },
        "events": {
          "CLICK": {
            "action": "SHOW_DIALOG",
            "target": "taskDetailDialog",
            "payload": {
              "taskId": "1"
            }
          }
        }
      }
    ]
  },
  {
    "id": "taskItem-2",
    "children": [
      {
        "id": "taskItem-2-taskTitle",
        "props": {
          "text": "Create project structure"
        },
        "events": null
      },
      {
        "id": "taskItem-2-taskStatus",
        "props": {
          "text": "completed"
        },
        "events": null
      },
      {
        "id": "taskItem-2-viewDetailsButton",
        "props": {
          "label": "View Details"
        },
        "events": {
          "CLICK": {
            "action": "SHOW_DIALOG",
            "target": "taskDetailDialog",
            "payload": {
              "taskId": "2"
            }
          }
        }
      }
    ]
  },
  {
    "id": "taskItem-3",
    "children": [
      {
        "id": "taskItem-3-taskTitle",
        "props": {
          "text": "Implement core features"
        },
        "events": null
      },
      {
        "id": "taskItem-3-taskStatus",
        "props": {
          "text": "in_progress"
        },
        "events": null
      },
      {
        "id": "taskItem-3-viewDetailsButton",
        "props": {
          "label": "View Details"
        },
        "events": {
          "CLICK": {
            "action": "SHOW_DIALOG",
            "target": "taskDetailDialog",
            "payload": {
              "taskId": "3"
            }
          }
        }
      }
    ]
  },
  {
    "id": "taskItem-4",
    "children": [
      {
        "id": "taskItem-4-taskTitle",
        "props": {
          "text": "Write documentation"
        },
        "events": null
      },
      {
        "id": "taskItem-4-taskStatus",
        "props": {
          "text": "pending"
        },
        "events": null
      },
      {
        "id": "taskItem-4-viewDetailsButton",
        "props": {
          "label": "View Details"
        },
        "events": {
          "CLICK": {
            "action": "SHOW_DIALOG",
            "target": "taskDetailDialog",
            "payload": {
              "taskId": "4"
            }
          }
        }
      }
    ]
  }
]
bindings.ts:504 [executeAction] SHOW_DIALOG: Set selectedTask to: {id: '4', title: 'Write documentation', description: 'Create README and API docs', status: 'pending', priority: 'low', …}
bindings.ts:520 [executeAction] SHOW_DIALOG: set isTaskDetailDialogVisible to true. Dialog target: taskDetailDialog, Payload: {taskId: '4'}
state.ts:59 [state.ts handleEvent] About to call router.resolveRoute. enablePartialUpdates: false
state.ts:60 [state.ts handleEvent] layoutForRouting ID (if exists): root
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'PLAN_START', timestamp: 1747163532128, plannerInput: {…}}
AutoUI.tsx:387 [AutoUI Debug] DataContext before resolving bindings: {
  "tasks": {
    "schema": {
      "tableName": "tasks",
      "columns": {
        "id": {
          "type": "uuid",
          "primaryKey": true
        },
        "title": {
          "type": "text",
          "notNull": true
        },
        "description": {
          "type": "text"
        },
        "status": {
          "type": "text",
          "notNull": true,
          "default": "pending"
        },
        "priority": {
          "type": "text",
          "notNull": true,
          "default": "medium"
        },
        "dueDate": {
          "type": "date"
        },
        "createdAt": {
          "type": "timestamp",
          "notNull": true,
          "default": "now()"
        },
        "updatedAt": {
          "type": "timestamp"
        }
      },
      "sampleData": [
        {
          "id": "1",
          "title": "Setup development environment",
          "description": "Install Node.js, TypeScript, and VS Code",
          "status": "completed",
          "priority": "high",
          "dueDate": "2023-12-31",
          "createdAt": "2023-12-01T10:00:00Z",
          "updatedAt": "2023-12-01T15:30:00Z"
        },
        {
          "id": "2",
          "title": "Create project structure",
          "description": "Set up initial files and directories",
          "status": "completed",
          "priority": "high",
          "dueDate": "2023-12-31",
          "createdAt": "2023-12-02T09:15:00Z",
          "updatedAt": "2023-12-02T11:45:00Z"
        },
        {
          "id": "3",
          "title": "Implement core features",
          "description": "Work on the main functionality",
          "status": "in_progress",
          "priority": "medium",
          "dueDate": "2024-01-15",
          "createdAt": "2023-12-05T08:30:00Z",
          "updatedAt": "2023-12-10T14:20:00Z"
        },
        {
          "id": "4",
          "title": "Write documentation",
          "description": "Create README and API docs",
          "status": "pending",
          "priority": "low",
          "dueDate": "2024-01-31",
          "createdAt": "2023-12-15T16:45:00Z",
          "updatedAt": null
        }
      ]
    },
    "data": [
      {
        "id": "1",
        "title": "Setup development environment",
        "description": "Install Node.js, TypeScript, and VS Code",
        "status": "completed",
        "priority": "high",
        "dueDate": "2023-12-31",
        "createdAt": "2023-12-01T10:00:00Z",
        "updatedAt": "2023-12-01T15:30:00Z"
      },
      {
        "id": "2",
        "title": "Create project structure",
        "description": "Set up initial files and directories",
        "status": "completed",
        "priority": "high",
        "dueDate": "2023-12-31",
        "createdAt": "2023-12-02T09:15:00Z",
        "updatedAt": "2023-12-02T11:45:00Z"
      },
      {
        "id": "3",
        "title": "Implement core features",
        "description": "Work on the main functionality",
        "status": "in_progress",
        "priority": "medium",
        "dueDate": "2024-01-15",
        "createdAt": "2023-12-05T08:30:00Z",
        "updatedAt": "2023-12-10T14:20:00Z"
      },
      {
        "id": "4",
        "title": "Write documentation",
        "description": "Create README and API docs",
        "status": "pending",
        "priority": "low",
        "dueDate": "2024-01-31",
        "createdAt": "2023-12-15T16:45:00Z",
        "updatedAt": null
      }
    ],
    "selected": null
  },
  "users": {
    "schema": {
      "tableName": "users",
      "columns": {
        "id": {
          "type": "uuid",
          "primaryKey": true
        },
        "name": {
          "type": "text",
          "notNull": true
        },
        "email": {
          "type": "text",
          "notNull": true,
          "unique": true
        },
        "role": {
          "type": "text",
          "notNull": true,
          "default": "user"
        },
        "createdAt": {
          "type": "timestamp",
          "notNull": true,
          "default": "now()"
        }
      },
      "sampleData": [
        {
          "id": "1",
          "name": "John Doe",
          "email": "john@example.com",
          "role": "admin",
          "createdAt": "2023-10-01T00:00:00Z"
        },
        {
          "id": "2",
          "name": "Jane Smith",
          "email": "jane@example.com",
          "role": "user",
          "createdAt": "2023-10-15T08:30:00Z"
        },
        {
          "id": "3",
          "name": "Bob Johnson",
          "email": "bob@example.com",
          "role": "user",
          "createdAt": "2023-11-05T14:45:00Z"
        }
      ]
    },
    "data": [
      {
        "id": "1",
        "name": "John Doe",
        "email": "john@example.com",
        "role": "admin",
        "createdAt": "2023-10-01T00:00:00Z"
      },
      {
        "id": "2",
        "name": "Jane Smith",
        "email": "jane@example.com",
        "role": "user",
        "createdAt": "2023-10-15T08:30:00Z"
      },
      {
        "id": "3",
        "name": "Bob Johnson",
        "email": "bob@example.com",
        "role": "user",
        "createdAt": "2023-11-05T14:45:00Z"
      }
    ],
    "selected": null
  },
  "user": {
    "id": "1",
    "name": "John Doe",
    "role": "admin"
  },
  "selectedTask": {
    "id": "4",
    "title": "Write documentation",
    "description": "Create README and API docs",
    "status": "pending",
    "priority": "low",
    "dueDate": "2024-01-31",
    "createdAt": "2023-12-15T16:45:00Z",
    "updatedAt": null
  },
  "isTaskDetailDialogVisible": true
}
AutoUI.tsx:395 [AutoUI Debug] Raw layout before resolving (from planner): {
  "id": "root",
  "node_type": "Container",
  "props": null,
  "bindings": null,
  "events": null,
  "children": [
    {
      "id": "header",
      "node_type": "Header",
      "props": {
        "title": "Task Management Dashboard"
      },
      "bindings": null,
      "events": null,
      "children": null
    },
    {
      "id": "taskListView",
      "node_type": "ListView",
      "props": null,
      "bindings": {
        "data": "tasks"
      },
      "events": null,
      "children": [
        {
          "id": "taskItem",
          "node_type": "Card",
          "props": null,
          "bindings": null,
          "events": null,
          "children": [
            {
              "id": "taskTitle",
              "node_type": "Text",
              "props": null,
              "bindings": {
                "text": "{{item.title}}"
              },
              "events": null,
              "children": null
            },
            {
              "id": "taskStatus",
              "node_type": "Text",
              "props": null,
              "bindings": {
                "text": "{{item.status}}"
              },
              "events": null,
              "children": null
            },
            {
              "id": "viewDetailsButton",
              "node_type": "Button",
              "props": {
                "label": "View Details"
              },
              "bindings": null,
              "events": {
                "CLICK": {
                  "action": "SHOW_DIALOG",
                  "target": "taskDetailDialog",
                  "payload": {
                    "taskId": "{{item.id}}"
                  }
                }
              },
              "children": null
            }
          ]
        }
      ]
    },
    {
      "id": "taskDetailDialog",
      "node_type": "Dialog",
      "props": {
        "title": "Task Details"
      },
      "bindings": {
        "visible": "isTaskDetailDialogVisible"
      },
      "events": null,
      "children": [
        {
          "id": "taskDetailContainer",
          "node_type": "Container",
          "props": null,
          "bindings": null,
          "events": null,
          "children": [
            {
              "id": "taskDetailTitle",
              "node_type": "Heading",
              "props": null,
              "bindings": {
                "text": "{{selectedTask.title}}"
              },
              "events": null,
              "children": null
            },
            {
              "id": "taskDetailDescription",
              "node_type": "Text",
              "props": null,
              "bindings": {
                "text": "{{selectedTask.description}}"
              },
              "events": null,
              "children": null
            },
            {
              "id": "taskDetailStatus",
              "node_type": "Select",
              "props": {
                "options": "['Pending', 'In Progress', 'Completed']"
              },
              "bindings": {
                "value": "{{selectedTask.status}}"
              },
              "events": {
                "CHANGE": {
                  "action": "UPDATE_TASK_STATUS",
                  "target": "selectedTask.id",
                  "payload": {
                    "status": "{{value}}"
                  }
                }
              },
              "children": null
            },
            {
              "id": "closeDialogButton",
              "node_type": "Button",
              "props": {
                "label": "Close"
              },
              "bindings": null,
              "events": {
                "CLICK": {
                  "action": "HIDE_DIALOG",
                  "target": "taskDetailDialog",
                  "payload": null
                }
              },
              "children": null
            }
          ]
        }
      ]
    }
  ]
}
events.ts:104 [AutoUI Debug] Corrected list binding for node 'taskListView': from 'tasks' to 'tasks.data'
AutoUI.tsx:400 [AutoUI Debug] Layout after binding correction (before resolving): {
  "id": "root",
  "node_type": "Container",
  "props": null,
  "bindings": null,
  "events": null,
  "children": [
    {
      "id": "header",
      "node_type": "Header",
      "props": {
        "title": "Task Management Dashboard"
      },
      "bindings": null,
      "events": null,
      "children": null
    },
    {
      "id": "taskListView",
      "node_type": "ListView",
      "props": null,
      "bindings": {
        "data": "tasks.data"
      },
      "events": null,
      "children": [
        {
          "id": "taskItem",
          "node_type": "Card",
          "props": null,
          "bindings": null,
          "events": null,
          "children": [
            {
              "id": "taskTitle",
              "node_type": "Text",
              "props": null,
              "bindings": {
                "text": "{{item.title}}"
              },
              "events": null,
              "children": null
            },
            {
              "id": "taskStatus",
              "node_type": "Text",
              "props": null,
              "bindings": {
                "text": "{{item.status}}"
              },
              "events": null,
              "children": null
            },
            {
              "id": "viewDetailsButton",
              "node_type": "Button",
              "props": {
                "label": "View Details"
              },
              "bindings": null,
              "events": {
                "CLICK": {
                  "action": "SHOW_DIALOG",
                  "target": "taskDetailDialog",
                  "payload": {
                    "taskId": "{{item.id}}"
                  }
                }
              },
              "children": null
            }
          ]
        }
      ]
    },
    {
      "id": "taskDetailDialog",
      "node_type": "Dialog",
      "props": {
        "title": "Task Details"
      },
      "bindings": {
        "visible": "isTaskDetailDialogVisible"
      },
      "events": null,
      "children": [
        {
          "id": "taskDetailContainer",
          "node_type": "Container",
          "props": null,
          "bindings": null,
          "events": null,
          "children": [
            {
              "id": "taskDetailTitle",
              "node_type": "Heading",
              "props": null,
              "bindings": {
                "text": "{{selectedTask.title}}"
              },
              "events": null,
              "children": null
            },
            {
              "id": "taskDetailDescription",
              "node_type": "Text",
              "props": null,
              "bindings": {
                "text": "{{selectedTask.description}}"
              },
              "events": null,
              "children": null
            },
            {
              "id": "taskDetailStatus",
              "node_type": "Select",
              "props": {
                "options": "['Pending', 'In Progress', 'Completed']"
              },
              "bindings": {
                "value": "{{selectedTask.status}}"
              },
              "events": {
                "CHANGE": {
                  "action": "UPDATE_TASK_STATUS",
                  "target": "selectedTask.id",
                  "payload": {
                    "status": "{{value}}"
                  }
                }
              },
              "children": null
            },
            {
              "id": "closeDialogButton",
              "node_type": "Button",
              "props": {
                "label": "Close"
              },
              "bindings": null,
              "events": {
                "CLICK": {
                  "action": "HIDE_DIALOG",
                  "target": "taskDetailDialog",
                  "payload": null
                }
              },
              "children": null
            }
          ]
        }
      ]
    }
  ]
}
shadcn.tsx:326 [Adapter Debug] Rendering ListView: id=taskListView, props= {data: Array(4)}
shadcn.tsx:800 [Adapter Debug] Rendering Dialog: id=taskDetailDialog, props= {title: 'Task Details'} isOpen=false
shadcn.tsx:263 [Adapter Debug] Rendering Container: id=root, props= null
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'RENDER_COMPLETE', timestamp: 1747163532136, layout: {…}, renderTimeMs: 2}
bindings.ts:194 [processBinding Debug] Processing PATH string: "Task Management Dashboard", Has itemData: false
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'BINDING_RESOLUTION_COMPLETE', timestamp: 1747163532137, originalLayout: {…}, resolvedLayout: {…}}
bindings.ts:194 [processBinding Debug] Processing PATH string: "tasks.data", Has itemData: false
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.title}}", Path: "item.title", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '1', title: 'Setup development environment', description: 'Install Node.js, TypeScript, and VS Code', status: 'completed', priority: 'high', …}
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.status}}", Path: "item.status", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '1', title: 'Setup development environment', description: 'Install Node.js, TypeScript, and VS Code', status: 'completed', priority: 'high', …}
bindings.ts:194 [processBinding Debug] Processing PATH string: "View Details", Has itemData: true
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.id}}", Path: "item.id", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '1', title: 'Setup development environment', description: 'Install Node.js, TypeScript, and VS Code', status: 'completed', priority: 'high', …}
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.title}}", Path: "item.title", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '2', title: 'Create project structure', description: 'Set up initial files and directories', status: 'completed', priority: 'high', …}
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.status}}", Path: "item.status", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '2', title: 'Create project structure', description: 'Set up initial files and directories', status: 'completed', priority: 'high', …}
bindings.ts:194 [processBinding Debug] Processing PATH string: "View Details", Has itemData: true
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.id}}", Path: "item.id", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '2', title: 'Create project structure', description: 'Set up initial files and directories', status: 'completed', priority: 'high', …}
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.title}}", Path: "item.title", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '3', title: 'Implement core features', description: 'Work on the main functionality', status: 'in_progress', priority: 'medium', …}
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.status}}", Path: "item.status", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '3', title: 'Implement core features', description: 'Work on the main functionality', status: 'in_progress', priority: 'medium', …}
bindings.ts:194 [processBinding Debug] Processing PATH string: "View Details", Has itemData: true
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.id}}", Path: "item.id", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '3', title: 'Implement core features', description: 'Work on the main functionality', status: 'in_progress', priority: 'medium', …}
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.title}}", Path: "item.title", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '4', title: 'Write documentation', description: 'Create README and API docs', status: 'pending', priority: 'low', …}
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.status}}", Path: "item.status", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '4', title: 'Write documentation', description: 'Create README and API docs', status: 'pending', priority: 'low', …}
bindings.ts:194 [processBinding Debug] Processing PATH string: "View Details", Has itemData: true
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.id}}", Path: "item.id", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '4', title: 'Write documentation', description: 'Create README and API docs', status: 'pending', priority: 'low', …}
bindings.ts:194 [processBinding Debug] Processing PATH string: "Task Details", Has itemData: false
bindings.ts:194 [processBinding Debug] Processing PATH string: "isTaskDetailDialogVisible", Has itemData: false
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'PLAN_ERROR', timestamp: 1747163532140, error: Error: ActionRouter did not provide a prompt to callPlannerLLM.
    at callPlannerLLM (webpack-inte…}
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{selectedTask.title}}", Path: "selectedTask.title", Has itemData: false
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'BINDING_RESOLUTION_COMPLETE', timestamp: 1747163532144, originalLayout: {…}, resolvedLayout: {…}}
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{selectedTask.description}}", Path: "selectedTask.description", Has itemData: false
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'BINDING_RESOLUTION_COMPLETE', timestamp: 1747163532144, originalLayout: {…}, resolvedLayout: {…}}
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{selectedTask.status}}", Path: "selectedTask.status", Has itemData: false
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{value}}", Path: "value", Has itemData: false
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'BINDING_RESOLUTION_COMPLETE', timestamp: 1747163532144, originalLayout: {…}, resolvedLayout: {…}}
bindings.ts:194 [processBinding Debug] Processing PATH string: "Close", Has itemData: false
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'BINDING_RESOLUTION_COMPLETE', timestamp: 1747163532144, originalLayout: {…}, resolvedLayout: {…}}
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'BINDING_RESOLUTION_COMPLETE', timestamp: 1747163532147, originalLayout: {…}, resolvedLayout: {…}}
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'BINDING_RESOLUTION_COMPLETE', timestamp: 1747163532147, originalLayout: {…}, resolvedLayout: {…}}
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'BINDING_RESOLUTION_COMPLETE', timestamp: 1747163532147, originalLayout: {…}, resolvedLayout: {…}}
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'BINDING_RESOLUTION_COMPLETE', timestamp: 1747163532147, originalLayout: {…}, resolvedLayout: {…}}
AutoUI.tsx:408 [AutoUI Debug] Resolved layout after bindings: {
  "id": "root",
  "node_type": "Container",
  "props": null,
  "bindings": null,
  "events": null,
  "children": [
    {
      "id": "header",
      "node_type": "Header",
      "props": {
        "title": "Task Management Dashboard"
      },
      "bindings": null,
      "events": null,
      "children": []
    },
    {
      "id": "taskListView",
      "node_type": "ListView",
      "props": {
        "data": [
          {
            "id": "1",
            "title": "Setup development environment",
            "description": "Install Node.js, TypeScript, and VS Code",
            "status": "completed",
            "priority": "high",
            "dueDate": "2023-12-31",
            "createdAt": "2023-12-01T10:00:00Z",
            "updatedAt": "2023-12-01T15:30:00Z"
          },
          {
            "id": "2",
            "title": "Create project structure",
            "description": "Set up initial files and directories",
            "status": "completed",
            "priority": "high",
            "dueDate": "2023-12-31",
            "createdAt": "2023-12-02T09:15:00Z",
            "updatedAt": "2023-12-02T11:45:00Z"
          },
          {
            "id": "3",
            "title": "Implement core features",
            "description": "Work on the main functionality",
            "status": "in_progress",
            "priority": "medium",
            "dueDate": "2024-01-15",
            "createdAt": "2023-12-05T08:30:00Z",
            "updatedAt": "2023-12-10T14:20:00Z"
          },
          {
            "id": "4",
            "title": "Write documentation",
            "description": "Create README and API docs",
            "status": "pending",
            "priority": "low",
            "dueDate": "2024-01-31",
            "createdAt": "2023-12-15T16:45:00Z",
            "updatedAt": null
          }
        ]
      },
      "bindings": {
        "data": "tasks.data"
      },
      "events": null,
      "children": [
        {
          "id": "taskItem-1",
          "node_type": "Card",
          "props": {
            "key": "1"
          },
          "bindings": null,
          "events": null,
          "children": [
            {
              "id": "taskItem-1-taskTitle",
              "node_type": "Text",
              "props": {
                "text": "Setup development environment"
              },
              "bindings": {
                "text": "{{item.title}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskItem-1-taskStatus",
              "node_type": "Text",
              "props": {
                "text": "completed"
              },
              "bindings": {
                "text": "{{item.status}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskItem-1-viewDetailsButton",
              "node_type": "Button",
              "props": {
                "label": "View Details"
              },
              "bindings": null,
              "events": {
                "CLICK": {
                  "action": "SHOW_DIALOG",
                  "target": "taskDetailDialog",
                  "payload": {
                    "taskId": "1"
                  }
                }
              },
              "children": []
            }
          ]
        },
        {
          "id": "taskItem-2",
          "node_type": "Card",
          "props": {
            "key": "2"
          },
          "bindings": null,
          "events": null,
          "children": [
            {
              "id": "taskItem-2-taskTitle",
              "node_type": "Text",
              "props": {
                "text": "Create project structure"
              },
              "bindings": {
                "text": "{{item.title}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskItem-2-taskStatus",
              "node_type": "Text",
              "props": {
                "text": "completed"
              },
              "bindings": {
                "text": "{{item.status}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskItem-2-viewDetailsButton",
              "node_type": "Button",
              "props": {
                "label": "View Details"
              },
              "bindings": null,
              "events": {
                "CLICK": {
                  "action": "SHOW_DIALOG",
                  "target": "taskDetailDialog",
                  "payload": {
                    "taskId": "2"
                  }
                }
              },
              "children": []
            }
          ]
        },
        {
          "id": "taskItem-3",
          "node_type": "Card",
          "props": {
            "key": "3"
          },
          "bindings": null,
          "events": null,
          "children": [
            {
              "id": "taskItem-3-taskTitle",
              "node_type": "Text",
              "props": {
                "text": "Implement core features"
              },
              "bindings": {
                "text": "{{item.title}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskItem-3-taskStatus",
              "node_type": "Text",
              "props": {
                "text": "in_progress"
              },
              "bindings": {
                "text": "{{item.status}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskItem-3-viewDetailsButton",
              "node_type": "Button",
              "props": {
                "label": "View Details"
              },
              "bindings": null,
              "events": {
                "CLICK": {
                  "action": "SHOW_DIALOG",
                  "target": "taskDetailDialog",
                  "payload": {
                    "taskId": "3"
                  }
                }
              },
              "children": []
            }
          ]
        },
        {
          "id": "taskItem-4",
          "node_type": "Card",
          "props": {
            "key": "4"
          },
          "bindings": null,
          "events": null,
          "children": [
            {
              "id": "taskItem-4-taskTitle",
              "node_type": "Text",
              "props": {
                "text": "Write documentation"
              },
              "bindings": {
                "text": "{{item.title}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskItem-4-taskStatus",
              "node_type": "Text",
              "props": {
                "text": "pending"
              },
              "bindings": {
                "text": "{{item.status}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskItem-4-viewDetailsButton",
              "node_type": "Button",
              "props": {
                "label": "View Details"
              },
              "bindings": null,
              "events": {
                "CLICK": {
                  "action": "SHOW_DIALOG",
                  "target": "taskDetailDialog",
                  "payload": {
                    "taskId": "4"
                  }
                }
              },
              "children": []
            }
          ]
        }
      ]
    },
    {
      "id": "taskDetailDialog",
      "node_type": "Dialog",
      "props": {
        "title": "Task Details",
        "visible": true
      },
      "bindings": {
        "visible": "isTaskDetailDialogVisible"
      },
      "events": null,
      "children": [
        {
          "id": "taskDetailContainer",
          "node_type": "Container",
          "props": null,
          "bindings": null,
          "events": null,
          "children": [
            {
              "id": "taskDetailTitle",
              "node_type": "Heading",
              "props": {
                "text": "Write documentation"
              },
              "bindings": {
                "text": "{{selectedTask.title}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskDetailDescription",
              "node_type": "Text",
              "props": {
                "text": "Create README and API docs"
              },
              "bindings": {
                "text": "{{selectedTask.description}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskDetailStatus",
              "node_type": "Select",
              "props": {
                "options": "['Pending', 'In Progress', 'Completed']",
                "value": "pending"
              },
              "bindings": {
                "value": "{{selectedTask.status}}"
              },
              "events": {
                "CHANGE": {
                  "action": "UPDATE_TASK_STATUS",
                  "target": "selectedTask.id",
                  "payload": {}
                }
              },
              "children": []
            },
            {
              "id": "closeDialogButton",
              "node_type": "Button",
              "props": {
                "label": "Close"
              },
              "bindings": null,
              "events": {
                "CLICK": {
                  "action": "HIDE_DIALOG",
                  "target": "taskDetailDialog",
                  "payload": null
                }
              },
              "children": []
            }
          ]
        }
      ]
    }
  ]
}
AutoUI.tsx:314 [AutoUI.processEvent] Event for nodeId: taskItem-4-viewDetailsButton
AutoUI.tsx:330 [AutoUI.processEvent] Using currentLayoutViaRef snapshot (taskListView children): [
  {
    "id": "taskItem-1",
    "children": [
      {
        "id": "taskItem-1-taskTitle",
        "props": {
          "text": "Setup development environment"
        },
        "events": null
      },
      {
        "id": "taskItem-1-taskStatus",
        "props": {
          "text": "completed"
        },
        "events": null
      },
      {
        "id": "taskItem-1-viewDetailsButton",
        "props": {
          "label": "View Details"
        },
        "events": {
          "CLICK": {
            "action": "SHOW_DIALOG",
            "target": "taskDetailDialog",
            "payload": {
              "taskId": "1"
            }
          }
        }
      }
    ]
  },
  {
    "id": "taskItem-2",
    "children": [
      {
        "id": "taskItem-2-taskTitle",
        "props": {
          "text": "Create project structure"
        },
        "events": null
      },
      {
        "id": "taskItem-2-taskStatus",
        "props": {
          "text": "completed"
        },
        "events": null
      },
      {
        "id": "taskItem-2-viewDetailsButton",
        "props": {
          "label": "View Details"
        },
        "events": {
          "CLICK": {
            "action": "SHOW_DIALOG",
            "target": "taskDetailDialog",
            "payload": {
              "taskId": "2"
            }
          }
        }
      }
    ]
  },
  {
    "id": "taskItem-3",
    "children": [
      {
        "id": "taskItem-3-taskTitle",
        "props": {
          "text": "Implement core features"
        },
        "events": null
      },
      {
        "id": "taskItem-3-taskStatus",
        "props": {
          "text": "in_progress"
        },
        "events": null
      },
      {
        "id": "taskItem-3-viewDetailsButton",
        "props": {
          "label": "View Details"
        },
        "events": {
          "CLICK": {
            "action": "SHOW_DIALOG",
            "target": "taskDetailDialog",
            "payload": {
              "taskId": "3"
            }
          }
        }
      }
    ]
  },
  {
    "id": "taskItem-4",
    "children": [
      {
        "id": "taskItem-4-taskTitle",
        "props": {
          "text": "Write documentation"
        },
        "events": null
      },
      {
        "id": "taskItem-4-taskStatus",
        "props": {
          "text": "pending"
        },
        "events": null
      },
      {
        "id": "taskItem-4-viewDetailsButton",
        "props": {
          "label": "View Details"
        },
        "events": {
          "CLICK": {
            "action": "SHOW_DIALOG",
            "target": "taskDetailDialog",
            "payload": {
              "taskId": "4"
            }
          }
        }
      }
    ]
  }
]
bindings.ts:504 [executeAction] SHOW_DIALOG: Set selectedTask to: {id: '4', title: 'Write documentation', description: 'Create README and API docs', status: 'pending', priority: 'low', …}
bindings.ts:520 [executeAction] SHOW_DIALOG: set isTaskDetailDialogVisible to true. Dialog target: taskDetailDialog, Payload: {taskId: '4'}
state.ts:59 [state.ts handleEvent] About to call router.resolveRoute. enablePartialUpdates: false
state.ts:60 [state.ts handleEvent] layoutForRouting ID (if exists): root
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'PLAN_START', timestamp: 1747163534367, plannerInput: {…}}
AutoUI.tsx:387 [AutoUI Debug] DataContext before resolving bindings: {
  "tasks": {
    "schema": {
      "tableName": "tasks",
      "columns": {
        "id": {
          "type": "uuid",
          "primaryKey": true
        },
        "title": {
          "type": "text",
          "notNull": true
        },
        "description": {
          "type": "text"
        },
        "status": {
          "type": "text",
          "notNull": true,
          "default": "pending"
        },
        "priority": {
          "type": "text",
          "notNull": true,
          "default": "medium"
        },
        "dueDate": {
          "type": "date"
        },
        "createdAt": {
          "type": "timestamp",
          "notNull": true,
          "default": "now()"
        },
        "updatedAt": {
          "type": "timestamp"
        }
      },
      "sampleData": [
        {
          "id": "1",
          "title": "Setup development environment",
          "description": "Install Node.js, TypeScript, and VS Code",
          "status": "completed",
          "priority": "high",
          "dueDate": "2023-12-31",
          "createdAt": "2023-12-01T10:00:00Z",
          "updatedAt": "2023-12-01T15:30:00Z"
        },
        {
          "id": "2",
          "title": "Create project structure",
          "description": "Set up initial files and directories",
          "status": "completed",
          "priority": "high",
          "dueDate": "2023-12-31",
          "createdAt": "2023-12-02T09:15:00Z",
          "updatedAt": "2023-12-02T11:45:00Z"
        },
        {
          "id": "3",
          "title": "Implement core features",
          "description": "Work on the main functionality",
          "status": "in_progress",
          "priority": "medium",
          "dueDate": "2024-01-15",
          "createdAt": "2023-12-05T08:30:00Z",
          "updatedAt": "2023-12-10T14:20:00Z"
        },
        {
          "id": "4",
          "title": "Write documentation",
          "description": "Create README and API docs",
          "status": "pending",
          "priority": "low",
          "dueDate": "2024-01-31",
          "createdAt": "2023-12-15T16:45:00Z",
          "updatedAt": null
        }
      ]
    },
    "data": [
      {
        "id": "1",
        "title": "Setup development environment",
        "description": "Install Node.js, TypeScript, and VS Code",
        "status": "completed",
        "priority": "high",
        "dueDate": "2023-12-31",
        "createdAt": "2023-12-01T10:00:00Z",
        "updatedAt": "2023-12-01T15:30:00Z"
      },
      {
        "id": "2",
        "title": "Create project structure",
        "description": "Set up initial files and directories",
        "status": "completed",
        "priority": "high",
        "dueDate": "2023-12-31",
        "createdAt": "2023-12-02T09:15:00Z",
        "updatedAt": "2023-12-02T11:45:00Z"
      },
      {
        "id": "3",
        "title": "Implement core features",
        "description": "Work on the main functionality",
        "status": "in_progress",
        "priority": "medium",
        "dueDate": "2024-01-15",
        "createdAt": "2023-12-05T08:30:00Z",
        "updatedAt": "2023-12-10T14:20:00Z"
      },
      {
        "id": "4",
        "title": "Write documentation",
        "description": "Create README and API docs",
        "status": "pending",
        "priority": "low",
        "dueDate": "2024-01-31",
        "createdAt": "2023-12-15T16:45:00Z",
        "updatedAt": null
      }
    ],
    "selected": null
  },
  "users": {
    "schema": {
      "tableName": "users",
      "columns": {
        "id": {
          "type": "uuid",
          "primaryKey": true
        },
        "name": {
          "type": "text",
          "notNull": true
        },
        "email": {
          "type": "text",
          "notNull": true,
          "unique": true
        },
        "role": {
          "type": "text",
          "notNull": true,
          "default": "user"
        },
        "createdAt": {
          "type": "timestamp",
          "notNull": true,
          "default": "now()"
        }
      },
      "sampleData": [
        {
          "id": "1",
          "name": "John Doe",
          "email": "john@example.com",
          "role": "admin",
          "createdAt": "2023-10-01T00:00:00Z"
        },
        {
          "id": "2",
          "name": "Jane Smith",
          "email": "jane@example.com",
          "role": "user",
          "createdAt": "2023-10-15T08:30:00Z"
        },
        {
          "id": "3",
          "name": "Bob Johnson",
          "email": "bob@example.com",
          "role": "user",
          "createdAt": "2023-11-05T14:45:00Z"
        }
      ]
    },
    "data": [
      {
        "id": "1",
        "name": "John Doe",
        "email": "john@example.com",
        "role": "admin",
        "createdAt": "2023-10-01T00:00:00Z"
      },
      {
        "id": "2",
        "name": "Jane Smith",
        "email": "jane@example.com",
        "role": "user",
        "createdAt": "2023-10-15T08:30:00Z"
      },
      {
        "id": "3",
        "name": "Bob Johnson",
        "email": "bob@example.com",
        "role": "user",
        "createdAt": "2023-11-05T14:45:00Z"
      }
    ],
    "selected": null
  },
  "user": {
    "id": "1",
    "name": "John Doe",
    "role": "admin"
  },
  "selectedTask": {
    "id": "4",
    "title": "Write documentation",
    "description": "Create README and API docs",
    "status": "pending",
    "priority": "low",
    "dueDate": "2024-01-31",
    "createdAt": "2023-12-15T16:45:00Z",
    "updatedAt": null
  },
  "isTaskDetailDialogVisible": true
}
AutoUI.tsx:395 [AutoUI Debug] Raw layout before resolving (from planner): {
  "id": "root",
  "node_type": "Container",
  "props": null,
  "bindings": null,
  "events": null,
  "children": [
    {
      "id": "header",
      "node_type": "Header",
      "props": {
        "title": "Task Management Dashboard"
      },
      "bindings": null,
      "events": null,
      "children": null
    },
    {
      "id": "taskListView",
      "node_type": "ListView",
      "props": null,
      "bindings": {
        "data": "tasks"
      },
      "events": null,
      "children": [
        {
          "id": "taskItem",
          "node_type": "Card",
          "props": null,
          "bindings": null,
          "events": null,
          "children": [
            {
              "id": "taskTitle",
              "node_type": "Text",
              "props": null,
              "bindings": {
                "text": "{{item.title}}"
              },
              "events": null,
              "children": null
            },
            {
              "id": "taskStatus",
              "node_type": "Text",
              "props": null,
              "bindings": {
                "text": "{{item.status}}"
              },
              "events": null,
              "children": null
            },
            {
              "id": "viewDetailsButton",
              "node_type": "Button",
              "props": {
                "label": "View Details"
              },
              "bindings": null,
              "events": {
                "CLICK": {
                  "action": "SHOW_DIALOG",
                  "target": "taskDetailDialog",
                  "payload": {
                    "taskId": "{{item.id}}"
                  }
                }
              },
              "children": null
            }
          ]
        }
      ]
    },
    {
      "id": "taskDetailDialog",
      "node_type": "Dialog",
      "props": {
        "title": "Task Details"
      },
      "bindings": {
        "visible": "isTaskDetailDialogVisible"
      },
      "events": null,
      "children": [
        {
          "id": "taskDetailContainer",
          "node_type": "Container",
          "props": null,
          "bindings": null,
          "events": null,
          "children": [
            {
              "id": "taskDetailTitle",
              "node_type": "Heading",
              "props": null,
              "bindings": {
                "text": "{{selectedTask.title}}"
              },
              "events": null,
              "children": null
            },
            {
              "id": "taskDetailDescription",
              "node_type": "Text",
              "props": null,
              "bindings": {
                "text": "{{selectedTask.description}}"
              },
              "events": null,
              "children": null
            },
            {
              "id": "taskDetailStatus",
              "node_type": "Select",
              "props": {
                "options": "['Pending', 'In Progress', 'Completed']"
              },
              "bindings": {
                "value": "{{selectedTask.status}}"
              },
              "events": {
                "CHANGE": {
                  "action": "UPDATE_TASK_STATUS",
                  "target": "selectedTask.id",
                  "payload": {
                    "status": "{{value}}"
                  }
                }
              },
              "children": null
            },
            {
              "id": "closeDialogButton",
              "node_type": "Button",
              "props": {
                "label": "Close"
              },
              "bindings": null,
              "events": {
                "CLICK": {
                  "action": "HIDE_DIALOG",
                  "target": "taskDetailDialog",
                  "payload": null
                }
              },
              "children": null
            }
          ]
        }
      ]
    }
  ]
}
events.ts:104 [AutoUI Debug] Corrected list binding for node 'taskListView': from 'tasks' to 'tasks.data'
AutoUI.tsx:400 [AutoUI Debug] Layout after binding correction (before resolving): {
  "id": "root",
  "node_type": "Container",
  "props": null,
  "bindings": null,
  "events": null,
  "children": [
    {
      "id": "header",
      "node_type": "Header",
      "props": {
        "title": "Task Management Dashboard"
      },
      "bindings": null,
      "events": null,
      "children": null
    },
    {
      "id": "taskListView",
      "node_type": "ListView",
      "props": null,
      "bindings": {
        "data": "tasks.data"
      },
      "events": null,
      "children": [
        {
          "id": "taskItem",
          "node_type": "Card",
          "props": null,
          "bindings": null,
          "events": null,
          "children": [
            {
              "id": "taskTitle",
              "node_type": "Text",
              "props": null,
              "bindings": {
                "text": "{{item.title}}"
              },
              "events": null,
              "children": null
            },
            {
              "id": "taskStatus",
              "node_type": "Text",
              "props": null,
              "bindings": {
                "text": "{{item.status}}"
              },
              "events": null,
              "children": null
            },
            {
              "id": "viewDetailsButton",
              "node_type": "Button",
              "props": {
                "label": "View Details"
              },
              "bindings": null,
              "events": {
                "CLICK": {
                  "action": "SHOW_DIALOG",
                  "target": "taskDetailDialog",
                  "payload": {
                    "taskId": "{{item.id}}"
                  }
                }
              },
              "children": null
            }
          ]
        }
      ]
    },
    {
      "id": "taskDetailDialog",
      "node_type": "Dialog",
      "props": {
        "title": "Task Details"
      },
      "bindings": {
        "visible": "isTaskDetailDialogVisible"
      },
      "events": null,
      "children": [
        {
          "id": "taskDetailContainer",
          "node_type": "Container",
          "props": null,
          "bindings": null,
          "events": null,
          "children": [
            {
              "id": "taskDetailTitle",
              "node_type": "Heading",
              "props": null,
              "bindings": {
                "text": "{{selectedTask.title}}"
              },
              "events": null,
              "children": null
            },
            {
              "id": "taskDetailDescription",
              "node_type": "Text",
              "props": null,
              "bindings": {
                "text": "{{selectedTask.description}}"
              },
              "events": null,
              "children": null
            },
            {
              "id": "taskDetailStatus",
              "node_type": "Select",
              "props": {
                "options": "['Pending', 'In Progress', 'Completed']"
              },
              "bindings": {
                "value": "{{selectedTask.status}}"
              },
              "events": {
                "CHANGE": {
                  "action": "UPDATE_TASK_STATUS",
                  "target": "selectedTask.id",
                  "payload": {
                    "status": "{{value}}"
                  }
                }
              },
              "children": null
            },
            {
              "id": "closeDialogButton",
              "node_type": "Button",
              "props": {
                "label": "Close"
              },
              "bindings": null,
              "events": {
                "CLICK": {
                  "action": "HIDE_DIALOG",
                  "target": "taskDetailDialog",
                  "payload": null
                }
              },
              "children": null
            }
          ]
        }
      ]
    }
  ]
}
bindings.ts:194 [processBinding Debug] Processing PATH string: "Task Management Dashboard", Has itemData: false
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'BINDING_RESOLUTION_COMPLETE', timestamp: 1747163534375, originalLayout: {…}, resolvedLayout: {…}}
bindings.ts:194 [processBinding Debug] Processing PATH string: "tasks.data", Has itemData: false
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.title}}", Path: "item.title", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '1', title: 'Setup development environment', description: 'Install Node.js, TypeScript, and VS Code', status: 'completed', priority: 'high', …}
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.status}}", Path: "item.status", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '1', title: 'Setup development environment', description: 'Install Node.js, TypeScript, and VS Code', status: 'completed', priority: 'high', …}
bindings.ts:194 [processBinding Debug] Processing PATH string: "View Details", Has itemData: true
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.id}}", Path: "item.id", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '1', title: 'Setup development environment', description: 'Install Node.js, TypeScript, and VS Code', status: 'completed', priority: 'high', …}
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.title}}", Path: "item.title", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '2', title: 'Create project structure', description: 'Set up initial files and directories', status: 'completed', priority: 'high', …}
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.status}}", Path: "item.status", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '2', title: 'Create project structure', description: 'Set up initial files and directories', status: 'completed', priority: 'high', …}
bindings.ts:194 [processBinding Debug] Processing PATH string: "View Details", Has itemData: true
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.id}}", Path: "item.id", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '2', title: 'Create project structure', description: 'Set up initial files and directories', status: 'completed', priority: 'high', …}
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.title}}", Path: "item.title", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '3', title: 'Implement core features', description: 'Work on the main functionality', status: 'in_progress', priority: 'medium', …}
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.status}}", Path: "item.status", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '3', title: 'Implement core features', description: 'Work on the main functionality', status: 'in_progress', priority: 'medium', …}
bindings.ts:194 [processBinding Debug] Processing PATH string: "View Details", Has itemData: true
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.id}}", Path: "item.id", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '3', title: 'Implement core features', description: 'Work on the main functionality', status: 'in_progress', priority: 'medium', …}
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.title}}", Path: "item.title", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '4', title: 'Write documentation', description: 'Create README and API docs', status: 'pending', priority: 'low', …}
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.status}}", Path: "item.status", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '4', title: 'Write documentation', description: 'Create README and API docs', status: 'pending', priority: 'low', …}
bindings.ts:194 [processBinding Debug] Processing PATH string: "View Details", Has itemData: true
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.id}}", Path: "item.id", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '4', title: 'Write documentation', description: 'Create README and API docs', status: 'pending', priority: 'low', …}
bindings.ts:194 [processBinding Debug] Processing PATH string: "Task Details", Has itemData: false
bindings.ts:194 [processBinding Debug] Processing PATH string: "isTaskDetailDialogVisible", Has itemData: false
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'PLAN_ERROR', timestamp: 1747163534378, error: Error: ActionRouter did not provide a prompt to callPlannerLLM.
    at callPlannerLLM (webpack-inte…}
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{selectedTask.title}}", Path: "selectedTask.title", Has itemData: false
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'BINDING_RESOLUTION_COMPLETE', timestamp: 1747163534382, originalLayout: {…}, resolvedLayout: {…}}
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{selectedTask.description}}", Path: "selectedTask.description", Has itemData: false
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'BINDING_RESOLUTION_COMPLETE', timestamp: 1747163534382, originalLayout: {…}, resolvedLayout: {…}}
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{selectedTask.status}}", Path: "selectedTask.status", Has itemData: false
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{value}}", Path: "value", Has itemData: false
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'BINDING_RESOLUTION_COMPLETE', timestamp: 1747163534382, originalLayout: {…}, resolvedLayout: {…}}
bindings.ts:194 [processBinding Debug] Processing PATH string: "Close", Has itemData: false
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'BINDING_RESOLUTION_COMPLETE', timestamp: 1747163534382, originalLayout: {…}, resolvedLayout: {…}}
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'BINDING_RESOLUTION_COMPLETE', timestamp: 1747163534383, originalLayout: {…}, resolvedLayout: {…}}
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'BINDING_RESOLUTION_COMPLETE', timestamp: 1747163534383, originalLayout: {…}, resolvedLayout: {…}}
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'BINDING_RESOLUTION_COMPLETE', timestamp: 1747163534383, originalLayout: {…}, resolvedLayout: {…}}
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'BINDING_RESOLUTION_COMPLETE', timestamp: 1747163534383, originalLayout: {…}, resolvedLayout: {…}}
AutoUI.tsx:408 [AutoUI Debug] Resolved layout after bindings: {
  "id": "root",
  "node_type": "Container",
  "props": null,
  "bindings": null,
  "events": null,
  "children": [
    {
      "id": "header",
      "node_type": "Header",
      "props": {
        "title": "Task Management Dashboard"
      },
      "bindings": null,
      "events": null,
      "children": []
    },
    {
      "id": "taskListView",
      "node_type": "ListView",
      "props": {
        "data": [
          {
            "id": "1",
            "title": "Setup development environment",
            "description": "Install Node.js, TypeScript, and VS Code",
            "status": "completed",
            "priority": "high",
            "dueDate": "2023-12-31",
            "createdAt": "2023-12-01T10:00:00Z",
            "updatedAt": "2023-12-01T15:30:00Z"
          },
          {
            "id": "2",
            "title": "Create project structure",
            "description": "Set up initial files and directories",
            "status": "completed",
            "priority": "high",
            "dueDate": "2023-12-31",
            "createdAt": "2023-12-02T09:15:00Z",
            "updatedAt": "2023-12-02T11:45:00Z"
          },
          {
            "id": "3",
            "title": "Implement core features",
            "description": "Work on the main functionality",
            "status": "in_progress",
            "priority": "medium",
            "dueDate": "2024-01-15",
            "createdAt": "2023-12-05T08:30:00Z",
            "updatedAt": "2023-12-10T14:20:00Z"
          },
          {
            "id": "4",
            "title": "Write documentation",
            "description": "Create README and API docs",
            "status": "pending",
            "priority": "low",
            "dueDate": "2024-01-31",
            "createdAt": "2023-12-15T16:45:00Z",
            "updatedAt": null
          }
        ]
      },
      "bindings": {
        "data": "tasks.data"
      },
      "events": null,
      "children": [
        {
          "id": "taskItem-1",
          "node_type": "Card",
          "props": {
            "key": "1"
          },
          "bindings": null,
          "events": null,
          "children": [
            {
              "id": "taskItem-1-taskTitle",
              "node_type": "Text",
              "props": {
                "text": "Setup development environment"
              },
              "bindings": {
                "text": "{{item.title}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskItem-1-taskStatus",
              "node_type": "Text",
              "props": {
                "text": "completed"
              },
              "bindings": {
                "text": "{{item.status}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskItem-1-viewDetailsButton",
              "node_type": "Button",
              "props": {
                "label": "View Details"
              },
              "bindings": null,
              "events": {
                "CLICK": {
                  "action": "SHOW_DIALOG",
                  "target": "taskDetailDialog",
                  "payload": {
                    "taskId": "1"
                  }
                }
              },
              "children": []
            }
          ]
        },
        {
          "id": "taskItem-2",
          "node_type": "Card",
          "props": {
            "key": "2"
          },
          "bindings": null,
          "events": null,
          "children": [
            {
              "id": "taskItem-2-taskTitle",
              "node_type": "Text",
              "props": {
                "text": "Create project structure"
              },
              "bindings": {
                "text": "{{item.title}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskItem-2-taskStatus",
              "node_type": "Text",
              "props": {
                "text": "completed"
              },
              "bindings": {
                "text": "{{item.status}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskItem-2-viewDetailsButton",
              "node_type": "Button",
              "props": {
                "label": "View Details"
              },
              "bindings": null,
              "events": {
                "CLICK": {
                  "action": "SHOW_DIALOG",
                  "target": "taskDetailDialog",
                  "payload": {
                    "taskId": "2"
                  }
                }
              },
              "children": []
            }
          ]
        },
        {
          "id": "taskItem-3",
          "node_type": "Card",
          "props": {
            "key": "3"
          },
          "bindings": null,
          "events": null,
          "children": [
            {
              "id": "taskItem-3-taskTitle",
              "node_type": "Text",
              "props": {
                "text": "Implement core features"
              },
              "bindings": {
                "text": "{{item.title}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskItem-3-taskStatus",
              "node_type": "Text",
              "props": {
                "text": "in_progress"
              },
              "bindings": {
                "text": "{{item.status}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskItem-3-viewDetailsButton",
              "node_type": "Button",
              "props": {
                "label": "View Details"
              },
              "bindings": null,
              "events": {
                "CLICK": {
                  "action": "SHOW_DIALOG",
                  "target": "taskDetailDialog",
                  "payload": {
                    "taskId": "3"
                  }
                }
              },
              "children": []
            }
          ]
        },
        {
          "id": "taskItem-4",
          "node_type": "Card",
          "props": {
            "key": "4"
          },
          "bindings": null,
          "events": null,
          "children": [
            {
              "id": "taskItem-4-taskTitle",
              "node_type": "Text",
              "props": {
                "text": "Write documentation"
              },
              "bindings": {
                "text": "{{item.title}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskItem-4-taskStatus",
              "node_type": "Text",
              "props": {
                "text": "pending"
              },
              "bindings": {
                "text": "{{item.status}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskItem-4-viewDetailsButton",
              "node_type": "Button",
              "props": {
                "label": "View Details"
              },
              "bindings": null,
              "events": {
                "CLICK": {
                  "action": "SHOW_DIALOG",
                  "target": "taskDetailDialog",
                  "payload": {
                    "taskId": "4"
                  }
                }
              },
              "children": []
            }
          ]
        }
      ]
    },
    {
      "id": "taskDetailDialog",
      "node_type": "Dialog",
      "props": {
        "title": "Task Details",
        "visible": true
      },
      "bindings": {
        "visible": "isTaskDetailDialogVisible"
      },
      "events": null,
      "children": [
        {
          "id": "taskDetailContainer",
          "node_type": "Container",
          "props": null,
          "bindings": null,
          "events": null,
          "children": [
            {
              "id": "taskDetailTitle",
              "node_type": "Heading",
              "props": {
                "text": "Write documentation"
              },
              "bindings": {
                "text": "{{selectedTask.title}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskDetailDescription",
              "node_type": "Text",
              "props": {
                "text": "Create README and API docs"
              },
              "bindings": {
                "text": "{{selectedTask.description}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskDetailStatus",
              "node_type": "Select",
              "props": {
                "options": "['Pending', 'In Progress', 'Completed']",
                "value": "pending"
              },
              "bindings": {
                "value": "{{selectedTask.status}}"
              },
              "events": {
                "CHANGE": {
                  "action": "UPDATE_TASK_STATUS",
                  "target": "selectedTask.id",
                  "payload": {}
                }
              },
              "children": []
            },
            {
              "id": "closeDialogButton",
              "node_type": "Button",
              "props": {
                "label": "Close"
              },
              "bindings": null,
              "events": {
                "CLICK": {
                  "action": "HIDE_DIALOG",
                  "target": "taskDetailDialog",
                  "payload": null
                }
              },
              "children": []
            }
          ]
        }
      ]
    }
  ]
}
AutoUI.tsx:314 [AutoUI.processEvent] Event for nodeId: taskItem-3-viewDetailsButton
AutoUI.tsx:330 [AutoUI.processEvent] Using currentLayoutViaRef snapshot (taskListView children): [
  {
    "id": "taskItem-1",
    "children": [
      {
        "id": "taskItem-1-taskTitle",
        "props": {
          "text": "Setup development environment"
        },
        "events": null
      },
      {
        "id": "taskItem-1-taskStatus",
        "props": {
          "text": "completed"
        },
        "events": null
      },
      {
        "id": "taskItem-1-viewDetailsButton",
        "props": {
          "label": "View Details"
        },
        "events": {
          "CLICK": {
            "action": "SHOW_DIALOG",
            "target": "taskDetailDialog",
            "payload": {
              "taskId": "1"
            }
          }
        }
      }
    ]
  },
  {
    "id": "taskItem-2",
    "children": [
      {
        "id": "taskItem-2-taskTitle",
        "props": {
          "text": "Create project structure"
        },
        "events": null
      },
      {
        "id": "taskItem-2-taskStatus",
        "props": {
          "text": "completed"
        },
        "events": null
      },
      {
        "id": "taskItem-2-viewDetailsButton",
        "props": {
          "label": "View Details"
        },
        "events": {
          "CLICK": {
            "action": "SHOW_DIALOG",
            "target": "taskDetailDialog",
            "payload": {
              "taskId": "2"
            }
          }
        }
      }
    ]
  },
  {
    "id": "taskItem-3",
    "children": [
      {
        "id": "taskItem-3-taskTitle",
        "props": {
          "text": "Implement core features"
        },
        "events": null
      },
      {
        "id": "taskItem-3-taskStatus",
        "props": {
          "text": "in_progress"
        },
        "events": null
      },
      {
        "id": "taskItem-3-viewDetailsButton",
        "props": {
          "label": "View Details"
        },
        "events": {
          "CLICK": {
            "action": "SHOW_DIALOG",
            "target": "taskDetailDialog",
            "payload": {
              "taskId": "3"
            }
          }
        }
      }
    ]
  },
  {
    "id": "taskItem-4",
    "children": [
      {
        "id": "taskItem-4-taskTitle",
        "props": {
          "text": "Write documentation"
        },
        "events": null
      },
      {
        "id": "taskItem-4-taskStatus",
        "props": {
          "text": "pending"
        },
        "events": null
      },
      {
        "id": "taskItem-4-viewDetailsButton",
        "props": {
          "label": "View Details"
        },
        "events": {
          "CLICK": {
            "action": "SHOW_DIALOG",
            "target": "taskDetailDialog",
            "payload": {
              "taskId": "4"
            }
          }
        }
      }
    ]
  }
]
bindings.ts:504 [executeAction] SHOW_DIALOG: Set selectedTask to: {id: '3', title: 'Implement core features', description: 'Work on the main functionality', status: 'in_progress', priority: 'medium', …}
bindings.ts:520 [executeAction] SHOW_DIALOG: set isTaskDetailDialogVisible to true. Dialog target: taskDetailDialog, Payload: {taskId: '3'}
state.ts:59 [state.ts handleEvent] About to call router.resolveRoute. enablePartialUpdates: false
state.ts:60 [state.ts handleEvent] layoutForRouting ID (if exists): root
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'PLAN_START', timestamp: 1747163547475, plannerInput: {…}}
AutoUI.tsx:387 [AutoUI Debug] DataContext before resolving bindings: {
  "tasks": {
    "schema": {
      "tableName": "tasks",
      "columns": {
        "id": {
          "type": "uuid",
          "primaryKey": true
        },
        "title": {
          "type": "text",
          "notNull": true
        },
        "description": {
          "type": "text"
        },
        "status": {
          "type": "text",
          "notNull": true,
          "default": "pending"
        },
        "priority": {
          "type": "text",
          "notNull": true,
          "default": "medium"
        },
        "dueDate": {
          "type": "date"
        },
        "createdAt": {
          "type": "timestamp",
          "notNull": true,
          "default": "now()"
        },
        "updatedAt": {
          "type": "timestamp"
        }
      },
      "sampleData": [
        {
          "id": "1",
          "title": "Setup development environment",
          "description": "Install Node.js, TypeScript, and VS Code",
          "status": "completed",
          "priority": "high",
          "dueDate": "2023-12-31",
          "createdAt": "2023-12-01T10:00:00Z",
          "updatedAt": "2023-12-01T15:30:00Z"
        },
        {
          "id": "2",
          "title": "Create project structure",
          "description": "Set up initial files and directories",
          "status": "completed",
          "priority": "high",
          "dueDate": "2023-12-31",
          "createdAt": "2023-12-02T09:15:00Z",
          "updatedAt": "2023-12-02T11:45:00Z"
        },
        {
          "id": "3",
          "title": "Implement core features",
          "description": "Work on the main functionality",
          "status": "in_progress",
          "priority": "medium",
          "dueDate": "2024-01-15",
          "createdAt": "2023-12-05T08:30:00Z",
          "updatedAt": "2023-12-10T14:20:00Z"
        },
        {
          "id": "4",
          "title": "Write documentation",
          "description": "Create README and API docs",
          "status": "pending",
          "priority": "low",
          "dueDate": "2024-01-31",
          "createdAt": "2023-12-15T16:45:00Z",
          "updatedAt": null
        }
      ]
    },
    "data": [
      {
        "id": "1",
        "title": "Setup development environment",
        "description": "Install Node.js, TypeScript, and VS Code",
        "status": "completed",
        "priority": "high",
        "dueDate": "2023-12-31",
        "createdAt": "2023-12-01T10:00:00Z",
        "updatedAt": "2023-12-01T15:30:00Z"
      },
      {
        "id": "2",
        "title": "Create project structure",
        "description": "Set up initial files and directories",
        "status": "completed",
        "priority": "high",
        "dueDate": "2023-12-31",
        "createdAt": "2023-12-02T09:15:00Z",
        "updatedAt": "2023-12-02T11:45:00Z"
      },
      {
        "id": "3",
        "title": "Implement core features",
        "description": "Work on the main functionality",
        "status": "in_progress",
        "priority": "medium",
        "dueDate": "2024-01-15",
        "createdAt": "2023-12-05T08:30:00Z",
        "updatedAt": "2023-12-10T14:20:00Z"
      },
      {
        "id": "4",
        "title": "Write documentation",
        "description": "Create README and API docs",
        "status": "pending",
        "priority": "low",
        "dueDate": "2024-01-31",
        "createdAt": "2023-12-15T16:45:00Z",
        "updatedAt": null
      }
    ],
    "selected": null
  },
  "users": {
    "schema": {
      "tableName": "users",
      "columns": {
        "id": {
          "type": "uuid",
          "primaryKey": true
        },
        "name": {
          "type": "text",
          "notNull": true
        },
        "email": {
          "type": "text",
          "notNull": true,
          "unique": true
        },
        "role": {
          "type": "text",
          "notNull": true,
          "default": "user"
        },
        "createdAt": {
          "type": "timestamp",
          "notNull": true,
          "default": "now()"
        }
      },
      "sampleData": [
        {
          "id": "1",
          "name": "John Doe",
          "email": "john@example.com",
          "role": "admin",
          "createdAt": "2023-10-01T00:00:00Z"
        },
        {
          "id": "2",
          "name": "Jane Smith",
          "email": "jane@example.com",
          "role": "user",
          "createdAt": "2023-10-15T08:30:00Z"
        },
        {
          "id": "3",
          "name": "Bob Johnson",
          "email": "bob@example.com",
          "role": "user",
          "createdAt": "2023-11-05T14:45:00Z"
        }
      ]
    },
    "data": [
      {
        "id": "1",
        "name": "John Doe",
        "email": "john@example.com",
        "role": "admin",
        "createdAt": "2023-10-01T00:00:00Z"
      },
      {
        "id": "2",
        "name": "Jane Smith",
        "email": "jane@example.com",
        "role": "user",
        "createdAt": "2023-10-15T08:30:00Z"
      },
      {
        "id": "3",
        "name": "Bob Johnson",
        "email": "bob@example.com",
        "role": "user",
        "createdAt": "2023-11-05T14:45:00Z"
      }
    ],
    "selected": null
  },
  "user": {
    "id": "1",
    "name": "John Doe",
    "role": "admin"
  },
  "selectedTask": {
    "id": "3",
    "title": "Implement core features",
    "description": "Work on the main functionality",
    "status": "in_progress",
    "priority": "medium",
    "dueDate": "2024-01-15",
    "createdAt": "2023-12-05T08:30:00Z",
    "updatedAt": "2023-12-10T14:20:00Z"
  },
  "isTaskDetailDialogVisible": true
}
AutoUI.tsx:395 [AutoUI Debug] Raw layout before resolving (from planner): {
  "id": "root",
  "node_type": "Container",
  "props": null,
  "bindings": null,
  "events": null,
  "children": [
    {
      "id": "header",
      "node_type": "Header",
      "props": {
        "title": "Task Management Dashboard"
      },
      "bindings": null,
      "events": null,
      "children": null
    },
    {
      "id": "taskListView",
      "node_type": "ListView",
      "props": null,
      "bindings": {
        "data": "tasks"
      },
      "events": null,
      "children": [
        {
          "id": "taskItem",
          "node_type": "Card",
          "props": null,
          "bindings": null,
          "events": null,
          "children": [
            {
              "id": "taskTitle",
              "node_type": "Text",
              "props": null,
              "bindings": {
                "text": "{{item.title}}"
              },
              "events": null,
              "children": null
            },
            {
              "id": "taskStatus",
              "node_type": "Text",
              "props": null,
              "bindings": {
                "text": "{{item.status}}"
              },
              "events": null,
              "children": null
            },
            {
              "id": "viewDetailsButton",
              "node_type": "Button",
              "props": {
                "label": "View Details"
              },
              "bindings": null,
              "events": {
                "CLICK": {
                  "action": "SHOW_DIALOG",
                  "target": "taskDetailDialog",
                  "payload": {
                    "taskId": "{{item.id}}"
                  }
                }
              },
              "children": null
            }
          ]
        }
      ]
    },
    {
      "id": "taskDetailDialog",
      "node_type": "Dialog",
      "props": {
        "title": "Task Details"
      },
      "bindings": {
        "visible": "isTaskDetailDialogVisible"
      },
      "events": null,
      "children": [
        {
          "id": "taskDetailContainer",
          "node_type": "Container",
          "props": null,
          "bindings": null,
          "events": null,
          "children": [
            {
              "id": "taskDetailTitle",
              "node_type": "Heading",
              "props": null,
              "bindings": {
                "text": "{{selectedTask.title}}"
              },
              "events": null,
              "children": null
            },
            {
              "id": "taskDetailDescription",
              "node_type": "Text",
              "props": null,
              "bindings": {
                "text": "{{selectedTask.description}}"
              },
              "events": null,
              "children": null
            },
            {
              "id": "taskDetailStatus",
              "node_type": "Select",
              "props": {
                "options": "['Pending', 'In Progress', 'Completed']"
              },
              "bindings": {
                "value": "{{selectedTask.status}}"
              },
              "events": {
                "CHANGE": {
                  "action": "UPDATE_TASK_STATUS",
                  "target": "selectedTask.id",
                  "payload": {
                    "status": "{{value}}"
                  }
                }
              },
              "children": null
            },
            {
              "id": "closeDialogButton",
              "node_type": "Button",
              "props": {
                "label": "Close"
              },
              "bindings": null,
              "events": {
                "CLICK": {
                  "action": "HIDE_DIALOG",
                  "target": "taskDetailDialog",
                  "payload": null
                }
              },
              "children": null
            }
          ]
        }
      ]
    }
  ]
}
events.ts:104 [AutoUI Debug] Corrected list binding for node 'taskListView': from 'tasks' to 'tasks.data'
AutoUI.tsx:400 [AutoUI Debug] Layout after binding correction (before resolving): {
  "id": "root",
  "node_type": "Container",
  "props": null,
  "bindings": null,
  "events": null,
  "children": [
    {
      "id": "header",
      "node_type": "Header",
      "props": {
        "title": "Task Management Dashboard"
      },
      "bindings": null,
      "events": null,
      "children": null
    },
    {
      "id": "taskListView",
      "node_type": "ListView",
      "props": null,
      "bindings": {
        "data": "tasks.data"
      },
      "events": null,
      "children": [
        {
          "id": "taskItem",
          "node_type": "Card",
          "props": null,
          "bindings": null,
          "events": null,
          "children": [
            {
              "id": "taskTitle",
              "node_type": "Text",
              "props": null,
              "bindings": {
                "text": "{{item.title}}"
              },
              "events": null,
              "children": null
            },
            {
              "id": "taskStatus",
              "node_type": "Text",
              "props": null,
              "bindings": {
                "text": "{{item.status}}"
              },
              "events": null,
              "children": null
            },
            {
              "id": "viewDetailsButton",
              "node_type": "Button",
              "props": {
                "label": "View Details"
              },
              "bindings": null,
              "events": {
                "CLICK": {
                  "action": "SHOW_DIALOG",
                  "target": "taskDetailDialog",
                  "payload": {
                    "taskId": "{{item.id}}"
                  }
                }
              },
              "children": null
            }
          ]
        }
      ]
    },
    {
      "id": "taskDetailDialog",
      "node_type": "Dialog",
      "props": {
        "title": "Task Details"
      },
      "bindings": {
        "visible": "isTaskDetailDialogVisible"
      },
      "events": null,
      "children": [
        {
          "id": "taskDetailContainer",
          "node_type": "Container",
          "props": null,
          "bindings": null,
          "events": null,
          "children": [
            {
              "id": "taskDetailTitle",
              "node_type": "Heading",
              "props": null,
              "bindings": {
                "text": "{{selectedTask.title}}"
              },
              "events": null,
              "children": null
            },
            {
              "id": "taskDetailDescription",
              "node_type": "Text",
              "props": null,
              "bindings": {
                "text": "{{selectedTask.description}}"
              },
              "events": null,
              "children": null
            },
            {
              "id": "taskDetailStatus",
              "node_type": "Select",
              "props": {
                "options": "['Pending', 'In Progress', 'Completed']"
              },
              "bindings": {
                "value": "{{selectedTask.status}}"
              },
              "events": {
                "CHANGE": {
                  "action": "UPDATE_TASK_STATUS",
                  "target": "selectedTask.id",
                  "payload": {
                    "status": "{{value}}"
                  }
                }
              },
              "children": null
            },
            {
              "id": "closeDialogButton",
              "node_type": "Button",
              "props": {
                "label": "Close"
              },
              "bindings": null,
              "events": {
                "CLICK": {
                  "action": "HIDE_DIALOG",
                  "target": "taskDetailDialog",
                  "payload": null
                }
              },
              "children": null
            }
          ]
        }
      ]
    }
  ]
}
shadcn.tsx:326 [Adapter Debug] Rendering ListView: id=taskListView, props= {data: Array(4)}
shadcn.tsx:263 [Adapter Debug] Rendering Container: id=taskDetailContainer, props= null
shadcn.tsx:800 [Adapter Debug] Rendering Dialog: id=taskDetailDialog, props= {title: 'Task Details', visible: true} isOpen=true
shadcn.tsx:263 [Adapter Debug] Rendering Container: id=root, props= null
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'RENDER_COMPLETE', timestamp: 1747163547482, layout: {…}, renderTimeMs: 1}
bindings.ts:194 [processBinding Debug] Processing PATH string: "Task Management Dashboard", Has itemData: false
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'BINDING_RESOLUTION_COMPLETE', timestamp: 1747163547482, originalLayout: {…}, resolvedLayout: {…}}
bindings.ts:194 [processBinding Debug] Processing PATH string: "tasks.data", Has itemData: false
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.title}}", Path: "item.title", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '1', title: 'Setup development environment', description: 'Install Node.js, TypeScript, and VS Code', status: 'completed', priority: 'high', …}
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.status}}", Path: "item.status", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '1', title: 'Setup development environment', description: 'Install Node.js, TypeScript, and VS Code', status: 'completed', priority: 'high', …}
bindings.ts:194 [processBinding Debug] Processing PATH string: "View Details", Has itemData: true
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.id}}", Path: "item.id", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '1', title: 'Setup development environment', description: 'Install Node.js, TypeScript, and VS Code', status: 'completed', priority: 'high', …}
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.title}}", Path: "item.title", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '2', title: 'Create project structure', description: 'Set up initial files and directories', status: 'completed', priority: 'high', …}
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.status}}", Path: "item.status", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '2', title: 'Create project structure', description: 'Set up initial files and directories', status: 'completed', priority: 'high', …}
bindings.ts:194 [processBinding Debug] Processing PATH string: "View Details", Has itemData: true
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.id}}", Path: "item.id", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '2', title: 'Create project structure', description: 'Set up initial files and directories', status: 'completed', priority: 'high', …}
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.title}}", Path: "item.title", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '3', title: 'Implement core features', description: 'Work on the main functionality', status: 'in_progress', priority: 'medium', …}
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.status}}", Path: "item.status", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '3', title: 'Implement core features', description: 'Work on the main functionality', status: 'in_progress', priority: 'medium', …}
bindings.ts:194 [processBinding Debug] Processing PATH string: "View Details", Has itemData: true
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.id}}", Path: "item.id", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '3', title: 'Implement core features', description: 'Work on the main functionality', status: 'in_progress', priority: 'medium', …}
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.title}}", Path: "item.title", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '4', title: 'Write documentation', description: 'Create README and API docs', status: 'pending', priority: 'low', …}
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.status}}", Path: "item.status", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '4', title: 'Write documentation', description: 'Create README and API docs', status: 'pending', priority: 'low', …}
bindings.ts:194 [processBinding Debug] Processing PATH string: "View Details", Has itemData: true
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.id}}", Path: "item.id", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '4', title: 'Write documentation', description: 'Create README and API docs', status: 'pending', priority: 'low', …}
bindings.ts:194 [processBinding Debug] Processing PATH string: "Task Details", Has itemData: false
bindings.ts:194 [processBinding Debug] Processing PATH string: "isTaskDetailDialogVisible", Has itemData: false
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'PLAN_ERROR', timestamp: 1747163547485, error: Error: ActionRouter did not provide a prompt to callPlannerLLM.
    at callPlannerLLM (webpack-inte…}
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{selectedTask.title}}", Path: "selectedTask.title", Has itemData: false
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'BINDING_RESOLUTION_COMPLETE', timestamp: 1747163547489, originalLayout: {…}, resolvedLayout: {…}}
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{selectedTask.description}}", Path: "selectedTask.description", Has itemData: false
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'BINDING_RESOLUTION_COMPLETE', timestamp: 1747163547489, originalLayout: {…}, resolvedLayout: {…}}
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{selectedTask.status}}", Path: "selectedTask.status", Has itemData: false
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{value}}", Path: "value", Has itemData: false
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'BINDING_RESOLUTION_COMPLETE', timestamp: 1747163547489, originalLayout: {…}, resolvedLayout: {…}}
bindings.ts:194 [processBinding Debug] Processing PATH string: "Close", Has itemData: false
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'BINDING_RESOLUTION_COMPLETE', timestamp: 1747163547489, originalLayout: {…}, resolvedLayout: {…}}
app-index.tsx:25  Warning: Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?

Check the render method of `Primitive.div.SlotClone`. Error Component Stack
    at DialogOverlay (state.ts:290:3)
    at eval (slot.tsx:68:13)
    at eval (slot.tsx:15:13)
    at eval (index.mjs:28:13)
    at eval (portal.tsx:22:22)
    at Presence (presence.tsx:12:11)
    at Provider (index.mjs:27:15)
    at DialogPortal (dialog.tsx:146:11)
    at DialogPortal (state.ts:284:6)
    at DialogContent (dialog.tsx:11:1)
    at Provider (index.mjs:27:15)
    at Dialog (dialog.tsx:52:5)
    at Dialog (state.ts:274:9)
    at div (<anonymous>)
    at div (<anonymous>)
    at div (<anonymous>)
    at AutoUI (events.ts:142:5)
    at div (<anonymous>)
    at main (<anonymous>)
    at Home (<anonymous>)
    at ClientPageRoot (client-page.tsx:11:3)
    at InnerLayoutRouter (layout-router.tsx:329:3)
    at RedirectErrorBoundary (redirect-boundary.tsx:48:5)
    at RedirectBoundary (redirect-boundary.tsx:79:9)
    at NotFoundErrorBoundary (not-found-boundary.tsx:32:5)
    at NotFoundBoundary (not-found-boundary.tsx:117:9)
    at LoadingBoundary (layout-router.tsx:484:3)
    at ErrorBoundary (error-boundary.tsx:171:9)
    at InnerScrollAndFocusHandler (layout-router.tsx:294:3)
    at ScrollAndFocusHandler (layout-router.tsx:304:9)
    at RenderFromTemplateContext (render-from-template-context.tsx:8:10)
    at OuterLayoutRouter (layout-router.tsx:532:9)
    at body (<anonymous>)
    at html (<anonymous>)
    at RootLayout [Server] (<anonymous>)
    at RedirectErrorBoundary (redirect-boundary.tsx:48:5)
    at RedirectBoundary (redirect-boundary.tsx:79:9)
    at NotFoundErrorBoundary (not-found-boundary.tsx:32:5)
    at NotFoundBoundary (not-found-boundary.tsx:117:9)
    at DevRootNotFoundBoundary (dev-root-not-found-boundary.tsx:20:3)
    at ReactDevOverlay (ReactDevOverlay.tsx:98:3)
    at HotReload (hot-reloader-client.tsx:452:3)
    at Router (app-router.tsx:300:9)
    at ErrorBoundaryHandler (error-boundary.tsx:68:11)
    at ErrorBoundary (error-boundary.tsx:171:9)
    at AppRouter (app-router.tsx:716:3)
    at ServerRoot (app-index.tsx:126:13)
    at Root (app-index.tsx:133:17)
overrideMethod @ hook.js:608
window.console.error @ app-index.tsx:25
console.error @ hydration-error-info.ts:72
printWarning @ react-dom.development.js:94
error @ react-dom.development.js:68
validateFunctionComponentInDev @ react-dom.development.js:16970
mountIndeterminateComponent @ react-dom.development.js:16941
beginWork$1 @ react-dom.development.js:18458
beginWork @ react-dom.development.js:26927
performUnitOfWork @ react-dom.development.js:25748
workLoopSync @ react-dom.development.js:25464
renderRootSync @ react-dom.development.js:25419
performSyncWorkOnRoot @ react-dom.development.js:24887
flushSyncWorkAcrossRoots_impl @ react-dom.development.js:7758
flushSyncWorkOnAllRoots @ react-dom.development.js:7718
processRootScheduleInMicrotask @ react-dom.development.js:7863
eval @ react-dom.development.js:8034
dialog.tsx:543  Warning: Missing `Description` or `aria-describedby={undefined}` for {DialogContent}. Error Component Stack
    at DescriptionWarning (dialog.tsx:534:66)
    at eval (dialog.tsx:386:13)
    at eval (dialog.tsx:261:58)
    at Presence (presence.tsx:12:11)
    at eval (dialog.tsx:236:64)
    at eval (slot.tsx:68:13)
    at eval (slot.tsx:15:13)
    at eval (index.mjs:28:13)
    at eval (portal.tsx:22:22)
    at Presence (presence.tsx:12:11)
    at Provider (index.mjs:27:15)
    at DialogPortal (dialog.tsx:146:11)
    at DialogPortal (state.ts:284:6)
    at DialogContent (dialog.tsx:11:1)
    at Provider (index.mjs:27:15)
    at Dialog (dialog.tsx:52:5)
    at Dialog (state.ts:274:9)
    at div (<anonymous>)
    at div (<anonymous>)
    at div (<anonymous>)
    at AutoUI (events.ts:142:5)
    at div (<anonymous>)
    at main (<anonymous>)
    at Home (<anonymous>)
    at ClientPageRoot (client-page.tsx:11:3)
    at InnerLayoutRouter (layout-router.tsx:329:3)
    at RedirectErrorBoundary (redirect-boundary.tsx:48:5)
    at RedirectBoundary (redirect-boundary.tsx:79:9)
    at NotFoundErrorBoundary (not-found-boundary.tsx:32:5)
    at NotFoundBoundary (not-found-boundary.tsx:117:9)
    at LoadingBoundary (layout-router.tsx:484:3)
    at ErrorBoundary (error-boundary.tsx:171:9)
    at InnerScrollAndFocusHandler (layout-router.tsx:294:3)
    at ScrollAndFocusHandler (layout-router.tsx:304:9)
    at RenderFromTemplateContext (render-from-template-context.tsx:8:10)
    at OuterLayoutRouter (layout-router.tsx:532:9)
    at body (<anonymous>)
    at html (<anonymous>)
    at RootLayout [Server] (<anonymous>)
    at RedirectErrorBoundary (redirect-boundary.tsx:48:5)
    at RedirectBoundary (redirect-boundary.tsx:79:9)
    at NotFoundErrorBoundary (not-found-boundary.tsx:32:5)
    at NotFoundBoundary (not-found-boundary.tsx:117:9)
    at DevRootNotFoundBoundary (dev-root-not-found-boundary.tsx:20:3)
    at ReactDevOverlay (ReactDevOverlay.tsx:98:3)
    at HotReload (hot-reloader-client.tsx:452:3)
    at Router (app-router.tsx:300:9)
    at ErrorBoundaryHandler (error-boundary.tsx:68:11)
    at ErrorBoundary (error-boundary.tsx:171:9)
    at AppRouter (app-router.tsx:716:3)
    at ServerRoot (app-index.tsx:126:13)
    at Root (app-index.tsx:133:17)
overrideMethod @ hook.js:608
eval @ dialog.tsx:543
commitHookEffectListMount @ react-dom.development.js:21102
commitHookPassiveMountEffects @ react-dom.development.js:23154
commitPassiveMountOnFiber @ react-dom.development.js:23259
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23267
commitPassiveMountEffects @ react-dom.development.js:23225
flushPassiveEffectsImpl @ react-dom.development.js:26497
flushPassiveEffects @ react-dom.development.js:26438
commitRootImpl @ react-dom.development.js:26337
commitRoot @ react-dom.development.js:26077
performSyncWorkOnRoot @ react-dom.development.js:24925
flushSyncWorkAcrossRoots_impl @ react-dom.development.js:7758
flushSyncWorkOnAllRoots @ react-dom.development.js:7718
processRootScheduleInMicrotask @ react-dom.development.js:7863
eval @ react-dom.development.js:8034
dialog.tsx:543  Warning: Missing `Description` or `aria-describedby={undefined}` for {DialogContent}.
overrideMethod @ hook.js:608
eval @ dialog.tsx:543
commitHookEffectListMount @ react-dom.development.js:21102
invokePassiveEffectMountInDEV @ react-dom.development.js:23980
invokeEffectsInDev @ react-dom.development.js:26852
legacyCommitDoubleInvokeEffectsInDEV @ react-dom.development.js:26835
commitDoubleInvokeEffectsInDEV @ react-dom.development.js:26816
flushPassiveEffectsImpl @ react-dom.development.js:26514
flushPassiveEffects @ react-dom.development.js:26438
commitRootImpl @ react-dom.development.js:26337
commitRoot @ react-dom.development.js:26077
performSyncWorkOnRoot @ react-dom.development.js:24925
flushSyncWorkAcrossRoots_impl @ react-dom.development.js:7758
flushSyncWorkOnAllRoots @ react-dom.development.js:7718
processRootScheduleInMicrotask @ react-dom.development.js:7863
eval @ react-dom.development.js:8034
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'BINDING_RESOLUTION_COMPLETE', timestamp: 1747163547535, originalLayout: {…}, resolvedLayout: {…}}
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'BINDING_RESOLUTION_COMPLETE', timestamp: 1747163547535, originalLayout: {…}, resolvedLayout: {…}}
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'BINDING_RESOLUTION_COMPLETE', timestamp: 1747163547535, originalLayout: {…}, resolvedLayout: {…}}
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'BINDING_RESOLUTION_COMPLETE', timestamp: 1747163547535, originalLayout: {…}, resolvedLayout: {…}}
AutoUI.tsx:408 [AutoUI Debug] Resolved layout after bindings: {
  "id": "root",
  "node_type": "Container",
  "props": null,
  "bindings": null,
  "events": null,
  "children": [
    {
      "id": "header",
      "node_type": "Header",
      "props": {
        "title": "Task Management Dashboard"
      },
      "bindings": null,
      "events": null,
      "children": []
    },
    {
      "id": "taskListView",
      "node_type": "ListView",
      "props": {
        "data": [
          {
            "id": "1",
            "title": "Setup development environment",
            "description": "Install Node.js, TypeScript, and VS Code",
            "status": "completed",
            "priority": "high",
            "dueDate": "2023-12-31",
            "createdAt": "2023-12-01T10:00:00Z",
            "updatedAt": "2023-12-01T15:30:00Z"
          },
          {
            "id": "2",
            "title": "Create project structure",
            "description": "Set up initial files and directories",
            "status": "completed",
            "priority": "high",
            "dueDate": "2023-12-31",
            "createdAt": "2023-12-02T09:15:00Z",
            "updatedAt": "2023-12-02T11:45:00Z"
          },
          {
            "id": "3",
            "title": "Implement core features",
            "description": "Work on the main functionality",
            "status": "in_progress",
            "priority": "medium",
            "dueDate": "2024-01-15",
            "createdAt": "2023-12-05T08:30:00Z",
            "updatedAt": "2023-12-10T14:20:00Z"
          },
          {
            "id": "4",
            "title": "Write documentation",
            "description": "Create README and API docs",
            "status": "pending",
            "priority": "low",
            "dueDate": "2024-01-31",
            "createdAt": "2023-12-15T16:45:00Z",
            "updatedAt": null
          }
        ]
      },
      "bindings": {
        "data": "tasks.data"
      },
      "events": null,
      "children": [
        {
          "id": "taskItem-1",
          "node_type": "Card",
          "props": {
            "key": "1"
          },
          "bindings": null,
          "events": null,
          "children": [
            {
              "id": "taskItem-1-taskTitle",
              "node_type": "Text",
              "props": {
                "text": "Setup development environment"
              },
              "bindings": {
                "text": "{{item.title}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskItem-1-taskStatus",
              "node_type": "Text",
              "props": {
                "text": "completed"
              },
              "bindings": {
                "text": "{{item.status}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskItem-1-viewDetailsButton",
              "node_type": "Button",
              "props": {
                "label": "View Details"
              },
              "bindings": null,
              "events": {
                "CLICK": {
                  "action": "SHOW_DIALOG",
                  "target": "taskDetailDialog",
                  "payload": {
                    "taskId": "1"
                  }
                }
              },
              "children": []
            }
          ]
        },
        {
          "id": "taskItem-2",
          "node_type": "Card",
          "props": {
            "key": "2"
          },
          "bindings": null,
          "events": null,
          "children": [
            {
              "id": "taskItem-2-taskTitle",
              "node_type": "Text",
              "props": {
                "text": "Create project structure"
              },
              "bindings": {
                "text": "{{item.title}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskItem-2-taskStatus",
              "node_type": "Text",
              "props": {
                "text": "completed"
              },
              "bindings": {
                "text": "{{item.status}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskItem-2-viewDetailsButton",
              "node_type": "Button",
              "props": {
                "label": "View Details"
              },
              "bindings": null,
              "events": {
                "CLICK": {
                  "action": "SHOW_DIALOG",
                  "target": "taskDetailDialog",
                  "payload": {
                    "taskId": "2"
                  }
                }
              },
              "children": []
            }
          ]
        },
        {
          "id": "taskItem-3",
          "node_type": "Card",
          "props": {
            "key": "3"
          },
          "bindings": null,
          "events": null,
          "children": [
            {
              "id": "taskItem-3-taskTitle",
              "node_type": "Text",
              "props": {
                "text": "Implement core features"
              },
              "bindings": {
                "text": "{{item.title}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskItem-3-taskStatus",
              "node_type": "Text",
              "props": {
                "text": "in_progress"
              },
              "bindings": {
                "text": "{{item.status}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskItem-3-viewDetailsButton",
              "node_type": "Button",
              "props": {
                "label": "View Details"
              },
              "bindings": null,
              "events": {
                "CLICK": {
                  "action": "SHOW_DIALOG",
                  "target": "taskDetailDialog",
                  "payload": {
                    "taskId": "3"
                  }
                }
              },
              "children": []
            }
          ]
        },
        {
          "id": "taskItem-4",
          "node_type": "Card",
          "props": {
            "key": "4"
          },
          "bindings": null,
          "events": null,
          "children": [
            {
              "id": "taskItem-4-taskTitle",
              "node_type": "Text",
              "props": {
                "text": "Write documentation"
              },
              "bindings": {
                "text": "{{item.title}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskItem-4-taskStatus",
              "node_type": "Text",
              "props": {
                "text": "pending"
              },
              "bindings": {
                "text": "{{item.status}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskItem-4-viewDetailsButton",
              "node_type": "Button",
              "props": {
                "label": "View Details"
              },
              "bindings": null,
              "events": {
                "CLICK": {
                  "action": "SHOW_DIALOG",
                  "target": "taskDetailDialog",
                  "payload": {
                    "taskId": "4"
                  }
                }
              },
              "children": []
            }
          ]
        }
      ]
    },
    {
      "id": "taskDetailDialog",
      "node_type": "Dialog",
      "props": {
        "title": "Task Details",
        "visible": true
      },
      "bindings": {
        "visible": "isTaskDetailDialogVisible"
      },
      "events": null,
      "children": [
        {
          "id": "taskDetailContainer",
          "node_type": "Container",
          "props": null,
          "bindings": null,
          "events": null,
          "children": [
            {
              "id": "taskDetailTitle",
              "node_type": "Heading",
              "props": {
                "text": "Implement core features"
              },
              "bindings": {
                "text": "{{selectedTask.title}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskDetailDescription",
              "node_type": "Text",
              "props": {
                "text": "Work on the main functionality"
              },
              "bindings": {
                "text": "{{selectedTask.description}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskDetailStatus",
              "node_type": "Select",
              "props": {
                "options": "['Pending', 'In Progress', 'Completed']",
                "value": "in_progress"
              },
              "bindings": {
                "value": "{{selectedTask.status}}"
              },
              "events": {
                "CHANGE": {
                  "action": "UPDATE_TASK_STATUS",
                  "target": "selectedTask.id",
                  "payload": {}
                }
              },
              "children": []
            },
            {
              "id": "closeDialogButton",
              "node_type": "Button",
              "props": {
                "label": "Close"
              },
              "bindings": null,
              "events": {
                "CLICK": {
                  "action": "HIDE_DIALOG",
                  "target": "taskDetailDialog",
                  "payload": null
                }
              },
              "children": []
            }
          ]
        }
      ]
    }
  ]
}
AutoUI.tsx:314 [AutoUI.processEvent] Event for nodeId: closeDialogButton
AutoUI.tsx:330 [AutoUI.processEvent] Using currentLayoutViaRef snapshot (taskListView children): [
  {
    "id": "taskItem-1",
    "children": [
      {
        "id": "taskItem-1-taskTitle",
        "props": {
          "text": "Setup development environment"
        },
        "events": null
      },
      {
        "id": "taskItem-1-taskStatus",
        "props": {
          "text": "completed"
        },
        "events": null
      },
      {
        "id": "taskItem-1-viewDetailsButton",
        "props": {
          "label": "View Details"
        },
        "events": {
          "CLICK": {
            "action": "SHOW_DIALOG",
            "target": "taskDetailDialog",
            "payload": {
              "taskId": "1"
            }
          }
        }
      }
    ]
  },
  {
    "id": "taskItem-2",
    "children": [
      {
        "id": "taskItem-2-taskTitle",
        "props": {
          "text": "Create project structure"
        },
        "events": null
      },
      {
        "id": "taskItem-2-taskStatus",
        "props": {
          "text": "completed"
        },
        "events": null
      },
      {
        "id": "taskItem-2-viewDetailsButton",
        "props": {
          "label": "View Details"
        },
        "events": {
          "CLICK": {
            "action": "SHOW_DIALOG",
            "target": "taskDetailDialog",
            "payload": {
              "taskId": "2"
            }
          }
        }
      }
    ]
  },
  {
    "id": "taskItem-3",
    "children": [
      {
        "id": "taskItem-3-taskTitle",
        "props": {
          "text": "Implement core features"
        },
        "events": null
      },
      {
        "id": "taskItem-3-taskStatus",
        "props": {
          "text": "in_progress"
        },
        "events": null
      },
      {
        "id": "taskItem-3-viewDetailsButton",
        "props": {
          "label": "View Details"
        },
        "events": {
          "CLICK": {
            "action": "SHOW_DIALOG",
            "target": "taskDetailDialog",
            "payload": {
              "taskId": "3"
            }
          }
        }
      }
    ]
  },
  {
    "id": "taskItem-4",
    "children": [
      {
        "id": "taskItem-4-taskTitle",
        "props": {
          "text": "Write documentation"
        },
        "events": null
      },
      {
        "id": "taskItem-4-taskStatus",
        "props": {
          "text": "pending"
        },
        "events": null
      },
      {
        "id": "taskItem-4-viewDetailsButton",
        "props": {
          "label": "View Details"
        },
        "events": {
          "CLICK": {
            "action": "SHOW_DIALOG",
            "target": "taskDetailDialog",
            "payload": {
              "taskId": "4"
            }
          }
        }
      }
    ]
  }
]
bindings.ts:526 [executeAction] HIDE_DIALOG: set isTaskDetailDialogVisible to false.
state.ts:59 [state.ts handleEvent] About to call router.resolveRoute. enablePartialUpdates: false
state.ts:60 [state.ts handleEvent] layoutForRouting ID (if exists): root
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'PLAN_START', timestamp: 1747163552899, plannerInput: {…}}
AutoUI.tsx:387 [AutoUI Debug] DataContext before resolving bindings: {
  "tasks": {
    "schema": {
      "tableName": "tasks",
      "columns": {
        "id": {
          "type": "uuid",
          "primaryKey": true
        },
        "title": {
          "type": "text",
          "notNull": true
        },
        "description": {
          "type": "text"
        },
        "status": {
          "type": "text",
          "notNull": true,
          "default": "pending"
        },
        "priority": {
          "type": "text",
          "notNull": true,
          "default": "medium"
        },
        "dueDate": {
          "type": "date"
        },
        "createdAt": {
          "type": "timestamp",
          "notNull": true,
          "default": "now()"
        },
        "updatedAt": {
          "type": "timestamp"
        }
      },
      "sampleData": [
        {
          "id": "1",
          "title": "Setup development environment",
          "description": "Install Node.js, TypeScript, and VS Code",
          "status": "completed",
          "priority": "high",
          "dueDate": "2023-12-31",
          "createdAt": "2023-12-01T10:00:00Z",
          "updatedAt": "2023-12-01T15:30:00Z"
        },
        {
          "id": "2",
          "title": "Create project structure",
          "description": "Set up initial files and directories",
          "status": "completed",
          "priority": "high",
          "dueDate": "2023-12-31",
          "createdAt": "2023-12-02T09:15:00Z",
          "updatedAt": "2023-12-02T11:45:00Z"
        },
        {
          "id": "3",
          "title": "Implement core features",
          "description": "Work on the main functionality",
          "status": "in_progress",
          "priority": "medium",
          "dueDate": "2024-01-15",
          "createdAt": "2023-12-05T08:30:00Z",
          "updatedAt": "2023-12-10T14:20:00Z"
        },
        {
          "id": "4",
          "title": "Write documentation",
          "description": "Create README and API docs",
          "status": "pending",
          "priority": "low",
          "dueDate": "2024-01-31",
          "createdAt": "2023-12-15T16:45:00Z",
          "updatedAt": null
        }
      ]
    },
    "data": [
      {
        "id": "1",
        "title": "Setup development environment",
        "description": "Install Node.js, TypeScript, and VS Code",
        "status": "completed",
        "priority": "high",
        "dueDate": "2023-12-31",
        "createdAt": "2023-12-01T10:00:00Z",
        "updatedAt": "2023-12-01T15:30:00Z"
      },
      {
        "id": "2",
        "title": "Create project structure",
        "description": "Set up initial files and directories",
        "status": "completed",
        "priority": "high",
        "dueDate": "2023-12-31",
        "createdAt": "2023-12-02T09:15:00Z",
        "updatedAt": "2023-12-02T11:45:00Z"
      },
      {
        "id": "3",
        "title": "Implement core features",
        "description": "Work on the main functionality",
        "status": "in_progress",
        "priority": "medium",
        "dueDate": "2024-01-15",
        "createdAt": "2023-12-05T08:30:00Z",
        "updatedAt": "2023-12-10T14:20:00Z"
      },
      {
        "id": "4",
        "title": "Write documentation",
        "description": "Create README and API docs",
        "status": "pending",
        "priority": "low",
        "dueDate": "2024-01-31",
        "createdAt": "2023-12-15T16:45:00Z",
        "updatedAt": null
      }
    ],
    "selected": null
  },
  "users": {
    "schema": {
      "tableName": "users",
      "columns": {
        "id": {
          "type": "uuid",
          "primaryKey": true
        },
        "name": {
          "type": "text",
          "notNull": true
        },
        "email": {
          "type": "text",
          "notNull": true,
          "unique": true
        },
        "role": {
          "type": "text",
          "notNull": true,
          "default": "user"
        },
        "createdAt": {
          "type": "timestamp",
          "notNull": true,
          "default": "now()"
        }
      },
      "sampleData": [
        {
          "id": "1",
          "name": "John Doe",
          "email": "john@example.com",
          "role": "admin",
          "createdAt": "2023-10-01T00:00:00Z"
        },
        {
          "id": "2",
          "name": "Jane Smith",
          "email": "jane@example.com",
          "role": "user",
          "createdAt": "2023-10-15T08:30:00Z"
        },
        {
          "id": "3",
          "name": "Bob Johnson",
          "email": "bob@example.com",
          "role": "user",
          "createdAt": "2023-11-05T14:45:00Z"
        }
      ]
    },
    "data": [
      {
        "id": "1",
        "name": "John Doe",
        "email": "john@example.com",
        "role": "admin",
        "createdAt": "2023-10-01T00:00:00Z"
      },
      {
        "id": "2",
        "name": "Jane Smith",
        "email": "jane@example.com",
        "role": "user",
        "createdAt": "2023-10-15T08:30:00Z"
      },
      {
        "id": "3",
        "name": "Bob Johnson",
        "email": "bob@example.com",
        "role": "user",
        "createdAt": "2023-11-05T14:45:00Z"
      }
    ],
    "selected": null
  },
  "user": {
    "id": "1",
    "name": "John Doe",
    "role": "admin"
  },
  "selectedTask": null,
  "isTaskDetailDialogVisible": false
}
AutoUI.tsx:395 [AutoUI Debug] Raw layout before resolving (from planner): {
  "id": "root",
  "node_type": "Container",
  "props": null,
  "bindings": null,
  "events": null,
  "children": [
    {
      "id": "header",
      "node_type": "Header",
      "props": {
        "title": "Task Management Dashboard"
      },
      "bindings": null,
      "events": null,
      "children": null
    },
    {
      "id": "taskListView",
      "node_type": "ListView",
      "props": null,
      "bindings": {
        "data": "tasks"
      },
      "events": null,
      "children": [
        {
          "id": "taskItem",
          "node_type": "Card",
          "props": null,
          "bindings": null,
          "events": null,
          "children": [
            {
              "id": "taskTitle",
              "node_type": "Text",
              "props": null,
              "bindings": {
                "text": "{{item.title}}"
              },
              "events": null,
              "children": null
            },
            {
              "id": "taskStatus",
              "node_type": "Text",
              "props": null,
              "bindings": {
                "text": "{{item.status}}"
              },
              "events": null,
              "children": null
            },
            {
              "id": "viewDetailsButton",
              "node_type": "Button",
              "props": {
                "label": "View Details"
              },
              "bindings": null,
              "events": {
                "CLICK": {
                  "action": "SHOW_DIALOG",
                  "target": "taskDetailDialog",
                  "payload": {
                    "taskId": "{{item.id}}"
                  }
                }
              },
              "children": null
            }
          ]
        }
      ]
    },
    {
      "id": "taskDetailDialog",
      "node_type": "Dialog",
      "props": {
        "title": "Task Details"
      },
      "bindings": {
        "visible": "isTaskDetailDialogVisible"
      },
      "events": null,
      "children": [
        {
          "id": "taskDetailContainer",
          "node_type": "Container",
          "props": null,
          "bindings": null,
          "events": null,
          "children": [
            {
              "id": "taskDetailTitle",
              "node_type": "Heading",
              "props": null,
              "bindings": {
                "text": "{{selectedTask.title}}"
              },
              "events": null,
              "children": null
            },
            {
              "id": "taskDetailDescription",
              "node_type": "Text",
              "props": null,
              "bindings": {
                "text": "{{selectedTask.description}}"
              },
              "events": null,
              "children": null
            },
            {
              "id": "taskDetailStatus",
              "node_type": "Select",
              "props": {
                "options": "['Pending', 'In Progress', 'Completed']"
              },
              "bindings": {
                "value": "{{selectedTask.status}}"
              },
              "events": {
                "CHANGE": {
                  "action": "UPDATE_TASK_STATUS",
                  "target": "selectedTask.id",
                  "payload": {
                    "status": "{{value}}"
                  }
                }
              },
              "children": null
            },
            {
              "id": "closeDialogButton",
              "node_type": "Button",
              "props": {
                "label": "Close"
              },
              "bindings": null,
              "events": {
                "CLICK": {
                  "action": "HIDE_DIALOG",
                  "target": "taskDetailDialog",
                  "payload": null
                }
              },
              "children": null
            }
          ]
        }
      ]
    }
  ]
}
events.ts:104 [AutoUI Debug] Corrected list binding for node 'taskListView': from 'tasks' to 'tasks.data'
AutoUI.tsx:400 [AutoUI Debug] Layout after binding correction (before resolving): {
  "id": "root",
  "node_type": "Container",
  "props": null,
  "bindings": null,
  "events": null,
  "children": [
    {
      "id": "header",
      "node_type": "Header",
      "props": {
        "title": "Task Management Dashboard"
      },
      "bindings": null,
      "events": null,
      "children": null
    },
    {
      "id": "taskListView",
      "node_type": "ListView",
      "props": null,
      "bindings": {
        "data": "tasks.data"
      },
      "events": null,
      "children": [
        {
          "id": "taskItem",
          "node_type": "Card",
          "props": null,
          "bindings": null,
          "events": null,
          "children": [
            {
              "id": "taskTitle",
              "node_type": "Text",
              "props": null,
              "bindings": {
                "text": "{{item.title}}"
              },
              "events": null,
              "children": null
            },
            {
              "id": "taskStatus",
              "node_type": "Text",
              "props": null,
              "bindings": {
                "text": "{{item.status}}"
              },
              "events": null,
              "children": null
            },
            {
              "id": "viewDetailsButton",
              "node_type": "Button",
              "props": {
                "label": "View Details"
              },
              "bindings": null,
              "events": {
                "CLICK": {
                  "action": "SHOW_DIALOG",
                  "target": "taskDetailDialog",
                  "payload": {
                    "taskId": "{{item.id}}"
                  }
                }
              },
              "children": null
            }
          ]
        }
      ]
    },
    {
      "id": "taskDetailDialog",
      "node_type": "Dialog",
      "props": {
        "title": "Task Details"
      },
      "bindings": {
        "visible": "isTaskDetailDialogVisible"
      },
      "events": null,
      "children": [
        {
          "id": "taskDetailContainer",
          "node_type": "Container",
          "props": null,
          "bindings": null,
          "events": null,
          "children": [
            {
              "id": "taskDetailTitle",
              "node_type": "Heading",
              "props": null,
              "bindings": {
                "text": "{{selectedTask.title}}"
              },
              "events": null,
              "children": null
            },
            {
              "id": "taskDetailDescription",
              "node_type": "Text",
              "props": null,
              "bindings": {
                "text": "{{selectedTask.description}}"
              },
              "events": null,
              "children": null
            },
            {
              "id": "taskDetailStatus",
              "node_type": "Select",
              "props": {
                "options": "['Pending', 'In Progress', 'Completed']"
              },
              "bindings": {
                "value": "{{selectedTask.status}}"
              },
              "events": {
                "CHANGE": {
                  "action": "UPDATE_TASK_STATUS",
                  "target": "selectedTask.id",
                  "payload": {
                    "status": "{{value}}"
                  }
                }
              },
              "children": null
            },
            {
              "id": "closeDialogButton",
              "node_type": "Button",
              "props": {
                "label": "Close"
              },
              "bindings": null,
              "events": {
                "CLICK": {
                  "action": "HIDE_DIALOG",
                  "target": "taskDetailDialog",
                  "payload": null
                }
              },
              "children": null
            }
          ]
        }
      ]
    }
  ]
}
shadcn.tsx:326 [Adapter Debug] Rendering ListView: id=taskListView, props= {data: Array(4)}
shadcn.tsx:263 [Adapter Debug] Rendering Container: id=taskDetailContainer, props= null
shadcn.tsx:800 [Adapter Debug] Rendering Dialog: id=taskDetailDialog, props= {title: 'Task Details', visible: true} isOpen=true
shadcn.tsx:263 [Adapter Debug] Rendering Container: id=root, props= null
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'RENDER_COMPLETE', timestamp: 1747163552910, layout: {…}, renderTimeMs: 1}
bindings.ts:194 [processBinding Debug] Processing PATH string: "Task Management Dashboard", Has itemData: false
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'BINDING_RESOLUTION_COMPLETE', timestamp: 1747163552911, originalLayout: {…}, resolvedLayout: {…}}
bindings.ts:194 [processBinding Debug] Processing PATH string: "tasks.data", Has itemData: false
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.title}}", Path: "item.title", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '1', title: 'Setup development environment', description: 'Install Node.js, TypeScript, and VS Code', status: 'completed', priority: 'high', …}
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.status}}", Path: "item.status", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '1', title: 'Setup development environment', description: 'Install Node.js, TypeScript, and VS Code', status: 'completed', priority: 'high', …}
bindings.ts:194 [processBinding Debug] Processing PATH string: "View Details", Has itemData: true
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.id}}", Path: "item.id", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '1', title: 'Setup development environment', description: 'Install Node.js, TypeScript, and VS Code', status: 'completed', priority: 'high', …}
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.title}}", Path: "item.title", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '2', title: 'Create project structure', description: 'Set up initial files and directories', status: 'completed', priority: 'high', …}
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.status}}", Path: "item.status", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '2', title: 'Create project structure', description: 'Set up initial files and directories', status: 'completed', priority: 'high', …}
bindings.ts:194 [processBinding Debug] Processing PATH string: "View Details", Has itemData: true
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.id}}", Path: "item.id", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '2', title: 'Create project structure', description: 'Set up initial files and directories', status: 'completed', priority: 'high', …}
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.title}}", Path: "item.title", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '3', title: 'Implement core features', description: 'Work on the main functionality', status: 'in_progress', priority: 'medium', …}
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.status}}", Path: "item.status", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '3', title: 'Implement core features', description: 'Work on the main functionality', status: 'in_progress', priority: 'medium', …}
bindings.ts:194 [processBinding Debug] Processing PATH string: "View Details", Has itemData: true
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.id}}", Path: "item.id", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '3', title: 'Implement core features', description: 'Work on the main functionality', status: 'in_progress', priority: 'medium', …}
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.title}}", Path: "item.title", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '4', title: 'Write documentation', description: 'Create README and API docs', status: 'pending', priority: 'low', …}
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.status}}", Path: "item.status", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '4', title: 'Write documentation', description: 'Create README and API docs', status: 'pending', priority: 'low', …}
bindings.ts:194 [processBinding Debug] Processing PATH string: "View Details", Has itemData: true
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{item.id}}", Path: "item.id", Has itemData: true
bindings.ts:85 [processBinding Debug] itemData content (EXACT): {id: '4', title: 'Write documentation', description: 'Create README and API docs', status: 'pending', priority: 'low', …}
bindings.ts:194 [processBinding Debug] Processing PATH string: "Task Details", Has itemData: false
bindings.ts:194 [processBinding Debug] Processing PATH string: "isTaskDetailDialogVisible", Has itemData: false
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'PLAN_ERROR', timestamp: 1747163552913, error: Error: ActionRouter did not provide a prompt to callPlannerLLM.
    at callPlannerLLM (webpack-inte…}
dialog.tsx:543  Warning: Missing `Description` or `aria-describedby={undefined}` for {DialogContent}. Error Component Stack
    at DescriptionWarning (dialog.tsx:534:66)
    at eval (dialog.tsx:386:13)
    at eval (dialog.tsx:261:58)
    at Presence (presence.tsx:12:11)
    at eval (dialog.tsx:236:64)
    at eval (slot.tsx:68:13)
    at eval (slot.tsx:15:13)
    at eval (index.mjs:28:13)
    at eval (portal.tsx:22:22)
    at Presence (presence.tsx:12:11)
    at Provider (index.mjs:27:15)
    at DialogPortal (dialog.tsx:146:11)
    at DialogPortal (state.ts:284:6)
    at DialogContent (dialog.tsx:11:1)
    at Provider (index.mjs:27:15)
    at Dialog (dialog.tsx:52:5)
    at Dialog (state.ts:274:9)
    at div (<anonymous>)
    at div (<anonymous>)
    at div (<anonymous>)
    at AutoUI (events.ts:142:5)
    at div (<anonymous>)
    at main (<anonymous>)
    at Home (<anonymous>)
    at ClientPageRoot (client-page.tsx:11:3)
    at InnerLayoutRouter (layout-router.tsx:329:3)
    at RedirectErrorBoundary (redirect-boundary.tsx:48:5)
    at RedirectBoundary (redirect-boundary.tsx:79:9)
    at NotFoundErrorBoundary (not-found-boundary.tsx:32:5)
    at NotFoundBoundary (not-found-boundary.tsx:117:9)
    at LoadingBoundary (layout-router.tsx:484:3)
    at ErrorBoundary (error-boundary.tsx:171:9)
    at InnerScrollAndFocusHandler (layout-router.tsx:294:3)
    at ScrollAndFocusHandler (layout-router.tsx:304:9)
    at RenderFromTemplateContext (render-from-template-context.tsx:8:10)
    at OuterLayoutRouter (layout-router.tsx:532:9)
    at body (<anonymous>)
    at html (<anonymous>)
    at RootLayout [Server] (<anonymous>)
    at RedirectErrorBoundary (redirect-boundary.tsx:48:5)
    at RedirectBoundary (redirect-boundary.tsx:79:9)
    at NotFoundErrorBoundary (not-found-boundary.tsx:32:5)
    at NotFoundBoundary (not-found-boundary.tsx:117:9)
    at DevRootNotFoundBoundary (dev-root-not-found-boundary.tsx:20:3)
    at ReactDevOverlay (ReactDevOverlay.tsx:98:3)
    at HotReload (hot-reloader-client.tsx:452:3)
    at Router (app-router.tsx:300:9)
    at ErrorBoundaryHandler (error-boundary.tsx:68:11)
    at ErrorBoundary (error-boundary.tsx:171:9)
    at AppRouter (app-router.tsx:716:3)
    at ServerRoot (app-index.tsx:126:13)
    at Root (app-index.tsx:133:17)
overrideMethod @ hook.js:608
eval @ dialog.tsx:543
commitHookEffectListMount @ react-dom.development.js:21102
commitHookPassiveMountEffects @ react-dom.development.js:23154
commitPassiveMountOnFiber @ react-dom.development.js:23259
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23256
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23370
recursivelyTraversePassiveMountEffects @ react-dom.development.js:23237
commitPassiveMountOnFiber @ react-dom.development.js:23267
commitPassiveMountEffects @ react-dom.development.js:23225
flushPassiveEffectsImpl @ react-dom.development.js:26497
flushPassiveEffects @ react-dom.development.js:26438
commitRootImpl @ react-dom.development.js:26337
commitRoot @ react-dom.development.js:26077
performSyncWorkOnRoot @ react-dom.development.js:24925
flushSyncWorkAcrossRoots_impl @ react-dom.development.js:7758
flushSyncWorkOnAllRoots @ react-dom.development.js:7718
processRootScheduleInMicrotask @ react-dom.development.js:7863
eval @ react-dom.development.js:8034
dialog.tsx:543  Warning: Missing `Description` or `aria-describedby={undefined}` for {DialogContent}.
overrideMethod @ hook.js:608
eval @ dialog.tsx:543
commitHookEffectListMount @ react-dom.development.js:21102
invokePassiveEffectMountInDEV @ react-dom.development.js:23980
invokeEffectsInDev @ react-dom.development.js:26852
legacyCommitDoubleInvokeEffectsInDEV @ react-dom.development.js:26835
commitDoubleInvokeEffectsInDEV @ react-dom.development.js:26816
flushPassiveEffectsImpl @ react-dom.development.js:26514
flushPassiveEffects @ react-dom.development.js:26438
commitRootImpl @ react-dom.development.js:26337
commitRoot @ react-dom.development.js:26077
performSyncWorkOnRoot @ react-dom.development.js:24925
flushSyncWorkAcrossRoots_impl @ react-dom.development.js:7758
flushSyncWorkOnAllRoots @ react-dom.development.js:7718
processRootScheduleInMicrotask @ react-dom.development.js:7863
eval @ react-dom.development.js:8034
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{selectedTask.title}}", Path: "selectedTask.title", Has itemData: false
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'BINDING_RESOLUTION_COMPLETE', timestamp: 1747163552950, originalLayout: {…}, resolvedLayout: {…}}
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{selectedTask.description}}", Path: "selectedTask.description", Has itemData: false
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'BINDING_RESOLUTION_COMPLETE', timestamp: 1747163552950, originalLayout: {…}, resolvedLayout: {…}}
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{selectedTask.status}}", Path: "selectedTask.status", Has itemData: false
bindings.ts:78 [processBinding Debug] Processing EXACT template: "{{value}}", Path: "value", Has itemData: false
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'BINDING_RESOLUTION_COMPLETE', timestamp: 1747163552950, originalLayout: {…}, resolvedLayout: {…}}
bindings.ts:194 [processBinding Debug] Processing PATH string: "Close", Has itemData: false
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'BINDING_RESOLUTION_COMPLETE', timestamp: 1747163552950, originalLayout: {…}, resolvedLayout: {…}}
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'BINDING_RESOLUTION_COMPLETE', timestamp: 1747163552955, originalLayout: {…}, resolvedLayout: {…}}
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'BINDING_RESOLUTION_COMPLETE', timestamp: 1747163552955, originalLayout: {…}, resolvedLayout: {…}}
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'BINDING_RESOLUTION_COMPLETE', timestamp: 1747163552955, originalLayout: {…}, resolvedLayout: {…}}
AutoUI.tsx:178 [AutoUI Debug] System Event: {type: 'BINDING_RESOLUTION_COMPLETE', timestamp: 1747163552955, originalLayout: {…}, resolvedLayout: {…}}
AutoUI.tsx:408 [AutoUI Debug] Resolved layout after bindings: {
  "id": "root",
  "node_type": "Container",
  "props": null,
  "bindings": null,
  "events": null,
  "children": [
    {
      "id": "header",
      "node_type": "Header",
      "props": {
        "title": "Task Management Dashboard"
      },
      "bindings": null,
      "events": null,
      "children": []
    },
    {
      "id": "taskListView",
      "node_type": "ListView",
      "props": {
        "data": [
          {
            "id": "1",
            "title": "Setup development environment",
            "description": "Install Node.js, TypeScript, and VS Code",
            "status": "completed",
            "priority": "high",
            "dueDate": "2023-12-31",
            "createdAt": "2023-12-01T10:00:00Z",
            "updatedAt": "2023-12-01T15:30:00Z"
          },
          {
            "id": "2",
            "title": "Create project structure",
            "description": "Set up initial files and directories",
            "status": "completed",
            "priority": "high",
            "dueDate": "2023-12-31",
            "createdAt": "2023-12-02T09:15:00Z",
            "updatedAt": "2023-12-02T11:45:00Z"
          },
          {
            "id": "3",
            "title": "Implement core features",
            "description": "Work on the main functionality",
            "status": "in_progress",
            "priority": "medium",
            "dueDate": "2024-01-15",
            "createdAt": "2023-12-05T08:30:00Z",
            "updatedAt": "2023-12-10T14:20:00Z"
          },
          {
            "id": "4",
            "title": "Write documentation",
            "description": "Create README and API docs",
            "status": "pending",
            "priority": "low",
            "dueDate": "2024-01-31",
            "createdAt": "2023-12-15T16:45:00Z",
            "updatedAt": null
          }
        ]
      },
      "bindings": {
        "data": "tasks.data"
      },
      "events": null,
      "children": [
        {
          "id": "taskItem-1",
          "node_type": "Card",
          "props": {
            "key": "1"
          },
          "bindings": null,
          "events": null,
          "children": [
            {
              "id": "taskItem-1-taskTitle",
              "node_type": "Text",
              "props": {
                "text": "Setup development environment"
              },
              "bindings": {
                "text": "{{item.title}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskItem-1-taskStatus",
              "node_type": "Text",
              "props": {
                "text": "completed"
              },
              "bindings": {
                "text": "{{item.status}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskItem-1-viewDetailsButton",
              "node_type": "Button",
              "props": {
                "label": "View Details"
              },
              "bindings": null,
              "events": {
                "CLICK": {
                  "action": "SHOW_DIALOG",
                  "target": "taskDetailDialog",
                  "payload": {
                    "taskId": "1"
                  }
                }
              },
              "children": []
            }
          ]
        },
        {
          "id": "taskItem-2",
          "node_type": "Card",
          "props": {
            "key": "2"
          },
          "bindings": null,
          "events": null,
          "children": [
            {
              "id": "taskItem-2-taskTitle",
              "node_type": "Text",
              "props": {
                "text": "Create project structure"
              },
              "bindings": {
                "text": "{{item.title}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskItem-2-taskStatus",
              "node_type": "Text",
              "props": {
                "text": "completed"
              },
              "bindings": {
                "text": "{{item.status}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskItem-2-viewDetailsButton",
              "node_type": "Button",
              "props": {
                "label": "View Details"
              },
              "bindings": null,
              "events": {
                "CLICK": {
                  "action": "SHOW_DIALOG",
                  "target": "taskDetailDialog",
                  "payload": {
                    "taskId": "2"
                  }
                }
              },
              "children": []
            }
          ]
        },
        {
          "id": "taskItem-3",
          "node_type": "Card",
          "props": {
            "key": "3"
          },
          "bindings": null,
          "events": null,
          "children": [
            {
              "id": "taskItem-3-taskTitle",
              "node_type": "Text",
              "props": {
                "text": "Implement core features"
              },
              "bindings": {
                "text": "{{item.title}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskItem-3-taskStatus",
              "node_type": "Text",
              "props": {
                "text": "in_progress"
              },
              "bindings": {
                "text": "{{item.status}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskItem-3-viewDetailsButton",
              "node_type": "Button",
              "props": {
                "label": "View Details"
              },
              "bindings": null,
              "events": {
                "CLICK": {
                  "action": "SHOW_DIALOG",
                  "target": "taskDetailDialog",
                  "payload": {
                    "taskId": "3"
                  }
                }
              },
              "children": []
            }
          ]
        },
        {
          "id": "taskItem-4",
          "node_type": "Card",
          "props": {
            "key": "4"
          },
          "bindings": null,
          "events": null,
          "children": [
            {
              "id": "taskItem-4-taskTitle",
              "node_type": "Text",
              "props": {
                "text": "Write documentation"
              },
              "bindings": {
                "text": "{{item.title}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskItem-4-taskStatus",
              "node_type": "Text",
              "props": {
                "text": "pending"
              },
              "bindings": {
                "text": "{{item.status}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskItem-4-viewDetailsButton",
              "node_type": "Button",
              "props": {
                "label": "View Details"
              },
              "bindings": null,
              "events": {
                "CLICK": {
                  "action": "SHOW_DIALOG",
                  "target": "taskDetailDialog",
                  "payload": {
                    "taskId": "4"
                  }
                }
              },
              "children": []
            }
          ]
        }
      ]
    },
    {
      "id": "taskDetailDialog",
      "node_type": "Dialog",
      "props": {
        "title": "Task Details",
        "visible": false
      },
      "bindings": {
        "visible": "isTaskDetailDialogVisible"
      },
      "events": null,
      "children": [
        {
          "id": "taskDetailContainer",
          "node_type": "Container",
          "props": null,
          "bindings": null,
          "events": null,
          "children": [
            {
              "id": "taskDetailTitle",
              "node_type": "Heading",
              "props": null,
              "bindings": {
                "text": "{{selectedTask.title}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskDetailDescription",
              "node_type": "Text",
              "props": null,
              "bindings": {
                "text": "{{selectedTask.description}}"
              },
              "events": null,
              "children": []
            },
            {
              "id": "taskDetailStatus",
              "node_type": "Select",
              "props": {
                "options": "['Pending', 'In Progress', 'Completed']"
              },
              "bindings": {
                "value": "{{selectedTask.status}}"
              },
              "events": {
                "CHANGE": {
                  "action": "UPDATE_TASK_STATUS",
                  "target": "selectedTask.id",
                  "payload": {}
                }
              },
              "children": []
            },
            {
              "id": "closeDialogButton",
              "node_type": "Button",
              "props": {
                "label": "Close"
              },
              "bindings": null,
              "events": {
                "CLICK": {
                  "action": "HIDE_DIALOG",
                  "target": "taskDetailDialog",
                  "payload": null
                }
              },
              "children": []
            }
          ]
        }
      ]
    }
  ]
}